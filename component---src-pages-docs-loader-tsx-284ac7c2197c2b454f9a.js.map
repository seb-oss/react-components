{"version":3,"file":"component---src-pages-docs-loader-tsx-284ac7c2197c2b454f9a.js","mappings":"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","sources":["webpack://react-components-docs/../lib/src/Loader/Loader.tsx","webpack://react-components-docs/./src/pages/docs/loader.tsx","webpack://react-components-docs/../lib/src/Loader/Loader.tsx?7075"],"sourcesContent":["import React from \"react\";\nimport classnames from \"classnames\";\nimport \"./loader.scss\";\n\nexport type LoaderSize = \"xs\" | \"sm\" | \"md\" | \"lg\";\nexport type LoaderType = \"spinner\" | \"square\";\nexport type LoaderProps = JSX.IntrinsicElements[\"div\"] & {\n    /** Loader size. Supported sizes: `xs`, `sm`, `md`, `lg` */\n    size?: LoaderSize;\n    /** Loader types. Supportes types: `spinner`, `square` */\n    type?: LoaderType;\n    /** Have the loader take over it's parent */\n    cover?: boolean;\n    /** Have the loader take over the screen */\n    fullscreen?: boolean;\n    /** Dims the background to indicate UI interactions are blocked */\n    backdrop?: boolean;\n    /** Show or hide the loader. Default is `true` */\n    toggle?: boolean;\n};\n\nexport const Loader: React.FC<LoaderProps> = React.memo(\n    React.forwardRef(({ size = \"md\", type = \"spinner\", toggle = true, fullscreen, cover, backdrop, ...props }: LoaderProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        return (\n            toggle && (\n                <div\n                    {...props}\n                    ref={ref}\n                    className={classnames(\n                        \"rc\",\n                        \"loader\",\n                        {\n                            \"loader-cover\": cover,\n                            \"loader-fullscreen\": fullscreen && !cover,\n                            \"loader-backdrop\": backdrop,\n                            [`loader-${size}`]: size,\n                            [`loader-${type}`]: type,\n                        },\n                        props.className\n                    )}\n                    role={props.role || \"status\"}\n                >\n                    <svg viewBox=\"0 0 66 66\" xmlns=\"http://www.w3.org/2000/svg\">\n                        {type === \"spinner\" && <circle cx=\"33\" cy=\"33\" r=\"30\" fill=\"none\" />}\n                        {type === \"square\" && <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" />}\n                    </svg>\n                    {props.children}\n                </div>\n            )\n        );\n    })\n);\n","import Docs from \"@common/Docs\";\nimport React from \"react\";\nimport { Loader, LoaderSize, LoaderType } from \"@sebgroup/react-components/Loader\";\nimport { useDynamicForm, DynamicFormOption } from \"@sebgroup/react-components/hooks/useDynamicForm\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Loader/Loader\");\nconst code: string = `<Loader toggle={toggle} />`;\n\nconst sizes: Array<DynamicFormOption<LoaderSize>> = [\n    { key: \"sm\", label: \"sm\", value: \"sm\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"md\", label: \"md\", value: \"md\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"lg\", label: \"lg\", value: \"lg\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\n\nconst types: Array<DynamicFormOption<LoaderType>> = [\n    { key: \"spinner\", label: \"spinner\", value: \"spinner\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"square\", label: \"square\", value: \"square\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\n\nconst displayTypes: Array<DynamicFormOption> = [\n    { key: \"cover\", label: \"cover\", value: \"cover\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"fullscreen\", label: \"fullscreen\", value: \"fullscreen\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\n\nconst LoaderPage: React.FC = (): React.ReactElement<void> => {\n    const {\n        renderForm: renderControls,\n        state: { controls },\n        patchState: setState,\n    } = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"size\", label: \"size\", options: sizes, controlType: \"Radio\", initialValue: sizes[1].value },\n                { key: \"type\", label: \"type\", options: types, controlType: \"Radio\", initialValue: types[0].value },\n                { key: \"display\", label: \"Display types\", options: displayTypes, controlType: \"Radio\", initialValue: displayTypes[0].value },\n                { key: \"backdrop\", label: \"backdrop\", controlType: \"Checkbox\", initialValue: false },\n                { key: \"children\", label: \"Render children to be displayed under the loader\", controlType: \"Checkbox\", initialValue: false },\n            ],\n        },\n    ]);\n\n    const { size, type, backdrop, display } = controls as { [k: string]: any };\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <Loader\n                    {...{ size, type, backdrop }}\n                    fullscreen={display === \"fullscreen\" && !!controls}\n                    cover={display === \"cover\"}\n                    onClick={() => {\n                        display === \"fullscreen\" && setState(\"controls\", \"display\", displayTypes[0].value);\n                    }}\n                >\n                    {controls.children && <p className=\"mt-2\">Loading...</p>}\n                </Loader>\n            }\n            code={code}\n            controls={renderControls()}\n        />\n    );\n};\n\nexport default LoaderPage;\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport \\\"./loader.scss\\\";\\n\\nexport type LoaderSize = \\\"xs\\\" | \\\"sm\\\" | \\\"md\\\" | \\\"lg\\\";\\nexport type LoaderType = \\\"spinner\\\" | \\\"square\\\";\\nexport type LoaderProps = JSX.IntrinsicElements[\\\"div\\\"] & {\\n    /** Loader size. Supported sizes: `xs`, `sm`, `md`, `lg` */\\n    size?: LoaderSize;\\n    /** Loader types. Supportes types: `spinner`, `square` */\\n    type?: LoaderType;\\n    /** Have the loader take over it's parent */\\n    cover?: boolean;\\n    /** Have the loader take over the screen */\\n    fullscreen?: boolean;\\n    /** Dims the background to indicate UI interactions are blocked */\\n    backdrop?: boolean;\\n    /** Show or hide the loader. Default is `true` */\\n    toggle?: boolean;\\n};\\n\\nexport const Loader: React.FC<LoaderProps> = React.memo(\\n    React.forwardRef(({ size = \\\"md\\\", type = \\\"spinner\\\", toggle = true, fullscreen, cover, backdrop, ...props }: LoaderProps, ref: React.ForwardedRef<HTMLDivElement>) => {\\n        return (\\n            toggle && (\\n                <div\\n                    {...props}\\n                    ref={ref}\\n                    className={classnames(\\n                        \\\"rc\\\",\\n                        \\\"loader\\\",\\n                        {\\n                            \\\"loader-cover\\\": cover,\\n                            \\\"loader-fullscreen\\\": fullscreen && !cover,\\n                            \\\"loader-backdrop\\\": backdrop,\\n                            [`loader-${size}`]: size,\\n                            [`loader-${type}`]: type,\\n                        },\\n                        props.className\\n                    )}\\n                    role={props.role || \\\"status\\\"}\\n                >\\n                    <svg viewBox=\\\"0 0 66 66\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n                        {type === \\\"spinner\\\" && <circle cx=\\\"33\\\" cy=\\\"33\\\" r=\\\"30\\\" fill=\\\"none\\\" />}\\n                        {type === \\\"square\\\" && <rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"100%\\\" height=\\\"100%\\\" />}\\n                    </svg>\\n                    {props.children}\\n                </div>\\n            )\\n        );\\n    })\\n);\\n\";"],"names":["Loader","React","ref","size","type","toggle","fullscreen","cover","backdrop","props","className","classnames","role","viewBox","xmlns","cx","cy","r","fill","x","y","width","height","children","importString","require","sizes","key","label","value","additionalProps","wrapperProps","types","displayTypes","useDynamicForm","items","options","controlType","initialValue","renderControls","renderForm","controls","state","setState","patchState","display","Docs","mainFile","example","onClick","code"],"sourceRoot":""}