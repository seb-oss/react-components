"use strict";(self.webpackChunkreact_components_docs=self.webpackChunkreact_components_docs||[]).push([[6226],{64452:function(e,n,a){a.r(n);var t=a(27378),r=a(2634),s=a(91448),i=a(30946),o=a(63675),l=[{key:"error",label:"danger",value:"danger",additionalProps:{wrapperProps:{className:"d-inline-block"}}},{key:"success",label:"success",value:"success",additionalProps:{wrapperProps:{className:"d-inline-block"}}},{key:"warning",label:"warning",value:"warning",additionalProps:{wrapperProps:{className:"d-inline-block"}}}],c=t.memo((function(){var e=t.useState(0),n=e[0],a=e[1],c=(0,s.b)([{key:"controls",items:[{key:"min",initialValue:0,min:0,max:100,label:"Min",controlType:"Stepper"},{key:"max",initialValue:10,min:0,max:100,label:"Max",controlType:"Stepper"},{key:"disabled",label:"disabled",controlType:"Checkbox"},{key:"indicator",label:"indicator",controlType:"Checkbox"},{key:"indicatorType",label:"Indicator type",options:l,controlType:"Radio",initialValue:l[0].value,formElementAdditionalProps:{className:"indent pl-3 pt-2"}}]}]),p=c.renderForm,m=c.state.controls,d=c.setHidden;(0,t.useEffect)((function(){d("controls","indicatorType",!m.indicator)}),[m.indicator]);var u=t.useMemo((function(){return m.indicator?{type:m.indicatorType,message:"Indicator message"}:null}),[m.indicator,m.indicatorType]);return t.createElement(r.Z,{mainFile:o,example:t.createElement("div",{className:"w-100"},t.createElement(i.v,{label:"Element label",min:Number(m.min),max:Number(m.max),onIncrease:function(e,t){return a(t?Number(m.max):n+1)},onDecrease:function(e,t){return a(t?Number(m.min):n-1)},disabled:!!m.disabled,value:n,indicator:u})),code:'<Stepper\n    label={"stepper label"}\n    min={0}\n    max={100}\n    onIncrease={null}\n    onDecrease={null}\n    value={0}\n/>',controls:p()})}));n.default=c},63675:function(e,n,a){a.r(n),n.default='import React from "react";\nimport classnames from "classnames";\nimport { randomId } from "@sebgroup/frontend-tools/randomId";\nimport { FeedbackIndicator, Indicator } from "../FeedbackIndicator";\nimport "./stepper.scss";\n\nexport type StepperProps = JSX.IntrinsicElements["input"] & {\n    /** Element label */\n    label?: string;\n    /** maximum value for the element */\n    max: number;\n    /** minimum value for the element */\n    min: number;\n    /** callback when element value is decreased */\n    onDecrease: (event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLDivElement>, isMin?: boolean) => void;\n    /** callback when element value is increased */\n    onIncrease: (event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLDivElement>, isMax?: boolean) => void;\n    /** Feedback indicator */\n    indicator?: Indicator;\n    /** Props for the wrapper element (div) */\n    wrapperProps?: JSX.IntrinsicElements["div"];\n    /** configuration for accessiblity texts */\n    accessibilityConfigs?: {\n        decrementText: string;\n        incrementText: string;\n        currentValueText: string;\n    };\n};\n\n/** A stepper makes it easier to input values that are in a narrow range */\nexport const Stepper: React.FC<StepperProps> = React.forwardRef(\n    (\n        {\n            label,\n            onDecrease,\n            onIncrease,\n            indicator,\n            wrapperProps = {},\n            accessibilityConfigs = { decrementText: "Decrease by 1", incrementText: "Increase by 1", currentValueText: "Current value is " },\n            ...props\n        }: StepperProps,\n        ref: React.ForwardedRef<HTMLInputElement>\n    ) => {\n        const [id, setId] = React.useState<string>("");\n        const labelId: string = randomId("stepper-label-");\n\n        const isDecrementDisabled: boolean = props.disabled || props.value === props.min;\n\n        const onDecrement = (event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLDivElement>, isMin: boolean = false) => {\n            return isDecrementDisabled ? null : onDecrease(event, isMin);\n        };\n\n        const isIncrementDisabled: boolean = props.disabled || props.value === props.max;\n\n        const onIncrement = (event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLDivElement>, isMax: boolean = false) => {\n            return isIncrementDisabled ? null : onIncrease(event, isMax);\n        };\n\n        const onKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n            event.preventDefault();\n            switch (event.key) {\n                case "ArrowDown":\n                case "ArrowLeft":\n                    onDecrement(event);\n                    break;\n                case "End":\n                    onDecrement(event, true);\n                    break;\n                case "ArrowUp":\n                case "ArrowRight":\n                    onIncrement(event);\n                    break;\n                case "Home":\n                    onIncrement(event, true);\n                    break;\n            }\n        };\n\n        React.useEffect(() => {\n            setId(props.id ? props.id : randomId("stepper-"));\n        }, [props.id]);\n\n        return (\n            <div {...wrapperProps} className={classnames("rc custom-stepper", wrapperProps.className)}>\n                {label && (\n                    <label className="custom-label" htmlFor={id} id={labelId}>\n                        {label}\n                    </label>\n                )}\n                <FeedbackIndicator {...indicator}>\n                    <div className={classnames("stepper-container", { disabled: props.disabled })}>\n                        <button className={classnames("stepper-decrement", { disabled: isDecrementDisabled })} onClick={onDecrement} tabIndex={-1} aria-label={accessibilityConfigs?.decrementText}>\n                            <span>&#8722;</span>\n                        </button>\n                        <div\n                            className="stepper-preview"\n                            role="spinbutton"\n                            tabIndex={0}\n                            onKeyDown={onKeyDown}\n                            aria-labelledby={labelId}\n                            aria-valuenow={props.value as number}\n                            aria-valuetext={`${accessibilityConfigs.currentValueText}${props.value}`}\n                            aria-valuemin={props.min}\n                            aria-valuemax={props.max}\n                        >\n                            {props.value}\n                        </div>\n                        <button className={classnames("stepper-increment", { disabled: isIncrementDisabled })} onClick={onIncrement} tabIndex={-1} aria-label={accessibilityConfigs?.incrementText}>\n                            <span>&#43;</span>\n                        </button>\n                    </div>\n                </FeedbackIndicator>\n                <input {...props} ref={ref} id={id} type="number" readOnly={true} className={classnames("stepper-input", props.className)} />\n            </div>\n        );\n    }\n);\n'}}]);
//# sourceMappingURL=component---src-pages-docs-stepper-tsx-8ca5614bf895bbe59d1c.js.map