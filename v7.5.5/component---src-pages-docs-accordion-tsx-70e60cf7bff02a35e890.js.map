{"version":3,"file":"component---src-pages-docs-accordion-tsx-70e60cf7bff02a35e890.js","mappings":"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","sources":["webpack://react-components-docs/../lib/src/Accordion/Accordion.tsx","webpack://react-components-docs/../lib/src/Accordion/AccordionItem.tsx","webpack://react-components-docs/./src/pages/docs/accordion.tsx","webpack://react-components-docs/../lib/src/Button/Button.tsx","webpack://react-components-docs/../lib/src/Collapse/Collapse.tsx","webpack://react-components-docs/../lib/src/Accordion/Accordion.tsx?3919","webpack://react-components-docs/../lib/src/Accordion/AccordionItem.tsx?3f47"],"sourcesContent":["import { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport classnames from \"classnames\";\nimport React from \"react\";\nimport { useCombinedRefs } from \"../hooks/useCombinedRef\";\nimport \"./accordion.scss\";\nimport { AccordionItemProps } from \"./AccordionItem\";\n\nexport type AccordionProps = JSX.IntrinsicElements[\"div\"] & {\n    /** An alternative version of the accordion */\n    alternative?: boolean;\n    /** An event handler triggered when an accordion toggle is clicked */\n    onToggle?: React.MouseEventHandler<HTMLButtonElement>;\n    /** Places the icon toggle on the right side */\n    inverted?: boolean;\n    /** The default `active` item. (Overriding the native type) */\n    defaultValue?: number;\n};\n\n/** Accordions show and hide information that is not necessary at all time with one click. */\nexport const Accordion: React.FC<AccordionProps> = React.memo(\n    React.forwardRef(({ alternative, onToggle, inverted, ...props }: AccordionProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const accordionRef: React.MutableRefObject<HTMLDivElement> = useCombinedRefs(ref);\n        const [active, setActive] = React.useState<number>(props.defaultValue);\n        const [id, setId] = React.useState<string>(props.id);\n\n        /**\n         * Handles accordion item click event\n         * @param {React.MouseEvent<HTMLButtonElement>} e MouseEvent\n         */\n        const onToggleInner: React.MouseEventHandler<HTMLButtonElement> = React.useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n            const index: number = Number(e.currentTarget.dataset.indexNumber);\n            !isNaN(index) && setActive((val: number) => (val === index ? -1 : index));\n        }, []);\n\n        /**\n         * handles accordion item click callback\n         * @param {React.MouseEvent<HTMLButtonElement>} e MouseEvent\n         * @param {React.MouseEvent<HTMLButtonElement>} itemToggleFn item onToggle callback\n         */\n        const onAccordionItemToggle = React.useCallback(\n            (e: React.MouseEvent<HTMLButtonElement>, itemToggleFn?: React.MouseEventHandler<HTMLButtonElement>) => {\n                if (onToggle) {\n                    onToggle(e);\n                } else {\n                    onToggleInner(e);\n                }\n                itemToggleFn && itemToggleFn(e); // allows user to pass specific on toggle function for each accordion item\n            },\n            [onToggle, onToggleInner]\n        );\n\n        /**\n         * handles accordion keyboard support @see https://www.w3.org/TR/wai-aria-practices-1.1/examples/accordion/accordion.html\n         */\n        const onAccordionKeyDown = React.useCallback(\n            (e: React.KeyboardEvent<HTMLDivElement>) => {\n                const accordionHeaderRefs: HTMLElement[] = Array.from(accordionRef.current.querySelectorAll<HTMLElement>(\".card-header > .btn\"));\n                const isAccordionHeader: boolean = accordionHeaderRefs.includes(e.target as HTMLElement);\n\n                if (isAccordionHeader) {\n                    const eventKeyCode: string = e.key;\n                    const headerLength: number = accordionHeaderRefs.length;\n                    const currentFocusedIndex: number = accordionHeaderRefs.indexOf(e.target as HTMLElement);\n\n                    switch (eventKeyCode) {\n                        case \"ArrowDown\":\n                        case \"ArrowUp\": {\n                            e.preventDefault();\n                            const direction: number = eventKeyCode === \"ArrowDown\" ? 1 : -1;\n                            const nextFocusIndex: number = (currentFocusedIndex + headerLength + direction) % headerLength;\n                            accordionHeaderRefs[nextFocusIndex].focus();\n                            break;\n                        }\n                        case \"Home\": {\n                            e.preventDefault();\n                            accordionHeaderRefs[0].focus();\n                            break;\n                        }\n                        case \"End\": {\n                            e.preventDefault();\n                            accordionHeaderRefs[headerLength - 1].focus();\n                            break;\n                        }\n                    }\n                }\n            },\n            [accordionRef]\n        );\n\n        /** Sets custom id if the user din't pass any */\n        React.useEffect(() => setId(props.id || randomId(\"accordion-\")), [props.id]);\n        React.useEffect(() => {\n            typeof props.defaultValue === \"number\" && setActive(props.defaultValue);\n        }, [props.defaultValue]);\n\n        return (\n            <div {...props} ref={accordionRef} className={classnames([\"rc\", \"accordion\", { alternative }, { inverted }, props.className])} id={id} onKeyDown={onAccordionKeyDown}>\n                {React.Children.map(props.children, (Child: React.ReactElement<AccordionItemProps>, i: number) => {\n                    return React.isValidElement<React.FC<AccordionItemProps>>(Child)\n                        ? React.cloneElement<any>(Child, {\n                              onToggle: (e: React.MouseEvent<HTMLButtonElement>) => onAccordionItemToggle(e, Child.props.onToggle),\n                              defaultChecked: typeof active !== \"number\" ? Child.props.defaultChecked : active === i,\n                              \"data-parent-id\": id,\n                              \"data-index-number\": i,\n                          })\n                        : Child;\n                })}\n            </div>\n        );\n    })\n);\n","import { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport classnames from \"classnames\";\nimport React from \"react\";\nimport { Collapse } from \"../Collapse/Collapse\";\n\nexport type AccordionItemProps = JSX.IntrinsicElements[\"div\"] & {\n    /** The header of the accordion item */\n    header: React.ReactNode;\n    /** A sub-header description rendered under the header */\n    subHeader?: React.ReactNode;\n    /** An event handler triggered on an accordion button is clicked */\n    onToggle?: React.MouseEventHandler<HTMLButtonElement>;\n};\n\nexport const AccordionItem: React.FC<AccordionItemProps> = React.memo(\n    React.forwardRef(({ header, subHeader, onToggle, ...props }: AccordionItemProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const [uniqueId] = React.useState<string>(randomId(\"accordion-item-\"));\n        const headerId: string = `${uniqueId}--header`;\n\n        return (\n            <div {...props} ref={ref} className={classnames(\"rc\", \"card\", { collapsed: !props.defaultChecked }, props.className)}>\n                <div className=\"card-header\" id={headerId}>\n                    <button\n                        className=\"btn btn-link\"\n                        type=\"button\"\n                        aria-controls={uniqueId}\n                        aria-disabled={props.defaultChecked}\n                        aria-expanded={props.defaultChecked}\n                        data-index-number={props[\"data-index-number\"]}\n                        data-target={`#${uniqueId}`}\n                        data-toggle=\"collapse\"\n                        onClick={onToggle}\n                    >\n                        <h4>{header}</h4>\n                        {subHeader && <h6>{subHeader}</h6>}\n                    </button>\n                </div>\n                <section\n                    id={uniqueId}\n                    className={classnames(\"collapse\", { collapsed: !props.defaultChecked })}\n                    aria-labelledby={headerId}\n                    data-parent={props[\"data-parent-id\"] ? `#${props[\"data-parent-id\"]}` : null}\n                >\n                    <Collapse className=\"card-body\" toggle={props.defaultChecked}>\n                        <div className=\"content\">{props.children}</div>\n                    </Collapse>\n                </section>\n            </div>\n        );\n    })\n);\n","import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { Accordion, AccordionItem } from \"@sebgroup/react-components/Accordion\";\nimport { useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { Button } from \"@sebgroup/react-components/Button\";\nimport { Textbox } from \"@sebgroup/react-components/Textbox\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Accordion/Accordion\");\nconst importedFiles: Array<string> = [require(\"!raw-loader!@sebgroup/react-components/Accordion/AccordionItem\")];\nconst code: string = `<Accordion>\n    <AccordionItem header=\"First\">First content</AccordionItem>\n    <AccordionItem header=\"Second\">Second content</AccordionItem>\n    <AccordionItem header=\"Third\">Third content</AccordionItem>\n</Accordion>`;\n\nconst AccordionPage: React.FC = () => {\n    const {\n        renderForm: renderControls,\n        state: { controls },\n    } = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"inverted\", label: \"inverted\", description: \"Renders the toggle icons to the right\", controlType: \"Checkbox\" },\n                { key: \"alternative\", label: \"alternative\", description: \"The alternative accordion uses links-like appearance\", controlType: \"Checkbox\" },\n            ],\n        },\n    ]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            importedFiles={importedFiles}\n            example={\n                <Accordion className=\"w-100\" inverted={!!controls.inverted} alternative={!!controls.alternative} defaultValue={0}>\n                    <AccordionItem header=\"A simple accordion item\">\n                        <p>Illum amet voluptas minus aut esse totam blanditiis. Et corporis vel aspernatur dicta fugit et est placeat. Beatae dolor nisi aut minus placeat et at accusantium.</p>\n                    </AccordionItem>\n                    <AccordionItem header=\"An accordion item with headers and paragraphs\" subHeader=\"A sub-header text to add some context\">\n                        <h5>Asperiores nihil voluptatem</h5>\n                        <p>\n                            Omnis quia eum accusamus ipsum. Odit magni voluptas reprehenderit quia iste unde. Quam harum ex consequatur. Ad vitae ipsam et illo architecto aut ipsa laboriosam optio.\n                            Quae quis iusto tempore. Quo consequuntur dolorem qui omnis ducimus.\n                        </p>\n                        <h5>Exercitationem fugit earum</h5>\n                        <p>Suscipit quis quia. Et veniam sit est vero. Aut ut est. Et porro saepe aspernatur dolorum rem beatae blanditiis. Repudiandae veritatis ut.</p>\n                    </AccordionItem>\n                    <AccordionItem header=\"More complex structures\">\n                        <form onSubmit={(e) => e.preventDefault()}>\n                            <fieldset>\n                                <legend>Register your interest</legend>\n                                <Textbox label=\"email\" placeholder=\"enter your email\"></Textbox>\n\n                                <Button type=\"submit\">Submit</Button>\n                            </fieldset>\n                        </form>\n                    </AccordionItem>\n                </Accordion>\n            }\n            code={code}\n            controls={renderControls()}\n        />\n    );\n};\n\nexport default AccordionPage;\n","import React from \"react\";\nimport classnames from \"classnames\";\n\nexport type ButtonTheme = \"primary\" | \"secondary\" | \"danger\" | \"outline-primary\" | \"outline-danger\" | \"dark\" | \"light\" | \"link\";\nexport type ButtonSize = \"lg\" | \"md\" | \"sm\";\n\nexport type ButtonProps = JSX.IntrinsicElements[\"button\"] & {\n    /** Button Theme */\n    theme?: ButtonTheme;\n    /** Button size */\n    size?: ButtonSize;\n    /** Fill the parent width */\n    block?: boolean;\n};\n/** Buttons allow users to take action with a single tap. */\nexport const Button: React.FC<ButtonProps> = React.memo(\n    React.forwardRef(({ theme = \"primary\", size, block, ...props }: ButtonProps, ref: React.ForwardedRef<HTMLButtonElement>) => {\n        return (\n            <button {...props} ref={ref} className={classnames(\"rc\", \"btn\", `btn-${theme}`, { [`btn-${size}`]: size, \"btn-block\": block }, props.className)}>\n                {props.children}\n            </button>\n        );\n    })\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport \"./collapse.scss\";\nimport { useCombinedRefs } from \"../hooks\";\n\nexport type CollapseProps = JSX.IntrinsicElements[\"div\"] & {\n    /** True to expand, false to collapse */\n    toggle?: boolean;\n};\n\n/** A helper component for collapsing any content placed inside of it */\nexport const Collapse: React.FC<CollapseProps> = React.memo(\n    React.forwardRef(({ toggle = false, ...props }: CollapseProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const collapseRef: React.MutableRefObject<HTMLDivElement> = useCombinedRefs(ref);\n        const [styles, setStyles] = React.useState<React.CSSProperties>({\n            height: toggle ? \"auto\" : 0,\n            display: toggle ? \"block\" : \"none\",\n            opacity: +toggle,\n        });\n\n        /** Expand the content */\n        const expand = React.useCallback((): void => {\n            /** Cannot transition when display is set to `none`, we need to change it to `block` */\n            setStyles({ ...styles, display: \"block\" });\n            /** This async delay is needed for the height change to take effect */\n            setTimeout(() => {\n                setStyles({ display: \"block\", height: collapseRef.current?.scrollHeight, opacity: 1 });\n            }, 10);\n        }, [styles]);\n\n        /** Collapse the content */\n        const collapse = React.useCallback((): void => {\n            /** Since height `auto` will not transition, we need to change it to pixels */\n            setStyles({ ...styles, height: collapseRef.current?.scrollHeight });\n            /** This async delay is needed for the height change to take effect */\n            setTimeout(() => {\n                setStyles({ ...styles, height: 0, opacity: 0 });\n            }, 10);\n        }, [styles]);\n\n        /**\n         * An event handler triggered after collapse/expand transition ends\n         * @param e The transition event\n         */\n        const afterTransition = React.useCallback(\n            (e: React.TransitionEvent<HTMLDivElement>): void => {\n                if (e.propertyName === \"height\") {\n                    if (toggle) {\n                        setStyles({ ...styles, height: \"auto\" });\n                    } else {\n                        setStyles({ ...styles, display: \"none\" });\n                    }\n                }\n                props.onTransitionEnd && props.onTransitionEnd(e);\n            },\n            [styles, toggle, props.onTransitionEnd]\n        );\n\n        React.useEffect(() => {\n            switch (true) {\n                case toggle && styles.opacity == 0:\n                    expand();\n                    break;\n                case !toggle && styles.opacity == 1:\n                    collapse();\n                    break;\n            }\n        }, [toggle]);\n\n        return (\n            <div {...props} className={classnames(\"custom-collapse\", props.className)} ref={collapseRef} style={styles} onTransitionEnd={afterTransition}>\n                {props.children}\n            </div>\n        );\n    })\n);\n","export default \"import { randomId } from \\\"@sebgroup/frontend-tools/randomId\\\";\\nimport classnames from \\\"classnames\\\";\\nimport React from \\\"react\\\";\\nimport { useCombinedRefs } from \\\"../hooks/useCombinedRef\\\";\\nimport \\\"./accordion.scss\\\";\\nimport { AccordionItemProps } from \\\"./AccordionItem\\\";\\n\\nexport type AccordionProps = JSX.IntrinsicElements[\\\"div\\\"] & {\\n    /** An alternative version of the accordion */\\n    alternative?: boolean;\\n    /** An event handler triggered when an accordion toggle is clicked */\\n    onToggle?: React.MouseEventHandler<HTMLButtonElement>;\\n    /** Places the icon toggle on the right side */\\n    inverted?: boolean;\\n    /** The default `active` item. (Overriding the native type) */\\n    defaultValue?: number;\\n};\\n\\n/** Accordions show and hide information that is not necessary at all time with one click. */\\nexport const Accordion: React.FC<AccordionProps> = React.memo(\\n    React.forwardRef(({ alternative, onToggle, inverted, ...props }: AccordionProps, ref: React.ForwardedRef<HTMLDivElement>) => {\\n        const accordionRef: React.MutableRefObject<HTMLDivElement> = useCombinedRefs(ref);\\n        const [active, setActive] = React.useState<number>(props.defaultValue);\\n        const [id, setId] = React.useState<string>(props.id);\\n\\n        /**\\n         * Handles accordion item click event\\n         * @param {React.MouseEvent<HTMLButtonElement>} e MouseEvent\\n         */\\n        const onToggleInner: React.MouseEventHandler<HTMLButtonElement> = React.useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\\n            const index: number = Number(e.currentTarget.dataset.indexNumber);\\n            !isNaN(index) && setActive((val: number) => (val === index ? -1 : index));\\n        }, []);\\n\\n        /**\\n         * handles accordion item click callback\\n         * @param {React.MouseEvent<HTMLButtonElement>} e MouseEvent\\n         * @param {React.MouseEvent<HTMLButtonElement>} itemToggleFn item onToggle callback\\n         */\\n        const onAccordionItemToggle = React.useCallback(\\n            (e: React.MouseEvent<HTMLButtonElement>, itemToggleFn?: React.MouseEventHandler<HTMLButtonElement>) => {\\n                if (onToggle) {\\n                    onToggle(e);\\n                } else {\\n                    onToggleInner(e);\\n                }\\n                itemToggleFn && itemToggleFn(e); // allows user to pass specific on toggle function for each accordion item\\n            },\\n            [onToggle, onToggleInner]\\n        );\\n\\n        /**\\n         * handles accordion keyboard support @see https://www.w3.org/TR/wai-aria-practices-1.1/examples/accordion/accordion.html\\n         */\\n        const onAccordionKeyDown = React.useCallback(\\n            (e: React.KeyboardEvent<HTMLDivElement>) => {\\n                const accordionHeaderRefs: HTMLElement[] = Array.from(accordionRef.current.querySelectorAll<HTMLElement>(\\\".card-header > .btn\\\"));\\n                const isAccordionHeader: boolean = accordionHeaderRefs.includes(e.target as HTMLElement);\\n\\n                if (isAccordionHeader) {\\n                    const eventKeyCode: string = e.key;\\n                    const headerLength: number = accordionHeaderRefs.length;\\n                    const currentFocusedIndex: number = accordionHeaderRefs.indexOf(e.target as HTMLElement);\\n\\n                    switch (eventKeyCode) {\\n                        case \\\"ArrowDown\\\":\\n                        case \\\"ArrowUp\\\": {\\n                            e.preventDefault();\\n                            const direction: number = eventKeyCode === \\\"ArrowDown\\\" ? 1 : -1;\\n                            const nextFocusIndex: number = (currentFocusedIndex + headerLength + direction) % headerLength;\\n                            accordionHeaderRefs[nextFocusIndex].focus();\\n                            break;\\n                        }\\n                        case \\\"Home\\\": {\\n                            e.preventDefault();\\n                            accordionHeaderRefs[0].focus();\\n                            break;\\n                        }\\n                        case \\\"End\\\": {\\n                            e.preventDefault();\\n                            accordionHeaderRefs[headerLength - 1].focus();\\n                            break;\\n                        }\\n                    }\\n                }\\n            },\\n            [accordionRef]\\n        );\\n\\n        /** Sets custom id if the user din't pass any */\\n        React.useEffect(() => setId(props.id || randomId(\\\"accordion-\\\")), [props.id]);\\n        React.useEffect(() => {\\n            typeof props.defaultValue === \\\"number\\\" && setActive(props.defaultValue);\\n        }, [props.defaultValue]);\\n\\n        return (\\n            <div {...props} ref={accordionRef} className={classnames([\\\"rc\\\", \\\"accordion\\\", { alternative }, { inverted }, props.className])} id={id} onKeyDown={onAccordionKeyDown}>\\n                {React.Children.map(props.children, (Child: React.ReactElement<AccordionItemProps>, i: number) => {\\n                    return React.isValidElement<React.FC<AccordionItemProps>>(Child)\\n                        ? React.cloneElement<any>(Child, {\\n                              onToggle: (e: React.MouseEvent<HTMLButtonElement>) => onAccordionItemToggle(e, Child.props.onToggle),\\n                              defaultChecked: typeof active !== \\\"number\\\" ? Child.props.defaultChecked : active === i,\\n                              \\\"data-parent-id\\\": id,\\n                              \\\"data-index-number\\\": i,\\n                          })\\n                        : Child;\\n                })}\\n            </div>\\n        );\\n    })\\n);\\n\";","export default \"import { randomId } from \\\"@sebgroup/frontend-tools/randomId\\\";\\nimport classnames from \\\"classnames\\\";\\nimport React from \\\"react\\\";\\nimport { Collapse } from \\\"../Collapse/Collapse\\\";\\n\\nexport type AccordionItemProps = JSX.IntrinsicElements[\\\"div\\\"] & {\\n    /** The header of the accordion item */\\n    header: React.ReactNode;\\n    /** A sub-header description rendered under the header */\\n    subHeader?: React.ReactNode;\\n    /** An event handler triggered on an accordion button is clicked */\\n    onToggle?: React.MouseEventHandler<HTMLButtonElement>;\\n};\\n\\nexport const AccordionItem: React.FC<AccordionItemProps> = React.memo(\\n    React.forwardRef(({ header, subHeader, onToggle, ...props }: AccordionItemProps, ref: React.ForwardedRef<HTMLDivElement>) => {\\n        const [uniqueId] = React.useState<string>(randomId(\\\"accordion-item-\\\"));\\n        const headerId: string = `${uniqueId}--header`;\\n\\n        return (\\n            <div {...props} ref={ref} className={classnames(\\\"rc\\\", \\\"card\\\", { collapsed: !props.defaultChecked }, props.className)}>\\n                <div className=\\\"card-header\\\" id={headerId}>\\n                    <button\\n                        className=\\\"btn btn-link\\\"\\n                        type=\\\"button\\\"\\n                        aria-controls={uniqueId}\\n                        aria-disabled={props.defaultChecked}\\n                        aria-expanded={props.defaultChecked}\\n                        data-index-number={props[\\\"data-index-number\\\"]}\\n                        data-target={`#${uniqueId}`}\\n                        data-toggle=\\\"collapse\\\"\\n                        onClick={onToggle}\\n                    >\\n                        <h4>{header}</h4>\\n                        {subHeader && <h6>{subHeader}</h6>}\\n                    </button>\\n                </div>\\n                <section\\n                    id={uniqueId}\\n                    className={classnames(\\\"collapse\\\", { collapsed: !props.defaultChecked })}\\n                    aria-labelledby={headerId}\\n                    data-parent={props[\\\"data-parent-id\\\"] ? `#${props[\\\"data-parent-id\\\"]}` : null}\\n                >\\n                    <Collapse className=\\\"card-body\\\" toggle={props.defaultChecked}>\\n                        <div className=\\\"content\\\">{props.children}</div>\\n                    </Collapse>\\n                </section>\\n            </div>\\n        );\\n    })\\n);\\n\";"],"names":["Accordion","React","ref","alternative","onToggle","inverted","props","accordionRef","useCombinedRefs","defaultValue","active","setActive","id","setId","onToggleInner","e","index","Number","currentTarget","dataset","indexNumber","isNaN","val","onAccordionItemToggle","itemToggleFn","onAccordionKeyDown","accordionHeaderRefs","Array","from","current","querySelectorAll","includes","target","eventKeyCode","key","headerLength","length","currentFocusedIndex","indexOf","preventDefault","focus","randomId","className","classnames","onKeyDown","children","Child","i","defaultChecked","AccordionItem","header","subHeader","uniqueId","headerId","collapsed","type","onClick","Collapse","toggle","importString","require","importedFiles","useDynamicForm","items","label","description","controlType","renderControls","renderForm","controls","state","Docs","mainFile","example","onSubmit","Textbox","placeholder","Button","code","theme","size","block","collapseRef","height","display","opacity","styles","setStyles","expand","setTimeout","_collapseRef$current","scrollHeight","collapse","_collapseRef$current2","afterTransition","propertyName","onTransitionEnd","style"],"sourceRoot":""}