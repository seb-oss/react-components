{"version":3,"file":"component---src-pages-docs-tablelist-tsx-b86861e6411456e8e208.js","mappings":"4SAWaA,EAAsCC,EAAAA,KAC/CA,EAAAA,YAAiB,WAAgFC,GAA+C,IAA5HC,EAA2H,EAA3HA,SAAUC,EAAiH,EAAjHA,UAAWC,EAAsG,EAAtGA,OAAQC,EAA8F,EAA9FA,KAAMC,EAAwF,EAAxFA,aAAiBC,GAAuE,YAC3I,OACIP,EAAAA,cAAAA,SAAAA,OAAAA,OAAAA,CAAAA,EAAYM,EAAZ,CAA0BH,UAAWK,IAAW,KAAM,aAAc,WAAYF,aAAjC,EAAiCA,EAAcH,aAC1FH,EAAAA,cAAAA,aAAAA,KAAaI,GACbJ,EAAAA,cAAAA,KAAAA,OAAAA,OAAAA,CAAAA,EAAQO,EAAR,CAAeN,IAAKA,EAAKE,UAAWA,EAAWE,KAAMA,GAAQ,SACxDH,GALjB,K,oCCASO,EAA8CT,EAAAA,KACvDA,EAAAA,YAAiB,WAA+DC,GAA6C,IAAzGS,EAAwG,EAAxGA,OAAQC,EAAgG,EAAhGA,KAAMN,EAA0F,EAA1FA,KAAMO,EAAoF,EAApFA,OAAWL,GAAyE,YACxH,OACIP,EAAAA,cAAAA,MAAAA,OAAAA,OAAAA,CACIC,IAAKA,GACDM,EAFR,CAGIJ,UAAWK,IACP,KACA,kBACA,CACI,0BAA2BE,GAE/BH,EAAMJ,WAEVE,KAAMA,GAAQ,UAEdL,EAAAA,cAAAA,KAAAA,KAAKW,GACLX,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,2BACVS,EAAOC,KAAI,SAACC,EAAqBC,GAAtB,OACRf,EAAAA,cAAAA,KAAAA,CAAIgB,IAAQD,EAAL,IAAcD,GAAgBA,EADxC,KAjBjB,KCREG,EAAuBC,EAAQ,OAC/BC,EAA+B,CAACD,EAAQ,QAmC9C,EA5B2B,WACvB,OAGIE,EAAAA,EAAAA,GAAe,CACf,CACIJ,IAAK,WACLK,MAAO,CAAC,CAAEL,IAAK,SAAUM,MAAO,SAAUR,YAAa,oBAAqBS,YAAa,OAAQC,aAAc,mBALvGC,EADhB,EACIC,WACSC,EAFb,EAEIC,MAASD,SAQb,OACI3B,EAAAA,cAAC6B,EAAAA,EAAD,CACIC,SAAUb,EACVE,cAAeA,EACfY,QACI/B,EAAAA,cAACD,EAAD,CAAWK,OAAQuB,EAASvB,OAAkBE,aAAc,CAAEH,UAAW,UACrEH,EAAAA,cAACS,EAAD,CAAeE,KAAK,YAAYC,OAAQ,CAAC,gBACzCZ,EAAAA,cAACS,EAAD,CAAeE,KAAK,YAAYC,OAAQ,CAAC,aAAc,kBACvDZ,EAAAA,cAACS,EAAD,CAAeE,KAAK,YAAYC,OAAQ,CAAC,aAAc,eAAgB,gBAAiBF,QAAM,KAGtGsB,KA5BS,wSA6BTL,SAAUF,KAvBtB,C,+BCbA,25B,+BCAA,4vC","sources":["webpack://react-components-docs/../lib/src/TableList/TableList.tsx","webpack://react-components-docs/../lib/src/TableList/TableListItem.tsx","webpack://react-components-docs/./src/pages/docs/tablelist.tsx","webpack://react-components-docs/../lib/src/TableList/TableList.tsx?2eb8","webpack://react-components-docs/../lib/src/TableList/TableListItem.tsx?7883"],"sourcesContent":["import classnames from \"classnames\";\nimport React from \"react\";\nimport \"./table-list.scss\";\n\nexport type TableListProps = JSX.IntrinsicElements[\"dl\"] & {\n    /** Heading for list */\n    header: string;\n    /** Props for the list's wrapper (figure) */\n    wrapperProps?: JSX.IntrinsicElements[\"figure\"];\n};\n\nexport const TableList: React.FC<TableListProps> = React.memo(\n    React.forwardRef(({ children, className, header, role, wrapperProps, ...props }: TableListProps, ref: React.ForwardedRef<HTMLDListElement>) => {\n        return (\n            <figure {...wrapperProps} className={classnames(\"rc\", \"table-list\", \"bg-white\", wrapperProps?.className)}>\n                <figcaption>{header}</figcaption>\n                <dl {...props} ref={ref} className={className} role={role || \"list\"}>\n                    {children}\n                </dl>\n            </figure>\n        );\n    })\n);\n","import classnames from \"classnames\";\nimport React from \"react\";\n\nexport type TableListItemProps = JSX.IntrinsicElements[\"div\"] & {\n    /** Display the values inline */\n    inline?: boolean;\n    /** Name of the item */\n    name: string;\n    /** Values of the item */\n    values: string[];\n};\n\nexport const TableListItem: React.FC<TableListItemProps> = React.memo(\n    React.forwardRef(({ inline, name, role, values, ...props }: TableListItemProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        return (\n            <div\n                ref={ref}\n                {...props}\n                className={classnames(\n                    \"rc\",\n                    \"table-list-item\",\n                    {\n                        \"table-list-item--inline\": inline,\n                    },\n                    props.className\n                )}\n                role={role || \"group\"}\n            >\n                <dt>{name}</dt>\n                <div className=\"table-list-item__values\">\n                    {values.map((description: string, index: number) => (\n                        <dd key={`${index}-${description}`}>{description}</dd>\n                    ))}\n                </div>\n            </div>\n        );\n    })\n);\n","import Docs from \"@common/Docs\";\nimport { useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { TableList, TableListItem } from \"@sebgroup/react-components/TableList\";\nimport React from \"react\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/TableList/TableList\");\nconst importedFiles: Array<string> = [require(\"!raw-loader!@sebgroup/react-components/TableList/TableListItem\")];\nconst code: string = `<TableList header=\"list header\">\n    <TableListItem name=\"item name\" values={[\"item value\"]} />\n    <TableListItem name=\"item name\" values={[\"item value\", \"item value 2\"]} />\n    <TableListItem name=\"item name\" values={[\"item value\", \"item value 2\", \"item value 3\"]} inline />\n</TableList>`;\n\nconst ListPage: React.FC = () => {\n    const {\n        renderForm: renderControls,\n        state: { controls },\n    } = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [{ key: \"header\", label: \"Header\", description: \"Table list header\", controlType: \"Text\", initialValue: \"list header\" }],\n        },\n    ]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            importedFiles={importedFiles}\n            example={\n                <TableList header={controls.header as string} wrapperProps={{ className: \"w-100\" }}>\n                    <TableListItem name=\"item name\" values={[\"item value\"]} />\n                    <TableListItem name=\"item name\" values={[\"item value\", \"item value 2\"]} />\n                    <TableListItem name=\"item name\" values={[\"item value\", \"item value 2\", \"item value 3\"]} inline />\n                </TableList>\n            }\n            code={code}\n            controls={renderControls()}\n        />\n    );\n};\n\nexport default ListPage;\n","export default \"import classnames from \\\"classnames\\\";\\nimport React from \\\"react\\\";\\nimport \\\"./table-list.scss\\\";\\n\\nexport type TableListProps = JSX.IntrinsicElements[\\\"dl\\\"] & {\\n    /** Heading for list */\\n    header: string;\\n    /** Props for the list's wrapper (figure) */\\n    wrapperProps?: JSX.IntrinsicElements[\\\"figure\\\"];\\n};\\n\\nexport const TableList: React.FC<TableListProps> = React.memo(\\n    React.forwardRef(({ children, className, header, role, wrapperProps, ...props }: TableListProps, ref: React.ForwardedRef<HTMLDListElement>) => {\\n        return (\\n            <figure {...wrapperProps} className={classnames(\\\"rc\\\", \\\"table-list\\\", \\\"bg-white\\\", wrapperProps?.className)}>\\n                <figcaption>{header}</figcaption>\\n                <dl {...props} ref={ref} className={className} role={role || \\\"list\\\"}>\\n                    {children}\\n                </dl>\\n            </figure>\\n        );\\n    })\\n);\\n\";","export default \"import classnames from \\\"classnames\\\";\\nimport React from \\\"react\\\";\\n\\nexport type TableListItemProps = JSX.IntrinsicElements[\\\"div\\\"] & {\\n    /** Display the values inline */\\n    inline?: boolean;\\n    /** Name of the item */\\n    name: string;\\n    /** Values of the item */\\n    values: string[];\\n};\\n\\nexport const TableListItem: React.FC<TableListItemProps> = React.memo(\\n    React.forwardRef(({ inline, name, role, values, ...props }: TableListItemProps, ref: React.ForwardedRef<HTMLDivElement>) => {\\n        return (\\n            <div\\n                ref={ref}\\n                {...props}\\n                className={classnames(\\n                    \\\"rc\\\",\\n                    \\\"table-list-item\\\",\\n                    {\\n                        \\\"table-list-item--inline\\\": inline,\\n                    },\\n                    props.className\\n                )}\\n                role={role || \\\"group\\\"}\\n            >\\n                <dt>{name}</dt>\\n                <div className=\\\"table-list-item__values\\\">\\n                    {values.map((description: string, index: number) => (\\n                        <dd key={`${index}-${description}`}>{description}</dd>\\n                    ))}\\n                </div>\\n            </div>\\n        );\\n    })\\n);\\n\";"],"names":["TableList","React","ref","children","className","header","role","wrapperProps","props","classnames","TableListItem","inline","name","values","map","description","index","key","importString","require","importedFiles","useDynamicForm","items","label","controlType","initialValue","renderControls","renderForm","controls","state","Docs","mainFile","example","code"],"sourceRoot":""}