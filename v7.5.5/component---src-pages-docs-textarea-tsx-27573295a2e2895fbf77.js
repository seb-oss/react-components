"use strict";(self.webpackChunkreact_components_docs=self.webpackChunkreact_components_docs||[]).push([[7792],{67380:function(e,a,r){r.r(a);var n=r(27378),t=r(2634),o=r(39893),l=r(91448),s=r(40639),i=[{key:"error",label:"danger",value:"danger",additionalProps:{wrapperProps:{className:"d-inline-block"}}},{key:"success",label:"success",value:"success",additionalProps:{wrapperProps:{className:"d-inline-block"}}},{key:"warning",label:"warning",value:"warning",additionalProps:{wrapperProps:{className:"d-inline-block"}}}],c=n.memo((function(){var e=n.useState(""),a=e[0],r=e[1],c=(0,l.b)([{key:"controls",items:[{key:"disabled",label:"disabled",controlType:"Checkbox"},{key:"resizable",label:"resizable",controlType:"Checkbox",initialValue:!0},{key:"indicator",label:"indicator",controlType:"Checkbox"},{key:"indicatorType",label:"Indicator type",options:i,controlType:"Radio",initialValue:i[0].value,formElementAdditionalProps:{className:"indent pl-3 pt-2"}}]}]),d=c.renderForm,p=c.state.controls,m=c.setHidden;(0,n.useEffect)((function(){m("controls","indicatorType",!p.indicator)}),[p.indicator]);var b=n.useMemo((function(){return p.indicator?{type:p.indicatorType,message:"Indicator message"}:null}),[p.indicator,p.indicatorType]);return n.createElement(t.Z,{mainFile:s,example:n.createElement(o.g,{name:"test",value:a,label:"Element label",placeholder:"Placeholder...",onChange:function(e){return r(e.target.value)},disabled:!!p.disabled,readOnly:!!p.readonly,resizable:!!p.resizable,indicator:b}),code:'<Textarea value="Some text value" label="Some text label" />',controls:d()})}));a.default=c},40639:function(e,a,r){r.r(a),a.default='import React from "react";\nimport { randomId } from "@sebgroup/frontend-tools/randomId";\nimport classnames from "classnames";\nimport { FeedbackIndicator, Indicator } from "../FeedbackIndicator";\nimport "./textarea.scss";\n\nexport type TextareaProps = JSX.IntrinsicElements["textarea"] & {\n    /** Element label */\n    label?: string;\n    /** Property sets whether textarea is resizable */\n    resizable?: boolean;\n    /** Form indicator */\n    indicator?: Indicator;\n    /** Wrapper props (div) */\n    wrapperProps?: JSX.IntrinsicElements["div"];\n};\n/** Textarea is a component that allows user to add or edit text in multiline */\nexport const Textarea: React.FC<TextareaProps> = React.forwardRef(({ indicator, label, resizable, wrapperProps = {}, ...props }: TextareaProps, ref: React.ForwardedRef<HTMLTextAreaElement>) => {\n    const [id, setId] = React.useState<string>();\n\n    React.useEffect(() => setId(props.id ? props.id : label ? randomId("textarea-") : null), [props.id, label]);\n\n    return (\n        <div {...wrapperProps} className={classnames("rc text-area input-field", wrapperProps.className)}>\n            {label && <label htmlFor={id}>{label}</label>}\n            <FeedbackIndicator {...indicator}>\n                <textarea {...props} id={id} ref={ref} className={classnames("form-control", { resizable }, props.className)} />\n            </FeedbackIndicator>\n        </div>\n    );\n});\n'}}]);
//# sourceMappingURL=component---src-pages-docs-textarea-tsx-27573295a2e2895fbf77.js.map