{"version":3,"file":"component---src-pages-docs-tabs-tsx-be2517d6c34ab2d1f129.js","mappings":"2LAKMA,EAAuBC,EAAQ,OAO/BC,EAAqBC,EAAAA,MAAW,WAClC,MAA0BA,EAAAA,SAAuB,GAA1CC,EAAP,KAAcC,EAAd,KAEA,GAGIC,EAAAA,EAAAA,GAAe,CACf,CACIC,IAAK,WACLC,MAAO,CAAC,CAAED,IAAK,oBAAqBE,MAAO,uBAAwBC,YAAa,gBALpFC,EADJ,EACIA,WACSC,EAFb,EAEIC,MAASD,SAQb,OACIT,EAAAA,cAACW,EAAAA,EAAD,CACIC,SAAUf,EACVgB,QACIb,EAAAA,cAACc,EAAAA,EAAD,CAAMb,MAAOA,EAAOc,YAAab,EAAUc,oBAAqBP,EAASO,kBAAmBC,YAAa,SAACC,GAAD,OAAmBC,QAAQC,IAAI,YAAaF,EAA5C,GACrGlB,EAAAA,cAACqB,EAAAA,EAAD,cACArB,EAAAA,cAACqB,EAAAA,EAAD,eACArB,EAAAA,cAACqB,EAAAA,EAAD,cACArB,EAAAA,cAACqB,EAAAA,EAAD,CAASC,UAAQ,GAAjB,WAGRb,SAAUD,IACVe,KA/BS,mJAMM,IA8B3B,W,+BC1CA,ywH","sources":["webpack://react-components-docs/./src/pages/docs/tabs.tsx","webpack://react-components-docs/../lib/src/Tabs/Tabs.tsx?b1e5"],"sourcesContent":["import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { Tabs, TabItem } from \"@sebgroup/react-components/Tabs\";\nimport { useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Tabs/Tabs\");\nconst code: string = `<Tabs value={value} onTabChange={setValue}>\n    <TabItem>First</TabItem>\n    <TabItem>Second</TabItem>\n    <TabItem>Third</TabItem>\n</Tabs>`;\n\nconst TabsPage: React.FC = React.memo(() => {\n    const [value, setValue] = React.useState<number>(0);\n\n    const {\n        renderForm,\n        state: { controls },\n    } = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [{ key: \"autoSelectOnFocus\", label: \"Auto select on focus\", controlType: \"Checkbox\" }],\n        },\n    ]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <Tabs value={value} onTabChange={setValue} autoSelectOnFocus={!!controls.autoSelectOnFocus} onTabDelete={(index: number) => console.log(\"on delete\", index)}>\n                    <TabItem>First</TabItem>\n                    <TabItem>Second</TabItem>\n                    <TabItem>Third</TabItem>\n                    <TabItem disabled>Fourth</TabItem>\n                </Tabs>\n            }\n            controls={renderForm()}\n            code={code}\n        />\n    );\n});\n\nexport default TabsPage;\n","export default \"import React from \\\"react\\\";\\nimport { TabItemProps } from \\\"./TabItem\\\";\\nimport classnames from \\\"classnames\\\";\\nimport { useCombinedRefs } from \\\"../hooks/useCombinedRef\\\";\\nimport { Key } from \\\"../utils\\\";\\n\\nexport type TabsProps = JSX.IntrinsicElements[\\\"ul\\\"] & {\\n    /** Index of focsued tab */\\n    value?: number;\\n    /** set focused index to active index on focus */\\n    autoSelectOnFocus?: boolean;\\n    /** Callback on tab item changed */\\n    onTabChange?: (index: number) => void;\\n    /** Callback on tab item when delete key is triggered */\\n    onTabDelete?: (index: number) => void;\\n};\\n/** Tabs organize and allow navigation between groups of content that are related and at the same level of hierarchy. */\\nexport const Tabs: React.FC<TabsProps> = React.forwardRef(({ value, onTabChange, autoSelectOnFocus, onTabDelete, ...props }: TabsProps, ref: React.ForwardedRef<HTMLUListElement>) => {\\n    const tabsRef: React.MutableRefObject<HTMLUListElement> = useCombinedRefs(ref);\\n    const [focusedIndex, setFocusedIndex] = React.useState<number>(value);\\n    const [listItems, setListItems] = React.useState<HTMLAnchorElement[]>([]);\\n\\n    const navigateToTab = (target: HTMLAnchorElement, event: React.MouseEvent | React.KeyboardEvent) => {\\n        const nextFocusedIndex: number = parseInt(target.dataset.indexNumber);\\n        setFocusedIndex(nextFocusedIndex);\\n        target.href?.endsWith(\\\"#\\\") && event.preventDefault();\\n        if (target.dataset.disabled !== \\\"true\\\") {\\n            onTabChange && onTabChange(nextFocusedIndex);\\n        }\\n    };\\n    const onClick = (event: React.MouseEvent<HTMLAnchorElement>) => {\\n        navigateToTab(event.currentTarget, event);\\n    };\\n\\n    const focusTab = (index: number, event: React.KeyboardEvent<HTMLUListElement>) => {\\n        setFocusedIndex(index);\\n        listItems[index]?.focus();\\n        if (autoSelectOnFocus) {\\n            navigateToTab(listItems[index], event);\\n        }\\n    };\\n\\n    const onKeyDown = (event: React.KeyboardEvent<HTMLUListElement>) => {\\n        switch (event.key) {\\n            case Key.Enter:\\n            case Key.Space:\\n                navigateToTab(event.target as any, event);\\n                break;\\n            case Key.ArrowLeft:\\n            case Key.ArrowRight:\\n                const direction: number = event.key === Key.ArrowLeft ? -1 : 1;\\n                const nextFocusedIndex: number = (focusedIndex + listItems.length + direction) % listItems.length;\\n                if (nextFocusedIndex >= 0 && nextFocusedIndex < listItems.length) {\\n                    focusTab(nextFocusedIndex, event);\\n                }\\n                break;\\n            case Key.Home:\\n                focusTab(0, event);\\n                break;\\n            case Key.End:\\n                focusTab(listItems.length - 1, event);\\n                break;\\n            case Key.Delete:\\n                onTabDelete && onTabDelete(focusedIndex);\\n                break;\\n        }\\n    };\\n\\n    React.useLayoutEffect(() => {\\n        setListItems(tabsRef.current ? Array.from(tabsRef.current.querySelectorAll(\\\".nav-tabs > .rc.nav-item > .nav-link\\\")) : []);\\n    }, [tabsRef]);\\n\\n    return (\\n        <ul {...props} ref={tabsRef} className={classnames(\\\"rc nav nav-tabs\\\", props.className)} role={props.role || \\\"tablist\\\"} onKeyDown={onKeyDown}>\\n            {React.Children.map(props.children, (Child: React.ReactElement<TabItemProps>, index: number) => {\\n                return React.isValidElement<React.FC<TabItemProps>>(Child)\\n                    ? React.cloneElement<any>(Child, {\\n                          active: index === value,\\n                          onClick,\\n                          \\\"data-index-number\\\": index,\\n                      })\\n                    : Child;\\n            })}\\n        </ul>\\n    );\\n});\\n\";"],"names":["importString","require","TabsPage","React","value","setValue","useDynamicForm","key","items","label","controlType","renderForm","controls","state","Docs","mainFile","example","Tabs","onTabChange","autoSelectOnFocus","onTabDelete","index","console","log","TabItem","disabled","code"],"sourceRoot":""}