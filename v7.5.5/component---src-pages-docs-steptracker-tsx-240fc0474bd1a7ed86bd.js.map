{"version":3,"file":"component---src-pages-docs-steptracker-tsx-240fc0474bd1a7ed86bd.js","mappings":"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","sources":["webpack://react-components-docs/../lib/src/StepTracker/StepLabel.tsx","webpack://react-components-docs/../lib/src/StepTracker/StepTracker.tsx","webpack://react-components-docs/./src/pages/docs/steptracker.tsx","webpack://react-components-docs/../lib/src/StepTracker/StepTracker.tsx?6934"],"sourcesContent":["import React from \"react\";\nimport classnames from \"classnames\";\nimport \"./steplabel.scss\";\n\nconst checkIcon: JSX.Element = (\n    <svg fill=\"currentColor\" name=\"check\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n        <path d=\"M413.505 91.951L133.49 371.966l-98.995-98.995c-4.686-4.686-12.284-4.686-16.971 0L6.211 284.284c-4.686 4.686-4.686 12.284 0 16.971l118.794 118.794c4.686 4.686 12.284 4.686 16.971 0l299.813-299.813c4.686-4.686 4.686-12.284 0-16.971l-11.314-11.314c-4.686-4.686-12.284-4.686-16.97 0z\" />\n    </svg>\n);\n\nexport type StepLabelProps = JSX.IntrinsicElements[\"li\"] & {\n    isActive?: boolean;\n    isCompleted?: boolean;\n    isNumbered?: boolean;\n    label: React.ReactNode;\n    count?: number;\n};\n\nconst StepLabel: React.FC<StepLabelProps> = React.forwardRef(({ label, isActive, isCompleted, isNumbered, count, className, ...props }: StepLabelProps, ref: React.RefObject<HTMLLIElement>) => {\n    const renderLabel = () => {\n        if (isNumbered) {\n            return count;\n        }\n        if (isCompleted) {\n            return checkIcon;\n        }\n        return null;\n    };\n\n    return (\n        <li {...props} ref={ref} className={classnames(className, \"step-label\", { \"step-label--active\": isActive, \"step-label--completed\": isCompleted })}>\n            <div aria-hidden=\"true\" role=\"none\" className={classnames(\"step-label__label\", { \"step-label__label--numbered\": isNumbered })}>\n                {renderLabel()}\n            </div>\n            <div className=\"step-label__name\">{label}</div>\n        </li>\n    );\n});\n\nexport { StepLabel };\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { StepLabel, StepLabelProps } from \"./StepLabel\";\nimport \"./steptracker.scss\";\n\nexport type StepTrackerLabelPosition = \"right\" | \"left\" | \"bottom\" | \"top\";\nexport type StepTrackerLabelOrientation = \"horizontal\" | \"vertical\";\n\nexport type StepTrackerProps = Omit<JSX.IntrinsicElements[\"div\"], \"onClick\"> & {\n    /** Position of label in step tracker */\n    labelPosition?: StepTrackerLabelPosition;\n    /** list of item in step tracker */\n    list?: Array<StepLabelProps>;\n    /** callback when step tracker item clicked */\n    onClick?: (index: number) => void;\n    /** To display step tracker vertically or horizontally */\n    orientation?: StepTrackerLabelOrientation;\n    /** Current/ active step */\n    step: number;\n    /** Use numbers for each step */\n    useNumbers?: boolean;\n};\n/** Step trackers illustrate the steps in a multi step process */\nexport const StepTracker: React.FC<StepTrackerProps> = React.memo(\n    React.forwardRef(({ labelPosition = \"bottom\", list, onClick, orientation = \"horizontal\", step, useNumbers, ...props }: StepTrackerProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        const [isVertical, setIsVertical] = React.useState<boolean>(orientation === \"vertical\");\n\n        const getLabelProps = (index: number): Partial<StepLabelProps> => ({\n            isActive: step === index,\n            isCompleted: index < step,\n            isNumbered: useNumbers,\n            count: index + 1,\n            className: `step-label--${getLabelPositionClass()}`,\n            onClick: () => onClick && onClick(index),\n        });\n\n        const getLabelPositionClass = () => {\n            if (isVertical) {\n                return labelPosition === \"left\" ? \"left\" : \"right\";\n            }\n            return labelPosition === \"top\" ? \"top\" : \"bottom\";\n        };\n\n        React.useEffect(() => {\n            setIsVertical(orientation === \"vertical\");\n        }, [orientation]);\n\n        return (\n            <div {...props} ref={ref} className={classnames(\"rc step-tracker\", `step-tracker--${orientation}`, props.className, { clickable: onClick })}>\n                <ol className=\"step-wrapper\">\n                    {list?.map((item: StepLabelProps, i: number) => (\n                        <StepLabel key={i} {...getLabelProps(i)} {...item} />\n                    ))}\n                    {React.Children.map(props.children, (Child: React.ReactElement<StepLabelProps>, i: number) => {\n                        const newProps: Partial<StepLabelProps> = getLabelProps(i);\n                        return React.isValidElement<React.FC<StepLabelProps>>(Child)\n                            ? React.cloneElement<any>(Child, {\n                                  ...newProps,\n                                  className: classnames(Child.props.className, newProps.className),\n                              })\n                            : Child;\n                    })}\n                </ol>\n            </div>\n        );\n    })\n);\n","import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { DynamicFormOption, DynamicFormSection, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { StepTracker, StepLabel, StepLabelProps } from \"@sebgroup/react-components/StepTracker\";\n\nconst StepTrackerPage: React.FC = React.memo(() => {\n    const importString: string = require(\"!raw-loader!@sebgroup/react-components/StepTracker/StepTracker\");\n    const stepList: Array<StepLabelProps> = [{ label: \"First\" }, { label: \"Second\" }, { label: \"Third\" }, { label: \"Forth\" }];\n    const orientationList: Array<DynamicFormOption> = [\n        { label: \"vertical\", value: \"vertical\", key: \"vertical\" },\n        { label: \"horizontal\", value: \"horizontal\", key: \"horizontal\" },\n    ];\n    const directionlist: Array<DynamicFormOption> = [\n        { label: \"bottom\", value: \"bottom\", key: \"bottom\" },\n        { label: \"top\", value: \"top\", key: \"top\" },\n        { label: \"right\", value: \"right\", key: \"right\" },\n        { label: \"left\", value: \"left\", key: \"left\" },\n    ];\n    const [value, setValue] = React.useState<number>(0);\n    const {\n        renderForm,\n        state: { controls },\n    } = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                {\n                    key: \"orientation\",\n                    initialValue: orientationList[0].value,\n                    label: \"Orientation\",\n                    options: orientationList,\n                    controlType: \"Dropdown\",\n                },\n                {\n                    key: \"labelPosition\",\n                    initialValue: directionlist[0].value,\n                    label: \"Direction\",\n                    options: directionlist,\n                    controlType: \"Dropdown\",\n                },\n                {\n                    label: \"Use numbers\",\n                    key: \"useNumbers\",\n                    initialValue: false,\n                    controlType: \"Checkbox\",\n                },\n            ],\n        },\n    ]);\n    const code: string = `<StepTracker list={[{ label: \"hello\" }]} step={0} onClick={null} />`;\n\n    const { orientation, labelPosition, useNumbers } = controls as { [k: string]: any };\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <>\n                    <div\n                        className=\"sr-only\"\n                        id=\"step-tracker-progress\"\n                        role=\"progressbar\"\n                        aria-label={`Step ${value + 1} out of ${stepList.length}: ${stepList[value].label}`}\n                        aria-valuenow={value}\n                        aria-valuemin={1}\n                        aria-valuemax={stepList.length + 1}\n                        aria-live=\"polite\"\n                    />\n                    <StepTracker aria-describedby=\"step-tracker-progress\" step={value} onClick={setValue} {...{ orientation, labelPosition, useNumbers }}>\n                        {stepList.map((item, i) => (\n                            <StepLabel label={item.label} key={i} />\n                        ))}\n                    </StepTracker>\n                </>\n            }\n            code={code}\n            controls={renderForm()}\n        />\n    );\n});\n\nexport default StepTrackerPage;\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport { StepLabel, StepLabelProps } from \\\"./StepLabel\\\";\\nimport \\\"./steptracker.scss\\\";\\n\\nexport type StepTrackerLabelPosition = \\\"right\\\" | \\\"left\\\" | \\\"bottom\\\" | \\\"top\\\";\\nexport type StepTrackerLabelOrientation = \\\"horizontal\\\" | \\\"vertical\\\";\\n\\nexport type StepTrackerProps = Omit<JSX.IntrinsicElements[\\\"div\\\"], \\\"onClick\\\"> & {\\n    /** Position of label in step tracker */\\n    labelPosition?: StepTrackerLabelPosition;\\n    /** list of item in step tracker */\\n    list?: Array<StepLabelProps>;\\n    /** callback when step tracker item clicked */\\n    onClick?: (index: number) => void;\\n    /** To display step tracker vertically or horizontally */\\n    orientation?: StepTrackerLabelOrientation;\\n    /** Current/ active step */\\n    step: number;\\n    /** Use numbers for each step */\\n    useNumbers?: boolean;\\n};\\n/** Step trackers illustrate the steps in a multi step process */\\nexport const StepTracker: React.FC<StepTrackerProps> = React.memo(\\n    React.forwardRef(({ labelPosition = \\\"bottom\\\", list, onClick, orientation = \\\"horizontal\\\", step, useNumbers, ...props }: StepTrackerProps, ref: React.ForwardedRef<HTMLDivElement>) => {\\n        const [isVertical, setIsVertical] = React.useState<boolean>(orientation === \\\"vertical\\\");\\n\\n        const getLabelProps = (index: number): Partial<StepLabelProps> => ({\\n            isActive: step === index,\\n            isCompleted: index < step,\\n            isNumbered: useNumbers,\\n            count: index + 1,\\n            className: `step-label--${getLabelPositionClass()}`,\\n            onClick: () => onClick && onClick(index),\\n        });\\n\\n        const getLabelPositionClass = () => {\\n            if (isVertical) {\\n                return labelPosition === \\\"left\\\" ? \\\"left\\\" : \\\"right\\\";\\n            }\\n            return labelPosition === \\\"top\\\" ? \\\"top\\\" : \\\"bottom\\\";\\n        };\\n\\n        React.useEffect(() => {\\n            setIsVertical(orientation === \\\"vertical\\\");\\n        }, [orientation]);\\n\\n        return (\\n            <div {...props} ref={ref} className={classnames(\\\"rc step-tracker\\\", `step-tracker--${orientation}`, props.className, { clickable: onClick })}>\\n                <ol className=\\\"step-wrapper\\\">\\n                    {list?.map((item: StepLabelProps, i: number) => (\\n                        <StepLabel key={i} {...getLabelProps(i)} {...item} />\\n                    ))}\\n                    {React.Children.map(props.children, (Child: React.ReactElement<StepLabelProps>, i: number) => {\\n                        const newProps: Partial<StepLabelProps> = getLabelProps(i);\\n                        return React.isValidElement<React.FC<StepLabelProps>>(Child)\\n                            ? React.cloneElement<any>(Child, {\\n                                  ...newProps,\\n                                  className: classnames(Child.props.className, newProps.className),\\n                              })\\n                            : Child;\\n                    })}\\n                </ol>\\n            </div>\\n        );\\n    })\\n);\\n\";"],"names":["checkIcon","React","fill","name","xmlns","viewBox","d","StepLabel","ref","label","isActive","isCompleted","isNumbered","count","className","props","classnames","role","StepTracker","labelPosition","list","onClick","orientation","step","useNumbers","isVertical","setIsVertical","getLabelProps","index","getLabelPositionClass","clickable","map","item","i","key","children","Child","newProps","importString","require","stepList","orientationList","value","directionlist","setValue","useDynamicForm","items","initialValue","options","controlType","renderForm","state","controls","Docs","mainFile","example","id","length","code"],"sourceRoot":""}