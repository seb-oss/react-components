{"version":3,"file":"component---src-pages-docs-checkbox-tsx-879dc9eb234cc8c6f502.js","mappings":"gNAOMA,EAAuBC,EAAQ,OAO/BC,EAAsD,CACxD,CAAEC,IAAK,QAASC,MAAO,SAAUC,MAAO,SAAUC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,oBAChG,CAAEL,IAAK,UAAWC,MAAO,UAAWC,MAAO,UAAWC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,oBACpG,CAAEL,IAAK,UAAWC,MAAO,UAAWC,MAAO,UAAWC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,qBAGlGC,EAA8C,CAChD,CAAEN,IAAK,aAAcC,MAAO,aAAcC,MAAO,IAAKK,YAAa,8CACnE,CAAEP,IAAK,UAAWC,MAAO,UAAWC,MAAO,IAAKK,YAAa,wDA6EjE,UA1E+B,WAC3B,OAISC,EAAAA,EAAAA,GAAe,CACpB,CACIR,IAAK,WACLS,MAAO,CACH,CAAET,IAAK,SAAUC,MAAO,SAAUS,YAAa,WAAYC,cAAc,GACzE,CAAEX,IAAK,YAAaC,MAAO,YAAaS,YAAa,WAAYC,cAAc,GAC/E,CACIX,IAAK,gBACLC,MAAO,iBACPW,QAASb,EACTW,YAAa,QACbC,aAAcZ,EAAW,GAAGG,MAC5BW,2BAA4B,CAAER,UAAW,qBAE7C,CACIL,IAAK,oBACLC,MAAO,oBACPS,YAAa,QACbE,QAASN,EACTK,aAAcL,EAAkB,GAAGJ,MACnCW,2BAA4B,CAAER,UAAW,yBAvBzCS,EADhB,EACIC,WACSC,EAFb,EAEIC,MAASD,SACTE,EAHJ,EAGIA,WA2BJC,EAAAA,EAAAA,YAAU,WACND,EAAU,WAAY,iBAAkBF,EAASI,WACjDF,EAAU,WAAY,qBAAsBF,EAASI,UAFhD,GAGN,CAACJ,EAASI,YAEb,IAAMC,EAAuD,MAA/BL,EAASV,kBACjCgB,EAAoD,MAA/BN,EAASV,kBAC9Bc,EAAuBG,EAAAA,SAAc,WACvC,OAAOP,EAASI,UAAY,CAAEI,KAAMR,EAASS,cAAeC,QAAS,qBAAwB,IADpE,GAE1B,CAACV,EAASI,UAAWJ,EAASS,gBAEjC,OACIF,EAAAA,cAACI,EAAAA,EAAD,CACIC,SAAU/B,EACVgC,QACIN,EAAAA,cAAAA,MAAAA,CAAKlB,UAAU,SACXkB,EAAAA,cAACO,EAAAA,EAAD,CAAmBN,KAAMF,EAAYF,aAAH,EAAGA,EAAWI,KAAO,KAAME,QAASJ,EAAYF,aAAH,EAAGA,EAAWM,QAAU,MACnGH,EAAAA,cAACQ,EAAAA,EAAD,CAAUC,OAAQhB,EAASgB,OAAQZ,UAAWC,EAAeD,EAAY,MAAzE,QAEIG,EAAAA,cAAAA,IAAAA,CAAGlB,UAAU,kBAAb,0BAEJkB,EAAAA,cAACQ,EAAAA,EAAD,CAAUC,OAAQhB,EAASgB,QAA3B,YAIZC,KAzES,kCA0ETjB,SAAUF,IACVoB,KACIX,EAAAA,cAAAA,EAAAA,SAAAA,KACIA,EAAAA,cAAAA,KAAAA,KAAAA,+BACAA,EAAAA,cAAAA,IAAAA,KAAAA,yGAC0GA,EAAAA,cAAAA,OAAAA,KAAAA,KAD1G,uDAIAA,EAAAA,cAACY,EAAAA,EAAD,CAAa9B,UAAU,OAAO+B,SAAS,OAjFf,+GAgB5C,C,+BCzBA,ojD","sources":["webpack://react-components-docs/./src/pages/docs/checkbox.tsx","webpack://react-components-docs/../lib/src/Checkbox/Checkbox.tsx?bab3"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport Docs from \"@common/Docs\";\nimport { Checkbox } from \"@sebgroup/react-components/Checkbox/Checkbox\";\nimport { DynamicFormOption, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { FeedbackIndicator, Indicator, IndicatorType } from \"@sebgroup/react-components/FeedbackIndicator\";\nimport { CodeSnippet } from \"@common/CodeSnippet\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Checkbox/Checkbox\");\nconst code: string = `<Checkbox>Label here</Checkbox>`;\nconst checkboxWithDescriptionCode: string = `<Checkbox>\n    Your label here\n    <p className=\"text-muted m-0\">Explain yourself here</p>\n</Checkbox>`;\n\nconst indicators: Array<DynamicFormOption<IndicatorType>> = [\n    { key: \"error\", label: \"danger\", value: \"danger\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"success\", label: \"success\", value: \"success\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"warning\", label: \"warning\", value: \"warning\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\n\nconst indicatorGrouping: Array<DynamicFormOption> = [\n    { key: \"individual\", label: \"Individual\", value: \"1\", description: \"Pass an indicator to individual checkboxes\" },\n    { key: \"grouped\", label: \"Grouped\", value: \"2\", description: \"Wrap a group of checkboxes with a FeedbackIndicator\" },\n];\n\nconst CheckboxPage: React.FC = (): React.ReactElement<void> => {\n    const {\n        renderForm: renderControls,\n        state: { controls },\n        setHidden,\n    }: any = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"inline\", label: \"inline\", controlType: \"Checkbox\", initialValue: false },\n                { key: \"indicator\", label: \"indicator\", controlType: \"Checkbox\", initialValue: false },\n                {\n                    key: \"indicatorType\",\n                    label: \"Indicator type\",\n                    options: indicators,\n                    controlType: \"Radio\",\n                    initialValue: indicators[0].value,\n                    formElementAdditionalProps: { className: \"indent pl-3 pt-2\" },\n                },\n                {\n                    key: \"indicatorGrouping\",\n                    label: \"Indicator choices\",\n                    controlType: \"Radio\",\n                    options: indicatorGrouping,\n                    initialValue: indicatorGrouping[0].value,\n                    formElementAdditionalProps: { className: \"indent pl-3 pt-2\" },\n                },\n            ],\n        },\n    ]);\n\n    useEffect(() => {\n        setHidden(\"controls\", \"indicatorType\", !controls.indicator);\n        setHidden(\"controls\", \"indicatorGrouping\", !controls.indicator);\n    }, [controls.indicator]);\n\n    const isIndividual: boolean = controls.indicatorGrouping === \"1\";\n    const isGrouped: boolean = controls.indicatorGrouping === \"2\";\n    const indicator: Indicator = React.useMemo(() => {\n        return controls.indicator ? { type: controls.indicatorType, message: \"Indicator message\" } : null;\n    }, [controls.indicator, controls.indicatorType]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100\">\n                    <FeedbackIndicator type={isGrouped ? indicator?.type : null} message={isGrouped ? indicator?.message : null}>\n                        <Checkbox inline={controls.inline} indicator={isIndividual ? indicator : null}>\n                            First\n                            <p className=\"text-muted m-0\">Express yourself here</p>\n                        </Checkbox>\n                        <Checkbox inline={controls.inline}>Second</Checkbox>\n                    </FeedbackIndicator>\n                </div>\n            }\n            code={code}\n            controls={renderControls()}\n            note={\n                <>\n                    <h4>Checkboxes with description</h4>\n                    <p>\n                        Checkboxes can sometimes be rendered with a description, in order to do that, you can simply render a <code>p</code> tag as children. It will look something like this:\n                    </p>\n\n                    <CodeSnippet className=\"card\" language=\"jsx\">\n                        {checkboxWithDescriptionCode}\n                    </CodeSnippet>\n                </>\n            }\n        />\n    );\n};\n\nexport default CheckboxPage;\n","export default \"import React from \\\"react\\\";\\nimport { randomId } from \\\"@sebgroup/frontend-tools/randomId\\\";\\nimport classnames from \\\"classnames\\\";\\nimport { FeedbackIndicator, Indicator } from \\\"../FeedbackIndicator/FeedbackIndicator\\\";\\nimport \\\"./checkbox.scss\\\";\\n\\nexport type CheckboxProps = JSX.IntrinsicElements[\\\"input\\\"] & {\\n    /** Displays the checkbox inline */\\n    inline?: boolean;\\n    /** Div wrapper props */\\n    wrapperProps?: JSX.IntrinsicElements[\\\"div\\\"];\\n    /** Indicator for error, warning or success */\\n    indicator?: Indicator;\\n};\\n\\nexport const Checkbox: React.FC<CheckboxProps> = React.forwardRef(({ inline, wrapperProps, indicator, children, ...props }: CheckboxProps, ref: React.ForwardedRef<HTMLInputElement>) => {\\n    const [id, setId] = React.useState<string>(props.id);\\n\\n    React.useEffect(() => setId(props.id || (children ? props.id || randomId(\\\"checkbox-\\\") : null)), [props.id, children]);\\n\\n    return (\\n        <FeedbackIndicator {...indicator}>\\n            <div {...wrapperProps} className={classnames(\\\"rc\\\", \\\"checkbox\\\", { inline }, wrapperProps?.className)}>\\n                <div className={classnames(\\\"custom-control\\\", \\\"custom-checkbox\\\", { \\\"custom-control-inline\\\": inline })}>\\n                    <input {...props} type=\\\"checkbox\\\" id={id} className={classnames(\\\"custom-control-input\\\", props.className)} ref={ref} />\\n                    <label htmlFor={id} className=\\\"custom-control-label\\\">\\n                        {children}\\n                    </label>\\n                </div>\\n            </div>\\n        </FeedbackIndicator>\\n    );\\n});\\n\";"],"names":["importString","require","indicators","key","label","value","additionalProps","wrapperProps","className","indicatorGrouping","description","useDynamicForm","items","controlType","initialValue","options","formElementAdditionalProps","renderControls","renderForm","controls","state","setHidden","useEffect","indicator","isIndividual","isGrouped","React","type","indicatorType","message","Docs","mainFile","example","FeedbackIndicator","Checkbox","inline","code","note","CodeSnippet","language"],"sourceRoot":""}