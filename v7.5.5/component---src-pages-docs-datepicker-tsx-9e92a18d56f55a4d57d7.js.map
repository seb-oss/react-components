{"version":3,"file":"component---src-pages-docs-datepicker-tsx-9e92a18d56f55a4d57d7.js","mappings":"oMAKMA,EAAuBC,EAAQ,OAsErC,SAASC,EAAYC,GACjB,UAAUA,GAAKA,aAAaC,OAASC,MAAMF,EAAEG,WAChD,CAED,UAvEiC,WAC7B,MAAsCC,EAAAA,SAAqB,IAAIH,MAAxDI,EAAP,KAAoBC,EAApB,KAEA,GAIIC,EAAAA,EAAAA,GAAe,CACf,CACIC,IAAK,WACLC,MAAO,CACH,CACID,IAAK,MACLE,MAAO,YACPC,YAAa,uBACbC,YAAa,cAEjB,CACIJ,IAAK,MACLE,MAAO,YACPC,YAAa,uBACbC,YAAa,cAEjB,CAAEJ,IAAK,cAAeE,MAAO,eAAgBC,YAAa,8BAA+BC,YAAa,YACtG,CAAEJ,IAAK,cAAeE,MAAO,qBAAsBC,YAAa,wFAAyFC,YAAa,YACtK,CACIJ,IAAK,aACLE,MAAO,eACPC,YAAa,kEACbC,YAAa,OACbC,gBAAiB,MACjBC,gBAAiB,CAAEC,UAAW,yBA3B9BC,EADhB,EACIC,WACSC,EAFb,EAEIC,MAASD,SACTE,EAHJ,EAGIA,UAmCJ,OAJAC,EAAAA,EAAAA,YAAU,WACND,EAAU,WAAY,cAAeF,EAASI,YADzC,GAEN,CAACJ,EAASI,YAAaF,IAGtBhB,EAAAA,cAACmB,EAAAA,EAAD,CACIC,SAAU3B,EACV4B,QACIrB,EAAAA,cAAAA,MAAAA,CAAKW,UAAU,SACXX,EAAAA,cAAAA,QAAAA,CAAOsB,GAAG,cAAV,kBACAtB,EAAAA,cAACuB,EAAAA,EAAD,CACIC,MAAOvB,EACPwB,SAAUvB,EACVwB,IAAK/B,EAAYmB,EAASY,KAAgBZ,EAASY,SAAeC,EAClEC,IAAKjC,EAAYmB,EAASc,KAAgBd,EAASc,SAAeD,EAClEE,cAAef,EAASe,YACxBX,cAAeJ,EAASI,YACxBY,WAAYhB,EAASgB,WACrBC,aAAc,CACV,kBAAmB,iBAKnCC,KA/DC,2DAgEDlB,SAAUF,KA9DtB,C,+BCRA,u4oB","sources":["webpack://react-components-docs/./src/pages/docs/datepicker.tsx","webpack://react-components-docs/../lib/src/Datepicker/Datepicker.tsx?ad1a"],"sourcesContent":["import Docs from \"@common/Docs\";\nimport { Datepicker } from \"@sebgroup/react-components/Datepicker\";\nimport { useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport React, { useEffect } from \"react\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Datepicker/Datepicker\");\nconst code = `<Datepicker value={dateValue} onChange={setDateValue} />`;\n\nconst DatepickerPage: React.FC = () => {\n    const [exampleDate, setExampleDate] = React.useState<Date>(new Date());\n\n    const {\n        renderForm: renderControls,\n        state: { controls },\n        setHidden,\n    } = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                {\n                    key: \"min\",\n                    label: \"Min date:\",\n                    description: \"Set the minimum date\",\n                    controlType: \"Datepicker\",\n                },\n                {\n                    key: \"max\",\n                    label: \"Max date:\",\n                    description: \"Set the maximum date\",\n                    controlType: \"Datepicker\",\n                },\n                { key: \"monthPicker\", label: \"Month picker\", description: \"Switch to month picker only\", controlType: \"Checkbox\" },\n                { key: \"forceCustom\", label: \"Custom date picker\", description: \"This picker is the automatic fallback on browsers that don't support html5 datepicker\", controlType: \"Checkbox\" },\n                {\n                    key: \"localeCode\",\n                    label: \"Locale code:\",\n                    description: \"Set a locale for the custom picker (defaults to system locale).\",\n                    controlType: \"Text\",\n                    wrappingElement: \"div\",\n                    additionalProps: { className: \"indent pl-3 pt-2\" },\n                },\n            ],\n        },\n    ]);\n\n    useEffect(() => {\n        setHidden(\"controls\", \"localeCode\", !controls.forceCustom);\n    }, [controls.forceCustom, setHidden]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100\">\n                    <label id=\"chooseDate\">Choose a date:</label>\n                    <Datepicker\n                        value={exampleDate}\n                        onChange={setExampleDate}\n                        min={isValidDate(controls.min as Date) ? (controls.min as Date) : undefined}\n                        max={isValidDate(controls.max as Date) ? (controls.max as Date) : undefined}\n                        monthPicker={!!controls.monthPicker}\n                        forceCustom={!!controls.forceCustom}\n                        localeCode={controls.localeCode as string}\n                        wrapperProps={{\n                            \"aria-labelledby\": \"chooseDate\",\n                        }}\n                    />\n                </div>\n            }\n            code={code}\n            controls={renderControls()}\n        />\n    );\n};\n\nfunction isValidDate(d: Date): boolean {\n    return !!(d && d instanceof Date && !isNaN(d.getTime()));\n}\n\nexport default DatepickerPage;\n","export default \"import { isDateAfter, isSameDate } from \\\"@sebgroup/frontend-tools\\\";\\nimport { isDateBefore } from \\\"@sebgroup/frontend-tools/isDateBefore\\\";\\nimport { randomId } from \\\"@sebgroup/frontend-tools/randomId\\\";\\nimport classnames from \\\"classnames\\\";\\nimport React from \\\"react\\\";\\nimport \\\"./datepicker.scss\\\";\\n\\ninterface OverriddenNativeProps extends React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> {\\n    value: any;\\n    min?: any;\\n    max?: any;\\n    onChange: any;\\n}\\n\\nexport interface DatepickerProps extends OverriddenNativeProps {\\n    /** the value of the datepicker as a Date object */\\n    value: Date;\\n    /** On Change handler with the latest Date value */\\n    onChange: (value: Date) => void;\\n    /** Property sets whether a datepicker is a month picker  */\\n    monthPicker?: boolean;\\n    /** Property sets whether SEB styled datepicker will be rendered despite the browser used */\\n    forceCustom?: boolean;\\n    /** Minimum range of date that can be selected */\\n    min?: Date;\\n    /** Maximum range of date that can be selected */\\n    max?: Date;\\n    /** Locale of datepicker */\\n    localeCode?: string;\\n    /** Div wrapper props. NOTE: customPicker ONLY! */\\n    wrapperProps?: JSX.IntrinsicElements[\\\"div\\\"];\\n    /** Props for the select element of month picker. NOTE: customPicker ONLY! */\\n    customPickerSelectProps?: JSX.IntrinsicElements[\\\"select\\\"];\\n}\\n\\ninterface UnitNames {\\n    month: string;\\n    day: string;\\n    year: string;\\n}\\n\\ntype InputRenderType = \\\"custom\\\" | \\\"date\\\" | \\\"month\\\";\\n\\nconst CURRENT_YEAR: number = new Date().getFullYear();\\nconst MAX_DAY = 31;\\nconst MIN_DAY = 1;\\nconst MAX_YEAR: number = CURRENT_YEAR + 200;\\nconst MIN_YEAR: number = CURRENT_YEAR - 200;\\nconst PAGE_STEP = 5;\\nconst UNIT_NAMES: UnitNames = {\\n    month: \\\"Month\\\",\\n    day: \\\"Day\\\",\\n    year: \\\"Year\\\",\\n};\\n\\nexport const Datepicker: React.FunctionComponent<DatepickerProps> = React.forwardRef(\\n    (\\n        { monthPicker, forceCustom, className, value, min, max, disabled, onChange, localeCode = \\\"en\\\", wrapperProps, customPickerSelectProps, ...props }: DatepickerProps,\\n        ref: React.ForwardedRef<HTMLInputElement>\\n    ): React.ReactElement<void> => {\\n        const customPickerOrder = React.useMemo(() => {\\n            const date: Date = new Date(2012, 0, 5);\\n            const locale: Intl.DateTimeFormat = getLocaleOrDefault(localeCode);\\n            const rtf: Intl.RelativeTimeFormat | null = getRelativeTimeFormat(localeCode);\\n            const order: Intl.RelativeTimeFormatUnit[] = [\\\"day\\\", \\\"month\\\", \\\"year\\\"];\\n            const localeDateString: string = locale.format(date);\\n            order.sort((a, b) => {\\n                const positions: { day: number; month: number; year: number } = {\\n                    day: localeDateString?.search(/5/g) || 0,\\n                    month: localeDateString?.search(/1/g) || 1,\\n                    year: localeDateString?.search(/2012/g) || 2,\\n                };\\n                return positions[a] - positions[b];\\n            });\\n            order.forEach((unit) => {\\n                UNIT_NAMES[unit] =\\n                    rtf\\n                        ?.formatToParts(1, unit)\\n                        ?.filter((x) => x.type === \\\"literal\\\")[1]\\n                        ?.value?.trim() || unit;\\n            });\\n            return order;\\n        }, [localeCode]);\\n        const monthNames: string[] = React.useMemo(() => {\\n            const date: Date = new Date(2012, 0, 5);\\n            const locale: Intl.DateTimeFormat = getLocaleMonthNames(localeCode);\\n            const names: string[] = [UNIT_NAMES.month];\\n            [...Array(12)].forEach((_, i) => {\\n                date.setMonth(i);\\n                names.push(locale.format(date));\\n            });\\n            return names;\\n        }, [localeCode]);\\n        const maxYearRange: number = React.useMemo(() => max?.getFullYear() || MAX_YEAR, [max]);\\n        const minYearRange: number = React.useMemo(() => min?.getFullYear() || MIN_YEAR, [min]);\\n        const renderType: InputRenderType = React.useMemo(() => {\\n            if (forceCustom) {\\n                return \\\"custom\\\";\\n            }\\n\\n            if (monthPicker && supportsInputOfType(\\\"month\\\")) {\\n                return \\\"month\\\";\\n            }\\n\\n            if (supportsInputOfType(\\\"date\\\")) {\\n                return \\\"date\\\";\\n            }\\n\\n            return \\\"custom\\\";\\n        }, [forceCustom, monthPicker]);\\n        const [customDay, setCustomDay] = React.useState<number>(getCustomDateValue(value?.getDate?.(), monthPicker));\\n        const [customMonth, setCustomMonth] = React.useState<number>(getCustomDateValue(value?.getMonth?.() + 1, monthPicker));\\n        const [customYear, setCustomYear] = React.useState<number>(getCustomDateValue(value?.getFullYear?.(), monthPicker));\\n\\n        const onCustomDatepickerChange = React.useCallback(\\n            (day: number, month: number, year: number) => {\\n                day = monthPicker ? 1 : day;\\n                const dateString = formatDate(year, month, day);\\n                const date: Date = new Date(dateString);\\n                onChange(date);\\n            },\\n            [onChange, monthPicker]\\n        );\\n\\n        const changeCustomDay = React.useCallback(\\n            (day: number) => {\\n                onCustomDatepickerChange(day, customMonth, customYear);\\n                setCustomDay(day);\\n            },\\n            [customMonth, customYear, onCustomDatepickerChange]\\n        );\\n\\n        const changeCustomMonth = React.useCallback(\\n            (month: number) => {\\n                onCustomDatepickerChange(customDay, month, customYear);\\n                setCustomMonth(month);\\n            },\\n            [customDay, customYear, onCustomDatepickerChange]\\n        );\\n\\n        const changeCustomYear = React.useCallback(\\n            (year: number) => {\\n                onCustomDatepickerChange(customDay, customMonth, year);\\n                setCustomYear(year);\\n            },\\n            [customDay, customMonth, onCustomDatepickerChange]\\n        );\\n\\n        const handleChangeCustomDay = React.useCallback(\\n            (e: React.ChangeEvent<HTMLInputElement>): void => {\\n                const day: number = getEventValue(e);\\n                changeCustomDay(day);\\n            },\\n            [changeCustomDay]\\n        );\\n\\n        const handleChangeCustomMonth = React.useCallback(\\n            (e: React.ChangeEvent<HTMLSelectElement>): void => {\\n                const month: number = getEventValue(e);\\n                changeCustomMonth(month);\\n            },\\n            [changeCustomMonth]\\n        );\\n\\n        const handleChangeCustomYear = React.useCallback(\\n            (e: React.ChangeEvent<HTMLInputElement>): void => {\\n                const year: number = getEventValue(e);\\n                changeCustomYear(year);\\n            },\\n            [changeCustomYear]\\n        );\\n\\n        const handleKeyDownCustomDay = React.useCallback(\\n            (e: React.KeyboardEvent<HTMLInputElement>) => {\\n                if (!hasModifierKey(e)) {\\n                    let newCustomDay: number = null;\\n\\n                    switch (e.key) {\\n                        case \\\"ArrowDown\\\":\\n                            newCustomDay = customDay - 1;\\n                            break;\\n                        case \\\"ArrowUp\\\":\\n                            newCustomDay = customDay + 1;\\n                            break;\\n                        case \\\"PageDown\\\":\\n                            newCustomDay = customDay - PAGE_STEP;\\n                            break;\\n                        case \\\"PageUp\\\":\\n                            newCustomDay = customDay + PAGE_STEP;\\n                            break;\\n                        case \\\"Home\\\":\\n                            newCustomDay = MIN_DAY;\\n                            break;\\n                        case \\\"End\\\":\\n                            newCustomDay = MAX_DAY;\\n                            break;\\n                    }\\n\\n                    if (newCustomDay !== null) {\\n                        e.preventDefault();\\n                        /**\\n                         * Sanitize the custom day value. If the value is larger than the maximum day of 31,\\n                         * it will be reduced down to the remainder of <custom day % 31> (32 % 31 = 1); if\\n                         * the value is lesser than the minimum day of 1, it will be increment up to the\\n                         * product of <custom day + 31> (-1 + 31 = 30). This handling ensures that the custom\\n                         * day value will always be in the range of the maximum and minimum day allowed.\\n                         */\\n                        const sanitizedDay: number = newCustomDay > MAX_DAY ? newCustomDay % MAX_DAY : newCustomDay < MIN_DAY ? newCustomDay + MAX_DAY : newCustomDay;\\n                        changeCustomDay(sanitizedDay);\\n                    }\\n                }\\n            },\\n            [customDay, changeCustomDay]\\n        );\\n\\n        const handleKeyDownCustomYear = React.useCallback(\\n            (e: React.KeyboardEvent<HTMLInputElement>) => {\\n                if (!hasModifierKey(e)) {\\n                    let newCustomYear: number = null;\\n\\n                    switch (e.key) {\\n                        case \\\"ArrowDown\\\":\\n                            newCustomYear = customYear - 1;\\n                            break;\\n                        case \\\"ArrowUp\\\":\\n                            newCustomYear = customYear + 1;\\n                            break;\\n                        case \\\"PageDown\\\":\\n                            newCustomYear = customYear - PAGE_STEP;\\n                            break;\\n                        case \\\"PageUp\\\":\\n                            newCustomYear = customYear + PAGE_STEP;\\n                            break;\\n                        case \\\"Home\\\":\\n                            newCustomYear = minYearRange;\\n                            break;\\n                        case \\\"End\\\":\\n                            newCustomYear = maxYearRange;\\n                            break;\\n                    }\\n\\n                    if (newCustomYear !== null) {\\n                        e.preventDefault();\\n                        /**\\n                         * Sanitize the custom year value so that they are within the max and min year range.\\n                         */\\n                        const sanitizedYear: number = newCustomYear > maxYearRange ? maxYearRange : newCustomYear < minYearRange ? minYearRange : newCustomYear;\\n                        changeCustomYear(sanitizedYear);\\n                    }\\n                }\\n            },\\n            [customYear, maxYearRange, minYearRange, changeCustomYear]\\n        );\\n\\n        const handleOnChange = React.useCallback(\\n            (e: React.ChangeEvent<HTMLInputElement>): void => {\\n                const { value: newValue } = e.target;\\n                const newDate: Date = new Date(newValue);\\n                onChange(newDate);\\n            },\\n            [onChange]\\n        );\\n\\n        const handleOnBlur = React.useCallback(\\n            (e: React.ChangeEvent<HTMLInputElement> | React.FocusEvent<HTMLInputElement>): void => {\\n                const { value: newValue } = e.target;\\n                const newDate: Date = new Date(newValue);\\n\\n                if (!isDateInRange(newDate, min, max)) {\\n                    onChange(null);\\n                }\\n            },\\n            [max, min, onChange]\\n        );\\n\\n        const renderCustomDatepicker = (value: Date, monthPicker: boolean, customPickerOrder: string[], unitNames: UnitNames, disabled: boolean, monthNames: string[]) => {\\n            const order: string[] = monthPicker ? [...customPickerOrder.filter((x: string) => x !== \\\"day\\\")] : customPickerOrder;\\n            const dateValueLabel: string = randomId(\\\"seb-datepicker-custom-value-\\\");\\n            return (\\n                <div\\n                    {...wrapperProps}\\n                    ref={ref}\\n                    className={classnames(\\\"input-group\\\", \\\"seb-datepicker-custom\\\", wrapperProps?.className)}\\n                    role=\\\"group\\\"\\n                    aria-labelledby={`${wrapperProps?.[\\\"aria-labelledby\\\"] ? `${wrapperProps?.[\\\"aria-labelledby\\\"]} ` : \\\"\\\"}${dateValueLabel}`}\\n                >\\n                    <div id={dateValueLabel} className=\\\"sr-only\\\">\\n                        {monthPicker ? \\\"\\\" : `${customDay} `}\\n                        {monthNames[customMonth]}, {customYear}\\n                    </div>\\n                    {order?.map((unit: string, unitIndex: number) => {\\n                        switch (unit) {\\n                            case \\\"day\\\":\\n                                return (\\n                                    <input\\n                                        {...props}\\n                                        key={unitIndex}\\n                                        className={classnames(\\\"form-control\\\", \\\"seb-datepicker-custom-day\\\", className)}\\n                                        type=\\\"number\\\"\\n                                        min={MIN_DAY}\\n                                        max={MAX_DAY}\\n                                        placeholder={unitNames.day}\\n                                        disabled={disabled}\\n                                        value={customDay || \\\"\\\"}\\n                                        onChange={handleChangeCustomDay}\\n                                        onKeyDown={handleKeyDownCustomDay}\\n                                    />\\n                                );\\n\\n                            case \\\"month\\\":\\n                                return (\\n                                    <select\\n                                        {...customPickerSelectProps}\\n                                        key={unitIndex}\\n                                        className={classnames(\\n                                            \\\"custom-select\\\",\\n                                            \\\"seb-datepicker-custom-month\\\",\\n                                            { \\\"rounded-left\\\": unitIndex === 0 },\\n                                            { \\\"rounded-right\\\": unitIndex === customPickerOrder.length - 1 },\\n                                            customPickerSelectProps?.className\\n                                        )}\\n                                        value={customMonth || \\\"\\\"}\\n                                        disabled={disabled}\\n                                        onChange={handleChangeCustomMonth}\\n                                    >\\n                                        {monthNames.map((month: string, i: number) => {\\n                                            return (\\n                                                <option key={i} disabled={disabled || i === 0} value={i}>\\n                                                    {month}\\n                                                </option>\\n                                            );\\n                                        })}\\n                                    </select>\\n                                );\\n\\n                            case \\\"year\\\":\\n                                return (\\n                                    <input\\n                                        {...props}\\n                                        key={unitIndex}\\n                                        className={classnames(\\\"form-control\\\", \\\"seb-datepicker-custom-year\\\", className)}\\n                                        type=\\\"number\\\"\\n                                        min=\\\"1\\\"\\n                                        placeholder={unitNames.year}\\n                                        disabled={disabled}\\n                                        value={customYear || \\\"\\\"}\\n                                        onChange={handleChangeCustomYear}\\n                                        onKeyDown={handleKeyDownCustomYear}\\n                                    />\\n                                );\\n                            default:\\n                                break;\\n                        }\\n                    })}\\n                </div>\\n            );\\n        };\\n\\n        if (renderType === \\\"month\\\") {\\n            return (\\n                <input\\n                    {...props}\\n                    ref={ref}\\n                    type=\\\"month\\\"\\n                    className={classnames(\\\"form-control\\\", \\\"seb-datepicker-native\\\", className)}\\n                    min={getDateString(min, monthPicker)}\\n                    max={getDateString(max, monthPicker)}\\n                    value={getDateString(value, monthPicker)}\\n                    disabled={disabled}\\n                    onChange={handleOnChange}\\n                    onBlur={handleOnBlur}\\n                />\\n            );\\n        }\\n\\n        if (renderType === \\\"date\\\") {\\n            return (\\n                <input\\n                    {...props}\\n                    ref={ref}\\n                    type=\\\"date\\\"\\n                    className={classnames(\\\"form-control\\\", \\\"seb-datepicker-native\\\", className)}\\n                    min={getDateString(min, monthPicker)}\\n                    max={getDateString(max, monthPicker)}\\n                    value={getDateString(value, monthPicker)}\\n                    disabled={disabled}\\n                    onChange={handleOnChange}\\n                    onBlur={handleOnBlur}\\n                />\\n            );\\n        }\\n\\n        return renderCustomDatepicker(value, monthPicker, customPickerOrder, UNIT_NAMES, disabled, monthNames);\\n    }\\n);\\n\\nfunction formatDate(year: number, month: number, day: number): string {\\n    const formattedYear = year.toString().padStart(4, \\\"0\\\");\\n    const formattedMonth = month.toString().padStart(2, \\\"0\\\");\\n    const formattedDay = day.toString().padStart(2, \\\"0\\\");\\n    return `${formattedYear}-${formattedMonth}-${formattedDay}`;\\n}\\n\\nfunction getCustomDateValue(value: number, monthPicker: boolean) {\\n    if (monthPicker) {\\n        return 1;\\n    }\\n\\n    if (isNaN(value)) {\\n        return undefined;\\n    }\\n\\n    return value;\\n}\\n\\nfunction getDateString(d: Date, monthPicker: boolean): string {\\n    if (isValidDate(d)) {\\n        const dateString = formatDate(d.getFullYear(), d.getMonth() + 1, d.getDate());\\n        return dateString.substring(0, monthPicker ? 7 : 10) || \\\"\\\";\\n    }\\n\\n    return \\\"\\\";\\n}\\n\\nfunction getEventValue(e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) {\\n    const value = Number(e.target?.value);\\n    return Number.isNaN(value) ? null : value;\\n}\\n\\nfunction getLocaleOrDefault(localeCode: string): Intl.DateTimeFormat {\\n    try {\\n        return new Intl.DateTimeFormat(localeCode);\\n    } catch (error) {\\n        console.warn(`Locale with code: ${localeCode} was not recognised. Using locale 'en' instead.`);\\n        return new Intl.DateTimeFormat(\\\"en\\\");\\n    }\\n}\\n\\nfunction getLocaleMonthNames(localeCode: string): Intl.DateTimeFormat {\\n    try {\\n        return new Intl.DateTimeFormat(localeCode, { month: \\\"long\\\" });\\n    } catch (error) {\\n        console.warn(`Locale with code: ${localeCode} was not recognised. Using locale 'en' instead.`);\\n        return new Intl.DateTimeFormat(\\\"en\\\", { month: \\\"long\\\" });\\n    }\\n}\\n\\nfunction getRelativeTimeFormat(code: string): Intl.RelativeTimeFormat | null {\\n    try {\\n        return new Intl.RelativeTimeFormat(code);\\n    } catch (error) {\\n        console.warn(`Relative time format with code: ${code} was not recognised.`);\\n        return null;\\n    }\\n}\\n\\n/**\\n * Detect if a modifier key is pressed along with the current key event.\\n *\\n * @param {object} event - Keyboard event\\n * @returns true if key pressed is combined with modifier key, false otherwise\\n */\\nfunction hasModifierKey({ altKey, ctrlKey, metaKey, shiftKey }: React.KeyboardEvent) {\\n    return altKey || ctrlKey || metaKey || shiftKey;\\n}\\n\\nfunction isDateInRange(d: Date, min: Date, max: Date): boolean {\\n    const isAfterMinDate = !min || isDateAfter(d, min) || isSameDate(d, min);\\n    const isBeforeMaxDate = !max || isDateBefore(d, max) || isSameDate(d, max);\\n    return isAfterMinDate && isBeforeMaxDate;\\n}\\n\\nfunction isValidDate(d: Date): boolean {\\n    return !!(d && d instanceof Date && !isNaN(d.getTime()));\\n}\\n\\nfunction supportsInputOfType(type: \\\"date\\\" | \\\"month\\\"): boolean {\\n    if (typeof document !== \\\"undefined\\\") {\\n        const input: HTMLInputElement = document.createElement(\\\"input\\\");\\n        input.setAttribute(\\\"type\\\", type);\\n        const notADateValue = \\\"not-a-date\\\";\\n        input.setAttribute(\\\"value\\\", notADateValue);\\n        return input.value !== notADateValue;\\n    }\\n\\n    return false;\\n}\\n\";"],"names":["importString","require","isValidDate","d","Date","isNaN","getTime","React","exampleDate","setExampleDate","useDynamicForm","key","items","label","description","controlType","wrappingElement","additionalProps","className","renderControls","renderForm","controls","state","setHidden","useEffect","forceCustom","Docs","mainFile","example","id","Datepicker","value","onChange","min","undefined","max","monthPicker","localeCode","wrapperProps","code"],"sourceRoot":""}