{"version":3,"file":"component---src-pages-docs-tooltip-tsx-b5ec35a09fdb3d1df350.js","mappings":"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","sources":["webpack://react-components-docs/../node_modules/@sebgroup/frontend-tools/isSameObject/index.js","webpack://react-components-docs/../lib/src/Tooltip/Overlay.tsx","webpack://react-components-docs/../lib/src/Tooltip/useOverlay.tsx","webpack://react-components-docs/../lib/src/Tooltip/Tooltip.tsx","webpack://react-components-docs/./src/pages/docs/tooltip.tsx","webpack://react-components-docs/../lib/src/Notification/Notification.tsx","webpack://react-components-docs/../lib/src/Tooltip/Tooltip.tsx?579f"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar isSameObject = require('./isSameObject.js');\n\nexports.isSameObject = isSameObject.isSameObject;","import React from \"react\";\nimport classnames from \"classnames\";\nimport { createPortal } from \"react-dom\";\nimport { ElementPosition, useOverlay } from \"./useOverlay\";\nimport \"./overlay.scss\";\n\nexport type OverlayProps = React.PropsWithChildren<{\n    disableAutoPosition?: boolean;\n    overlayReference: () => HTMLDivElement;\n    className?: string;\n    onBlur: (event: React.FocusEvent<HTMLDivElement>) => void;\n    show: boolean;\n    position?: ElementPosition;\n    ref?: React.Ref<HTMLDivElement>;\n}>;\n\n// This solution is meant to fix Gatsby build which complains that document doesn't exist in server-side rendering\nconst safeDocument: Document | null = typeof document !== \"undefined\" ? document : null;\n\nexport const Overlay: React.FC<OverlayProps> = React.forwardRef(({ disableAutoPosition, ...props }: OverlayProps, ref: React.RefObject<HTMLDivElement>) => {\n    const [overlayContentRef, setOverlayContentRef] = React.useState<HTMLDivElement>(null);\n    const { style, currentPosition } = useOverlay(props.overlayReference(), overlayContentRef, props.show, props.position, { disableAutoPosition });\n\n    const getOverlayContentRef = React.useCallback((node: HTMLDivElement) => {\n        if (node) {\n            setOverlayContentRef(node);\n        }\n    }, []);\n\n    const onContentBlur = (e: React.FocusEvent<HTMLDivElement>): void => {\n        const triggeredNode: Node = (e.relatedTarget as Node) || document.activeElement;\n        const isWithinTriggerNode: boolean = props.overlayReference().contains(triggeredNode);\n        if (props.show && !isWithinTriggerNode) {\n            // to check if blur event is triggered from reference element\n            props.onBlur(e);\n        } else if (isWithinTriggerNode) {\n            overlayContentRef.focus();\n        }\n    };\n\n    React.useImperativeHandle(ref, () => ({\n        ...ref.current,\n        focus: () => overlayContentRef?.focus(),\n        blur: () => overlayContentRef?.blur(),\n    }));\n\n    React.useEffect(() => {\n        !!overlayContentRef && overlayContentRef.focus();\n    }, [overlayContentRef]);\n\n    return safeDocument && props.show\n        ? createPortal(\n              <div\n                  className={classnames(\"overlay-container\", props.className, currentPosition || \"top\", { show: props.show && overlayContentRef })}\n                  ref={getOverlayContentRef}\n                  tabIndex={-1}\n                  onBlur={onContentBlur}\n                  aria-hidden={!props.show}\n                  style={style}\n              >\n                  {props.children}\n              </div>,\n              safeDocument.body\n          )\n        : null;\n});\n","import React from \"react\";\nimport { isSameObject } from \"@sebgroup/frontend-tools/isSameObject\";\n\nexport type ElementPosition = \"top\" | \"bottom\" | \"left\" | \"right\" | \"top-right\" | \"top-left\" | \"bottom-right\" | \"bottom-left\" | \"left-top\" | \"left-bottom\" | \"right-top\" | \"right-bottom\";\n\nexport type ElementPlacements = {\n    [key in ElementPosition]: Partial<DOMRect>;\n};\n\nexport type OverlayConfig = {\n    disableAutoPosition?: boolean;\n};\n\n// This solution is meant to fix Gatsby build which complains that document doesn't exist in server-side rendering\nfunction safeDOMRect(): Partial<DOMRect> {\n    return {\n        bottom: 0,\n        height: 0,\n        left: 0,\n        right: 0,\n        top: 0,\n        width: 0,\n        x: 0,\n        y: 0,\n    };\n}\n\nexport function useOverlay(reference: HTMLElement, overlayReference: HTMLElement, show: boolean, presetPosition: ElementPosition = \"top\", config: OverlayConfig = {}) {\n    const defaultPositionsList: Array<ElementPosition> = React.useMemo(\n        () => [\"top\", \"left\", \"right\", \"bottom\", \"bottom-left\", \"bottom-right\", \"left-bottom\", \"left-top\", \"right-bottom\", \"right-top\", \"top-left\", \"top-right\"],\n        []\n    );\n    const positionList: Array<ElementPosition> = React.useMemo(() => defaultPositionsList.filter((item: string) => item !== presetPosition), [presetPosition, defaultPositionsList]);\n    const [referenceRect, setReferenceRect] = React.useState<Partial<DOMRect>>(safeDOMRect());\n    const [overlayRect, setOverlayRect] = React.useState<Partial<DOMRect>>(safeDOMRect());\n    const [overlayStyle, setOverlayStyle] = React.useState<CSSStyleDeclaration>();\n    const [style, setStyle] = React.useState<React.CSSProperties>({});\n    const [currentPosition, setCurrentPosition] = React.useState<ElementPosition>(presetPosition);\n\n    const getBoundingClientRect = React.useCallback(() => {\n        return reference.getBoundingClientRect();\n    }, [reference]);\n\n    const debounce = React.useCallback((callback: () => void, delay: number) => {\n        let timer: NodeJS.Timeout;\n        return function () {\n            const self: any = this;\n            const args: IArguments = arguments;\n            clearTimeout(timer);\n            timer = setTimeout(() => callback.apply(self, args), delay);\n        };\n    }, []);\n\n    const updateRect = React.useCallback(() => {\n        const newRect: DOMRect = getBoundingClientRect();\n        if (!isSameObject(referenceRect, newRect)) {\n            setReferenceRect(newRect);\n        }\n    }, [getBoundingClientRect, referenceRect]);\n\n    const debouncedUpdateRect = React.useCallback(debounce(updateRect, 10), [debounce, updateRect]);\n\n    const parseMargin = (margin: string) => (margin ? parseInt(margin, 10) : 0);\n\n    /**\n     * check if element is overflow on certain position\n     * @param position position\n     */\n    const isOverflow = React.useCallback(\n        (currentPosition: Partial<DOMRect>) => {\n            const width: number = overlayRect?.width || 0;\n            const height: number = overlayRect?.height || 0;\n            return (\n                config.disableAutoPosition ||\n                !currentPosition ||\n                currentPosition.left < 0 ||\n                currentPosition.top < 0 ||\n                currentPosition.left + width > window.innerWidth ||\n                currentPosition.top + height > window.innerHeight\n            );\n        },\n        [overlayRect, config.disableAutoPosition]\n    );\n\n    const getTopStartingPoint = React.useCallback(() => referenceRect.top - overlayRect.height - parseMargin(overlayStyle?.marginBottom), [referenceRect, overlayRect, overlayStyle]);\n\n    const getBottomStartingPoint = React.useCallback(() => referenceRect.bottom + parseMargin(overlayStyle?.marginTop), [referenceRect, overlayStyle]);\n\n    const getSideTopStartingPoint = React.useCallback(() => referenceRect.bottom - referenceRect.height, [referenceRect, overlayRect]);\n\n    const getSideBottomStartingPoint = React.useCallback(() => referenceRect.bottom - overlayRect.height, [referenceRect, overlayRect]);\n\n    const getLeftStartingPoint = React.useCallback(() => referenceRect.left - overlayRect.width - parseMargin(overlayStyle?.marginRight), [referenceRect, overlayRect, overlayStyle]);\n\n    const getRightStartingPoint = React.useCallback(() => referenceRect.right + parseMargin(overlayStyle?.marginLeft), [referenceRect, overlayStyle]);\n\n    const getVerticalLeftStartingPoint = React.useCallback(() => referenceRect.right - overlayRect.width, [referenceRect, overlayRect]);\n\n    const getVerticalCenterStartingPoint = React.useCallback(() => referenceRect.bottom - overlayRect.height / 2 - referenceRect.height / 2, [referenceRect, overlayRect]);\n\n    const getHorizontalCenterStartingPoint = React.useCallback(() => referenceRect.left - overlayRect.width / 2 + referenceRect.width / 2, [referenceRect, overlayRect]);\n\n    const getPosition = React.useCallback(\n        (position: ElementPosition) => {\n            switch (position) {\n                case \"top-left\":\n                    return { top: getTopStartingPoint(), left: getVerticalLeftStartingPoint() };\n                case \"top-right\":\n                    return { top: getTopStartingPoint(), left: referenceRect.left };\n                case \"left\":\n                    return { top: getVerticalCenterStartingPoint(), left: getLeftStartingPoint() };\n                case \"left-top\":\n                    return { top: getSideTopStartingPoint(), left: getLeftStartingPoint() };\n                case \"left-bottom\":\n                    return { top: getSideBottomStartingPoint(), left: getLeftStartingPoint() };\n                case \"right\":\n                    return { top: getVerticalCenterStartingPoint(), left: getRightStartingPoint() };\n                case \"right-top\":\n                    return { top: getSideTopStartingPoint(), left: getRightStartingPoint() };\n                case \"right-bottom\":\n                    return { top: getSideBottomStartingPoint(), left: getRightStartingPoint() };\n                case \"bottom\":\n                    return { top: getBottomStartingPoint(), left: getHorizontalCenterStartingPoint() };\n                case \"bottom-left\":\n                    return { top: getBottomStartingPoint(), left: getVerticalLeftStartingPoint() };\n                case \"bottom-right\":\n                    return { top: getBottomStartingPoint(), left: referenceRect.left };\n                default:\n                    return { top: getTopStartingPoint(), left: getHorizontalCenterStartingPoint() };\n            }\n        },\n        [\n            referenceRect,\n            overlayRect,\n            getTopStartingPoint,\n            getBottomStartingPoint,\n            getRightStartingPoint,\n            getVerticalLeftStartingPoint,\n            getLeftStartingPoint,\n            getVerticalCenterStartingPoint,\n            getHorizontalCenterStartingPoint,\n            getSideBottomStartingPoint,\n            getSideTopStartingPoint,\n        ]\n    );\n\n    const getOverlayPosition = React.useCallback(() => {\n        setStyle(() => {\n            let currentNewPosition: ElementPosition = presetPosition;\n            let currentPositionStyle: Partial<DOMRect> = getPosition(presetPosition);\n            if (isOverflow(currentPositionStyle)) {\n                positionList.some((item: ElementPosition) => {\n                    const alternatePosition: Partial<DOMRect> = getPosition(item);\n                    const isWithinViewport: boolean = !isOverflow(alternatePosition);\n                    if (isWithinViewport) {\n                        currentPositionStyle = alternatePosition;\n                        currentNewPosition = item;\n                    }\n                    return isWithinViewport;\n                });\n            }\n            setCurrentPosition(currentNewPosition);\n            return currentPositionStyle;\n        });\n    }, [getPosition, isOverflow, overlayRect, positionList, presetPosition]);\n\n    React.useLayoutEffect(() => {\n        if (!reference) {\n            return;\n        }\n        if (show) {\n            updateRect();\n            window.addEventListener(\"scroll\", debouncedUpdateRect, true);\n            window.addEventListener(\"resize\", debouncedUpdateRect, true);\n        } else {\n            window.removeEventListener(\"scroll\", debouncedUpdateRect, true);\n            window.removeEventListener(\"resize\", debouncedUpdateRect, true);\n        }\n        return () => {\n            window.removeEventListener(\"scroll\", debouncedUpdateRect, true);\n            window.removeEventListener(\"resize\", debouncedUpdateRect, true);\n        };\n    }, [reference, show, updateRect, debouncedUpdateRect]);\n\n    React.useEffect(() => {\n        if (!!overlayReference) {\n            debouncedUpdateRect();\n            setOverlayRect(overlayReference.getBoundingClientRect());\n            setOverlayStyle(window.getComputedStyle(overlayReference));\n        }\n    }, [overlayReference, debouncedUpdateRect]);\n\n    React.useEffect(() => {\n        setCurrentPosition(presetPosition);\n    }, [presetPosition]);\n\n    React.useEffect(() => {\n        if (show) {\n            getOverlayPosition();\n        }\n    }, [getOverlayPosition, show]);\n\n    return {\n        style,\n        currentPosition,\n    };\n}\n","import { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport classnames from \"classnames\";\nimport React from \"react\";\nimport { Overlay } from \"./Overlay\";\nimport \"./tooltip.scss\";\nimport { ElementPosition } from \"./useOverlay\";\n\nconst InfoCircleIcon: JSX.Element = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n        <path d=\"M400 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zm16 400c0 8.822-7.178 16-16 16H48c-8.822 0-16-7.178-16-16V80c0-8.822 7.178-16 16-16h352c8.822 0 16 7.178 16 16v352zm-192-92c-15.464 0-28 12.536-28 28s12.536 28 28 28 28-12.536 28-28-12.536-28-28-28zm7.67-24h-16c-6.627 0-12-5.373-12-12v-.381c0-70.343 77.44-63.619 77.44-107.408 0-20.016-17.761-40.211-57.44-40.211-29.144 0-44.265 9.649-59.211 28.692-3.908 4.98-11.054 5.995-16.248 2.376l-13.134-9.15c-5.625-3.919-6.86-11.771-2.645-17.177C153.658 133.514 178.842 116 223.67 116c52.32 0 97.44 29.751 97.44 80.211 0 67.414-77.44 63.849-77.44 107.408V304c0 6.627-5.373 12-12 12z\" />\n    </svg>\n);\n\nexport type TooltipTrigger = \"hover\" | \"click\" | \"focus\";\nexport type TooltipTheme = \"default\" | \"light\" | \"primary\" | \"warning\" | \"success\" | \"danger\" | \"purple\";\nexport type TooltipPosition = ElementPosition;\n\nexport type TooltipProps = Omit<JSX.IntrinsicElements[\"div\"], \"ref\"> & {\n    /** Css style positions: top/bottom/left/right */\n    position?: TooltipPosition;\n    /** Based on SEB predefined colors */\n    theme?: TooltipTheme;\n    /** Tooltip content */\n    content?: string | React.ReactNode;\n    /** Tooltip trigger mode */\n    trigger?: TooltipTrigger;\n    /** Force tooltip to be at certain position */\n    disableAutoPosition?: boolean;\n    /** Force show tooltip */\n    forceShow?: boolean;\n    /** callback on tooltip visibility status change */\n    onVisibleChange?: (event: React.MouseEvent<HTMLDivElement> | React.FocusEvent<HTMLElement> | React.TouchEvent<HTMLDivElement>, visible: boolean) => void;\n    /** tooltip content wrapper props */\n    tooltipWrapperProps?: JSX.IntrinsicElements[\"div\"];\n};\n\n// This solution is meant to fix Gatsby build which complains that document and window doesn't exist in server-side rendering\nconst safeWindow: Window | null = typeof window !== \"undefined\" ? window : null;\n\nconst isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(safeWindow?.navigator?.userAgent);\n\nexport const Tooltip: React.FC<TooltipProps> = ({\n    className,\n    position,\n    theme,\n    content,\n    trigger = \"click\",\n    disableAutoPosition,\n    forceShow,\n    onVisibleChange,\n    tooltipWrapperProps,\n    id,\n    ...props\n}: TooltipProps) => {\n    const containerRef: React.RefObject<HTMLDivElement> = React.useRef();\n    const contentRef: React.RefObject<HTMLDivElement> = React.useRef();\n    const [tooltipId, setTooltipId] = React.useState<string>(id);\n    const [show, setShow] = React.useState<boolean>(false);\n\n    /**\n     * toggle tooltip\n     * @param toggle boolean\n     * @param e event triggering the changes\n     */\n    const onTooltipToggle = (e?: React.MouseEvent<HTMLDivElement> | React.FocusEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>, toggle?: boolean): void => {\n        const isVisible: boolean = toggle !== undefined ? toggle : !show;\n        setShow(isVisible);\n        onVisibleChange && onVisibleChange(e, isVisible);\n    };\n\n    const onTouch = (e: React.TouchEvent<HTMLDivElement>, toggleOn: boolean) => {\n        onTooltipToggle(e, toggleOn);\n    };\n\n    const onHover = (e: React.MouseEvent<HTMLDivElement>, toggleOn: boolean) => {\n        onTooltipToggle(e, toggleOn);\n    };\n\n    const onMouseEnterEvent = (e: React.MouseEvent<HTMLDivElement>) => onHover(e, true);\n    const onMouseLeaveEvent = (e: React.MouseEvent<HTMLDivElement>) => onHover(e, false);\n    const onTouchStartEvent = (e: React.TouchEvent<HTMLDivElement>) => onTouch(e, true);\n    const onTouchEndEvent = (e: React.TouchEvent<HTMLDivElement>) => onTouch(e, false);\n    const onFocusEvent = (e: React.FocusEvent<HTMLDivElement>) => onTooltipToggle(e, true);\n    const onBlurEvent = (e: React.FocusEvent<HTMLDivElement>) => onTooltipToggle(e, false);\n\n    React.useEffect(() => {\n        setTooltipId(id || randomId(\"rc-tooltip-\"));\n    }, [id]);\n\n    return (\n        <div {...props} className={classnames(\"tooltip-container\", className)} id={tooltipId}>\n            <div\n                ref={containerRef}\n                className={classnames(\"tooltip-reference\", { cursor: trigger === \"click\" })}\n                tabIndex={-1}\n                onClick={trigger === \"click\" ? onTooltipToggle : null}\n                onPointerOver={trigger === \"hover\" && !isMobile ? onMouseEnterEvent : null}\n                onPointerOut={trigger === \"hover\" && !isMobile ? onMouseLeaveEvent : null}\n                onTouchStart={trigger === \"hover\" && isMobile ? onTouchStartEvent : null}\n                onTouchEnd={trigger === \"hover\" && isMobile ? onTouchEndEvent : null}\n                onFocus={trigger === \"focus\" ? onFocusEvent : null}\n                onBlur={trigger === \"focus\" ? onBlurEvent : null}\n            >\n                {props.children ? (\n                    React.Children.count(props.children) === 1 ? (\n                        React.Children.map(props.children, (Child: React.ReactElement) => {\n                            return Object(Child) !== Child ? (\n                                <span className=\"text-help\" aria-describedby={tooltipId}>\n                                    {Child}\n                                </span>\n                            ) : (\n                                Child\n                            );\n                        })\n                    ) : (\n                        props.children\n                    )\n                ) : (\n                    <div className=\"default-content\" aria-describedby={tooltipId}>\n                        {InfoCircleIcon}\n                    </div>\n                )}\n            </div>\n            <TooltipContentContainer\n                {...tooltipWrapperProps}\n                position={position}\n                theme={theme}\n                content={content}\n                disableAutoPosition={disableAutoPosition}\n                ref={contentRef}\n                onContentBlur={(event: React.FocusEvent<HTMLDivElement>) => {\n                    setShow(false);\n                    onVisibleChange && onVisibleChange(event, false);\n                }}\n                show={show || forceShow}\n                tooltipReference={() => containerRef.current}\n            />\n        </div>\n    );\n};\n\ntype TooltipContentContainerProps = JSX.IntrinsicElements[\"div\"] &\n    Pick<TooltipProps, \"theme\" | \"position\" | \"content\" | \"disableAutoPosition\"> & {\n        show: boolean;\n        tooltipReference: () => HTMLDivElement;\n        onContentBlur: (event: React.FocusEvent<HTMLDivElement>) => void;\n    };\nconst TooltipContentContainer: React.FC<TooltipContentContainerProps> = React.forwardRef(\n    ({ show, tooltipReference, theme = \"default\", position, content, disableAutoPosition, onContentBlur, ...props }: TooltipContentContainerProps, forwardedRef: React.RefObject<HTMLDivElement>) => {\n        return (\n            <Overlay ref={forwardedRef} show={show} onBlur={onContentBlur} position={position} disableAutoPosition={disableAutoPosition} overlayReference={tooltipReference}>\n                <div className={classnames(`tooltip`, theme, { show: show }, props.className)} role=\"tooltip\" {...props}>\n                    <div className=\"tooltip-arrow\" />\n                    <div className=\"tooltip-inner\">{content}</div>\n                </div>\n            </Overlay>\n        );\n    }\n);\n","import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { CodeSnippet } from \"@common/CodeSnippet\";\nimport { Tooltip } from \"@sebgroup/react-components/Tooltip\";\nimport { Notification } from \"@sebgroup/react-components/Notification\";\nimport { DynamicFormOption, DynamicFormSection, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\n\nconst TooltipPage: React.FC = () => {\n    const importString: string = require(\"!raw-loader!@sebgroup/react-components/Tooltip/Tooltip\");\n    const [notificationToggle, setNotifcationToggle] = React.useState<boolean>(false);\n    const defaultPosition: DynamicFormOption = { label: \"Top\", value: \"top\", key: \"top\" };\n    const defaultTheme: DynamicFormOption = { label: \"Primary\", value: \"primary\", key: \"primary\" };\n    const defaultTriggerMethod: DynamicFormOption = { label: \"Click\", value: \"click\", key: \"click\" };\n    const defaultTooltipContent: string = \"Tooltip content could be long, therefore, controlling the position and width is important\";\n    const nodeTooltipContent: React.ReactNode = (\n        <div>\n            <h1>Tooltip Header</h1>\n            <div>tooltip content</div>\n        </div>\n    );\n    const checkboxControls: Array<DynamicFormOption> = [\n        { label: \"Callback on visibility change\", value: \"isVisibleChanged\", key: \"isVisibleChanged\" },\n        { label: \"Disable autoposition\", value: \"disableAutoPosition\", key: \"disableAutoPosition\" },\n        { label: \"Force show tooltip\", value: \"forceShow\", key: \"forceShow\" },\n        { label: \"Render node as tooltip content\", value: \"isCustomContent\", key: \"isCustomContent\" },\n        { label: \"Define custom tooltip reference\", value: \"isCustomReference\", key: \"isCustomReference\" },\n    ];\n    const fields: Array<DynamicFormSection> = [\n        {\n            key: \"controls\",\n            items: [\n                {\n                    key: \"position\",\n                    initialValue: defaultPosition.value,\n                    label: \"Position\",\n                    options: [\n                        { label: \"Top\", value: \"top\", key: \"top\" },\n                        { label: \"Top-left\", value: \"top-left\", key: \"top-left\" },\n                        { label: \"Top-right\", value: \"top-right\", key: \"top-right\" },\n                        { label: \"Right\", value: \"right\", key: \"right\" },\n                        { label: \"Right-top\", value: \"right-top\", key: \"right-top\" },\n                        { label: \"Right-bottom\", value: \"right-bottom\", key: \"right-bottom\" },\n                        { label: \"Bottom\", value: \"bottom\", key: \"bottom\" },\n                        { label: \"Bottom-left\", value: \"bottom-left\", key: \"bottom-left\" },\n                        { label: \"Bottom-right\", value: \"bottom-right\", key: \"bottom-right\" },\n                        { label: \"Left\", value: \"left\", key: \"left\" },\n                        { label: \"Left-top\", value: \"left-top\", key: \"left-top\" },\n                        { label: \"Left-bottom\", value: \"left-bottom\", key: \"left-bottom\" },\n                    ],\n                    controlType: \"Dropdown\",\n                },\n                {\n                    key: \"theme\",\n                    initialValue: defaultTheme.value,\n                    label: \"Theme\",\n                    options: [\n                        { label: \"Primary\", value: \"primary\", key: \"primary\" },\n                        { label: \"Danger\", value: \"danger\", key: \"danger\" },\n                        { label: \"Default\", value: \"default\", key: \"default\" },\n                        { label: \"Light\", value: \"light\", key: \"light\" },\n                        { label: \"Purple\", value: \"purple\", key: \"purple\" },\n                        { label: \"Success\", value: \"success\", key: \"success\" },\n                        { label: \"Warning\", value: \"warning\", key: \"warning\" },\n                    ],\n                    controlType: \"Dropdown\",\n                },\n                {\n                    key: \"trigger\",\n                    initialValue: defaultTriggerMethod.value,\n                    label: \"Trigger method\",\n                    options: [\n                        { label: \"Click\", value: \"click\", key: \"click\" },\n                        { label: \"Hover\", value: \"hover\", key: \"hover\" },\n                        { label: \"Focus\", value: \"focus\", key: \"focus\" },\n                    ],\n                    controlType: \"Dropdown\",\n                },\n                {\n                    label: \"Optional configurations\",\n                    key: \"checkboxes\",\n                    controlType: \"Option\",\n                    options: checkboxControls,\n                },\n            ],\n        },\n    ];\n    const {\n        renderForm,\n        state: { controls },\n    } = useDynamicForm(fields);\n    const code: string = `<Tooltip\n        content=\"Tooltip message could be long, therefore, controlling the position and width is important\"\n        position=\"right\"\n    />`;\n\n    /** check if key selected */\n    const checkSelectedKey = (key: string) => {\n        return (controls.checkboxes as string[])?.find((item: string) => item === key);\n    };\n\n    return (\n        <>\n            <Docs\n                mainFile={importString}\n                example={\n                    <Tooltip\n                        id=\"tooltip-id\"\n                        content={checkSelectedKey(\"isCustomContent\") ? nodeTooltipContent : defaultTooltipContent}\n                        position={(controls as any)?.position}\n                        theme={(controls as any)?.theme}\n                        trigger={(controls as any)?.trigger}\n                        disableAutoPosition={!!checkSelectedKey(\"disableAutoPosition\")}\n                        forceShow={!!checkSelectedKey(\"forceShow\")}\n                        onVisibleChange={checkSelectedKey(\"isVisibleChanged\") && (() => setNotifcationToggle(true))}\n                    >\n                        {checkSelectedKey(\"isCustomReference\") && (\n                            <abbr className=\"custom-tooltip text-help\" aria-describedby=\"tooltip-id\">\n                                This is custom tooltip reference\n                            </abbr>\n                        )}\n                    </Tooltip>\n                }\n                code={code}\n                note={\n                    <>\n                        <h4>To force show a tooltip</h4>\n                        <p>\n                            Developers are allowed to force show a tooltip by setting <code>forceShow</code> attribute. It will look something like this:\n                        </p>\n                        <CodeSnippet className=\"card\" language=\"jsx\">\n                            {`<Tooltip content=\"content\" forceShow>Reference</Tooltip>`}\n                        </CodeSnippet>\n                    </>\n                }\n                controls={renderForm()}\n            />\n            <Notification toggle={notificationToggle} type=\"slide\" dismissTimeout={3000} onDismiss={() => setNotifcationToggle(false)}>\n                <div>Tooltip visibility changed!</div>\n            </Notification>\n        </>\n    );\n};\n\nexport default TooltipPage;\n","import React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport classnames from \"classnames\";\nimport \"./notification.scss\";\n\ntype CommonProps = JSX.IntrinsicElements[\"div\"] & {\n    /** Automatic dismissal timeout in milliseconds (default: `5000`) */\n    dismissTimeout?: number;\n    /** Callback when notification is dismissed */\n    onDismiss?: (e: React.MouseEvent<HTMLButtonElement> | Event) => void;\n    /** Persist notification until dismissed (default: `false`) */\n    persist?: boolean;\n    /** Notification theme */\n    theme?: \"purple\" | \"primary\" | \"danger\" | \"success\" | \"warning\" | \"inverted\";\n    /** Property sets whether the notification is toggled */\n    toggle?: boolean;\n    /** content wrapper props */\n    contentWrapperProps?: JSX.IntrinsicElements[\"div\"];\n};\n\ninterface SlideNotification extends CommonProps {\n    /** Notification type: `slide` */\n    type?: \"slide\";\n    /** Notification position: `bottom-left` | `bottom-right` | `top-left` | `top-right` */\n    position?: \"bottom-left\" | \"bottom-right\" | \"top-left\" | \"top-right\";\n}\n\ninterface BarNotification extends CommonProps {\n    /** Notification type: `bar` */\n    type?: \"bar\";\n    /** Notification position: `top` | `bottom` */\n    position?: \"top\" | \"bottom\";\n}\n\nexport type NotificationProps = SlideNotification | BarNotification;\n\n// This solution is meant to fix Gatsby build which complains that document doesn't exist in server-side rendering\nconst safeDocument: Document | null = typeof document !== \"undefined\" ? document : null;\n\n/** An alert which pops up on the page to inform the user of an event which occured and optionally provide actions to perform. */\nexport const Notification: React.FC<NotificationProps> = React.forwardRef(\n    (\n        { toggle, type = \"slide\", theme = \"purple\", position = \"bottom-left\", onDismiss, dismissTimeout = 5000, persist, contentWrapperProps = {}, ...props }: NotificationProps,\n        ref: React.ForwardedRef<HTMLDivElement>\n    ) => {\n        const timerRef: React.MutableRefObject<any> = React.useRef();\n        const [isAnimationEnded, setIsAnimationEnded] = React.useState<boolean>(false);\n        const [disableAnimation, setDisableAnimation] = React.useState<boolean>(true);\n\n        React.useEffect(() => {\n            if (toggle) {\n                disableAnimation && setDisableAnimation(false);\n                if (!persist) {\n                    timerRef.current = setTimeout(() => {\n                        timerRef.current && onDismiss && onDismiss(new Event(\"dismiss\"));\n                        clearTimeout(timerRef.current);\n                    }, dismissTimeout);\n                }\n            } else {\n                clearTimeout(timerRef.current);\n                setIsAnimationEnded(false);\n            }\n        }, [toggle]);\n\n        React.useEffect(() => {\n            persist && clearTimeout(timerRef.current);\n        }, [persist]);\n\n        return !safeDocument\n            ? null\n            : createPortal(\n                  <div\n                      {...props}\n                      ref={ref}\n                      className={classnames(\n                          \"rc\",\n                          \"notification\",\n                          {\n                              show: toggle,\n                              hide: !toggle && !disableAnimation,\n                              [`theme-${theme}`]: theme,\n                              [`type-${type}`]: type,\n                          },\n                          position,\n                          props.className\n                      )}\n                      onAnimationEnd={(e) => {\n                          props.onAnimationEnd && props.onAnimationEnd(e);\n                          !toggle && setDisableAnimation(true);\n                          setIsAnimationEnded(toggle);\n                      }}\n                  >\n                      <div {...contentWrapperProps} className={classnames(`content-wrapper`, { clickable: props.onClick, visible: isAnimationEnded })}>\n                          {props.children}\n                          <button className=\"close\" onClick={onDismiss}></button>\n                      </div>\n                  </div>,\n                  safeDocument.body\n              );\n    }\n) as React.ForwardRefExoticComponent<React.PropsWithoutRef<SlideNotification & BarNotification> & React.RefAttributes<HTMLDivElement>>;\n","export default \"import { randomId } from \\\"@sebgroup/frontend-tools/randomId\\\";\\nimport classnames from \\\"classnames\\\";\\nimport React from \\\"react\\\";\\nimport { Overlay } from \\\"./Overlay\\\";\\nimport \\\"./tooltip.scss\\\";\\nimport { ElementPosition } from \\\"./useOverlay\\\";\\n\\nconst InfoCircleIcon: JSX.Element = (\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 448 512\\\">\\n        <path d=\\\"M400 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zm16 400c0 8.822-7.178 16-16 16H48c-8.822 0-16-7.178-16-16V80c0-8.822 7.178-16 16-16h352c8.822 0 16 7.178 16 16v352zm-192-92c-15.464 0-28 12.536-28 28s12.536 28 28 28 28-12.536 28-28-12.536-28-28-28zm7.67-24h-16c-6.627 0-12-5.373-12-12v-.381c0-70.343 77.44-63.619 77.44-107.408 0-20.016-17.761-40.211-57.44-40.211-29.144 0-44.265 9.649-59.211 28.692-3.908 4.98-11.054 5.995-16.248 2.376l-13.134-9.15c-5.625-3.919-6.86-11.771-2.645-17.177C153.658 133.514 178.842 116 223.67 116c52.32 0 97.44 29.751 97.44 80.211 0 67.414-77.44 63.849-77.44 107.408V304c0 6.627-5.373 12-12 12z\\\" />\\n    </svg>\\n);\\n\\nexport type TooltipTrigger = \\\"hover\\\" | \\\"click\\\" | \\\"focus\\\";\\nexport type TooltipTheme = \\\"default\\\" | \\\"light\\\" | \\\"primary\\\" | \\\"warning\\\" | \\\"success\\\" | \\\"danger\\\" | \\\"purple\\\";\\nexport type TooltipPosition = ElementPosition;\\n\\nexport type TooltipProps = Omit<JSX.IntrinsicElements[\\\"div\\\"], \\\"ref\\\"> & {\\n    /** Css style positions: top/bottom/left/right */\\n    position?: TooltipPosition;\\n    /** Based on SEB predefined colors */\\n    theme?: TooltipTheme;\\n    /** Tooltip content */\\n    content?: string | React.ReactNode;\\n    /** Tooltip trigger mode */\\n    trigger?: TooltipTrigger;\\n    /** Force tooltip to be at certain position */\\n    disableAutoPosition?: boolean;\\n    /** Force show tooltip */\\n    forceShow?: boolean;\\n    /** callback on tooltip visibility status change */\\n    onVisibleChange?: (event: React.MouseEvent<HTMLDivElement> | React.FocusEvent<HTMLElement> | React.TouchEvent<HTMLDivElement>, visible: boolean) => void;\\n    /** tooltip content wrapper props */\\n    tooltipWrapperProps?: JSX.IntrinsicElements[\\\"div\\\"];\\n};\\n\\n// This solution is meant to fix Gatsby build which complains that document and window doesn't exist in server-side rendering\\nconst safeWindow: Window | null = typeof window !== \\\"undefined\\\" ? window : null;\\n\\nconst isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(safeWindow?.navigator?.userAgent);\\n\\nexport const Tooltip: React.FC<TooltipProps> = ({\\n    className,\\n    position,\\n    theme,\\n    content,\\n    trigger = \\\"click\\\",\\n    disableAutoPosition,\\n    forceShow,\\n    onVisibleChange,\\n    tooltipWrapperProps,\\n    id,\\n    ...props\\n}: TooltipProps) => {\\n    const containerRef: React.RefObject<HTMLDivElement> = React.useRef();\\n    const contentRef: React.RefObject<HTMLDivElement> = React.useRef();\\n    const [tooltipId, setTooltipId] = React.useState<string>(id);\\n    const [show, setShow] = React.useState<boolean>(false);\\n\\n    /**\\n     * toggle tooltip\\n     * @param toggle boolean\\n     * @param e event triggering the changes\\n     */\\n    const onTooltipToggle = (e?: React.MouseEvent<HTMLDivElement> | React.FocusEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>, toggle?: boolean): void => {\\n        const isVisible: boolean = toggle !== undefined ? toggle : !show;\\n        setShow(isVisible);\\n        onVisibleChange && onVisibleChange(e, isVisible);\\n    };\\n\\n    const onTouch = (e: React.TouchEvent<HTMLDivElement>, toggleOn: boolean) => {\\n        onTooltipToggle(e, toggleOn);\\n    };\\n\\n    const onHover = (e: React.MouseEvent<HTMLDivElement>, toggleOn: boolean) => {\\n        onTooltipToggle(e, toggleOn);\\n    };\\n\\n    const onMouseEnterEvent = (e: React.MouseEvent<HTMLDivElement>) => onHover(e, true);\\n    const onMouseLeaveEvent = (e: React.MouseEvent<HTMLDivElement>) => onHover(e, false);\\n    const onTouchStartEvent = (e: React.TouchEvent<HTMLDivElement>) => onTouch(e, true);\\n    const onTouchEndEvent = (e: React.TouchEvent<HTMLDivElement>) => onTouch(e, false);\\n    const onFocusEvent = (e: React.FocusEvent<HTMLDivElement>) => onTooltipToggle(e, true);\\n    const onBlurEvent = (e: React.FocusEvent<HTMLDivElement>) => onTooltipToggle(e, false);\\n\\n    React.useEffect(() => {\\n        setTooltipId(id || randomId(\\\"rc-tooltip-\\\"));\\n    }, [id]);\\n\\n    return (\\n        <div {...props} className={classnames(\\\"tooltip-container\\\", className)} id={tooltipId}>\\n            <div\\n                ref={containerRef}\\n                className={classnames(\\\"tooltip-reference\\\", { cursor: trigger === \\\"click\\\" })}\\n                tabIndex={-1}\\n                onClick={trigger === \\\"click\\\" ? onTooltipToggle : null}\\n                onPointerOver={trigger === \\\"hover\\\" && !isMobile ? onMouseEnterEvent : null}\\n                onPointerOut={trigger === \\\"hover\\\" && !isMobile ? onMouseLeaveEvent : null}\\n                onTouchStart={trigger === \\\"hover\\\" && isMobile ? onTouchStartEvent : null}\\n                onTouchEnd={trigger === \\\"hover\\\" && isMobile ? onTouchEndEvent : null}\\n                onFocus={trigger === \\\"focus\\\" ? onFocusEvent : null}\\n                onBlur={trigger === \\\"focus\\\" ? onBlurEvent : null}\\n            >\\n                {props.children ? (\\n                    React.Children.count(props.children) === 1 ? (\\n                        React.Children.map(props.children, (Child: React.ReactElement) => {\\n                            return Object(Child) !== Child ? (\\n                                <span className=\\\"text-help\\\" aria-describedby={tooltipId}>\\n                                    {Child}\\n                                </span>\\n                            ) : (\\n                                Child\\n                            );\\n                        })\\n                    ) : (\\n                        props.children\\n                    )\\n                ) : (\\n                    <div className=\\\"default-content\\\" aria-describedby={tooltipId}>\\n                        {InfoCircleIcon}\\n                    </div>\\n                )}\\n            </div>\\n            <TooltipContentContainer\\n                {...tooltipWrapperProps}\\n                position={position}\\n                theme={theme}\\n                content={content}\\n                disableAutoPosition={disableAutoPosition}\\n                ref={contentRef}\\n                onContentBlur={(event: React.FocusEvent<HTMLDivElement>) => {\\n                    setShow(false);\\n                    onVisibleChange && onVisibleChange(event, false);\\n                }}\\n                show={show || forceShow}\\n                tooltipReference={() => containerRef.current}\\n            />\\n        </div>\\n    );\\n};\\n\\ntype TooltipContentContainerProps = JSX.IntrinsicElements[\\\"div\\\"] &\\n    Pick<TooltipProps, \\\"theme\\\" | \\\"position\\\" | \\\"content\\\" | \\\"disableAutoPosition\\\"> & {\\n        show: boolean;\\n        tooltipReference: () => HTMLDivElement;\\n        onContentBlur: (event: React.FocusEvent<HTMLDivElement>) => void;\\n    };\\nconst TooltipContentContainer: React.FC<TooltipContentContainerProps> = React.forwardRef(\\n    ({ show, tooltipReference, theme = \\\"default\\\", position, content, disableAutoPosition, onContentBlur, ...props }: TooltipContentContainerProps, forwardedRef: React.RefObject<HTMLDivElement>) => {\\n        return (\\n            <Overlay ref={forwardedRef} show={show} onBlur={onContentBlur} position={position} disableAutoPosition={disableAutoPosition} overlayReference={tooltipReference}>\\n                <div className={classnames(`tooltip`, theme, { show: show }, props.className)} role=\\\"tooltip\\\" {...props}>\\n                    <div className=\\\"tooltip-arrow\\\" />\\n                    <div className=\\\"tooltip-inner\\\">{content}</div>\\n                </div>\\n            </Overlay>\\n        );\\n    }\\n);\\n\";"],"names":["isSameObject","exports","safeDocument","document","Overlay","React","ref","disableAutoPosition","props","overlayContentRef","setOverlayContentRef","reference","overlayReference","show","presetPosition","config","defaultPositionsList","positionList","filter","item","bottom","height","left","right","top","width","x","y","referenceRect","setReferenceRect","overlayRect","setOverlayRect","overlayStyle","setOverlayStyle","style","setStyle","currentPosition","setCurrentPosition","getBoundingClientRect","debounce","callback","delay","timer","self","this","args","arguments","clearTimeout","setTimeout","apply","updateRect","newRect","debouncedUpdateRect","parseMargin","margin","parseInt","isOverflow","window","innerWidth","innerHeight","getTopStartingPoint","marginBottom","getBottomStartingPoint","marginTop","getSideTopStartingPoint","getSideBottomStartingPoint","getLeftStartingPoint","marginRight","getRightStartingPoint","marginLeft","getVerticalLeftStartingPoint","getVerticalCenterStartingPoint","getHorizontalCenterStartingPoint","getPosition","position","getOverlayPosition","currentNewPosition","currentPositionStyle","some","alternatePosition","isWithinViewport","addEventListener","removeEventListener","getComputedStyle","useOverlay","getOverlayContentRef","node","current","focus","blur","createPortal","className","classnames","tabIndex","onBlur","e","triggeredNode","relatedTarget","activeElement","isWithinTriggerNode","contains","children","body","InfoCircleIcon","xmlns","viewBox","d","safeWindow","isMobile","test","navigator","_safeWindow$navigator","userAgent","Tooltip","theme","content","trigger","forceShow","onVisibleChange","tooltipWrapperProps","id","containerRef","contentRef","tooltipId","setTooltipId","setShow","onTooltipToggle","toggle","isVisible","undefined","onTouch","toggleOn","onHover","randomId","cursor","onClick","onPointerOver","onPointerOut","onTouchStart","onTouchEnd","onFocus","Child","Object","TooltipContentContainer","onContentBlur","event","tooltipReference","forwardedRef","role","importString","require","notificationToggle","setNotifcationToggle","nodeTooltipContent","fields","key","items","initialValue","label","options","value","controlType","useDynamicForm","renderForm","controls","state","checkSelectedKey","checkboxes","_controls$checkboxes","find","Docs","mainFile","example","code","note","CodeSnippet","language","Notification","type","dismissTimeout","onDismiss","persist","contentWrapperProps","timerRef","isAnimationEnded","setIsAnimationEnded","disableAnimation","setDisableAnimation","Event","hide","onAnimationEnd","clickable","visible"],"sourceRoot":""}