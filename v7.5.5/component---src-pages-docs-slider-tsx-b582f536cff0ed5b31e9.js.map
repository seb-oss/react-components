{"version":3,"file":"component---src-pages-docs-slider-tsx-b582f536cff0ed5b31e9.js","mappings":"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","sources":["webpack://react-components-docs/./src/pages/docs/slider.tsx","webpack://react-components-docs/../lib/src/Slider/Slider.tsx","webpack://react-components-docs/../lib/src/Slider/Slider.tsx?0b8e"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport Docs from \"@common/Docs\";\nimport { SliderLabel, Slider, SliderTheme } from \"@sebgroup/react-components/Slider\";\nimport { DynamicFormOption, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { Indicator, IndicatorType } from \"@sebgroup/react-components/FeedbackIndicator\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Slider/Slider\");\nconst code: string = `<Slider value={value} onChange={e => setValue(parseInt(e.target.value))} />`;\n\nconst tooltipThemes: Array<DynamicFormOption<SliderTheme>> = [\n    { key: \"inverted\", label: \"Inverted\", value: \"inverted\" },\n    { key: \"danger\", label: \"Danger\", value: \"danger\" },\n    { key: \"primary\", label: \"Primary\", value: \"primary\" },\n    { key: \"purple\", label: \"Purple\", value: \"purple\" },\n    { key: \"success\", label: \"Success\", value: \"success\" },\n    { key: \"warning\", label: \"Warning\", value: \"warning\" },\n];\nconst indicators: Array<DynamicFormOption<IndicatorType>> = [\n    { key: \"error\", label: \"danger\", value: \"danger\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"success\", label: \"success\", value: \"success\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"warning\", label: \"warning\", value: \"warning\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\n\nconst SliderPage: React.FC = (): React.ReactElement<void> => {\n    const [value, setValue] = React.useState<number>(1);\n\n    const {\n        renderForm: renderControls,\n        state: { controls },\n        setHidden,\n    } = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"theme\", label: \"Theme\", options: tooltipThemes, initialValue: \"primary\", controlType: \"Dropdown\", additionalProps: { className: \"indent pl-3 pt-2\" } },\n                { key: \"tooltipTheme\", label: \"Tooltip theme\", options: tooltipThemes, initialValue: \"inverted\", controlType: \"Dropdown\", additionalProps: { className: \"indent pl-3 pt-2\" } },\n                { key: \"min\", label: \"Min\", controlType: \"Text\", initialValue: 1, formElementAdditionalProps: { type: \"number\" } },\n                { key: \"max\", label: \"Max\", controlType: \"Text\", initialValue: 100, formElementAdditionalProps: { type: \"number\" } },\n                { key: \"step\", label: \"Step\", controlType: \"Text\", initialValue: 1, formElementAdditionalProps: { type: \"number\" } },\n                { key: \"alternative\", label: \"alternative\", controlType: \"Checkbox\", initialValue: false, description: \"Render with an alternative style\" },\n                { key: \"alwaysShowTooltip\", label: \"alwaysShowTooltip\", controlType: \"Checkbox\", initialValue: false },\n                { key: \"disabled\", label: \"disabled\", controlType: \"Checkbox\", initialValue: false },\n                { key: \"indicator\", label: \"indicator\", controlType: \"Checkbox\", initialValue: false },\n                {\n                    key: \"indicatorType\",\n                    label: \"Indicator type\",\n                    controlType: \"Radio\",\n                    options: indicators,\n                    initialValue: indicators[0].value,\n                    formElementAdditionalProps: { className: \"indent pl-3 pt-2\" },\n                },\n                { key: \"labels\", label: \"labels\", controlType: \"Checkbox\", initialValue: false, description: \"Pass a list of positions and labels to be mapped\" },\n                {\n                    key: \"showTicks\",\n                    label: \"showTicks\",\n                    controlType: \"Checkbox\",\n                    initialValue: false,\n                    description: \"Show ticks for the lables\",\n                    formElementAdditionalProps: { className: \"indent pl-3 pt-2\" },\n                },\n            ],\n        },\n    ]);\n\n    const center: number = Math.floor(((controls.max as number) - (controls.min as number)) / 2) + (controls.min as number);\n\n    const labels: SliderLabel[] = [\n        { position: controls.min as number, label: controls.min },\n        { position: 2, label: 2 },\n        { position: center, label: center },\n        { position: controls.max as number, label: controls.max },\n    ];\n\n    useEffect(() => {\n        setHidden(\"controls\", \"indicatorType\", !controls.indicator);\n    }, [controls.indicator]);\n\n    useEffect(() => {\n        setHidden(\"controls\", \"showTicks\", !controls.labels);\n    }, [controls.labels]);\n\n    const indicator: Indicator = React.useMemo(() => {\n        return controls.indicator ? { type: controls.indicatorType as IndicatorType, message: \"Indicator message\" } : null;\n    }, [controls.indicator, controls.indicatorType]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100\">\n                    <Slider {...controls} value={value} indicator={indicator} onChange={(e) => setValue(Number(e.target.value))} labels={controls.labels ? labels : null} />\n                </div>\n            }\n            code={code}\n            controls={renderControls()}\n        />\n    );\n};\n\nexport default SliderPage;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport \"./slider.scss\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\n\n// This solution is meant to fix Gatsby build which complains that window doesn't exist in server-side rendering\nconst safeWindow: Window | null = typeof window !== \"undefined\" ? window : null;\n\nexport type SliderTheme = \"primary\" | \"inverted\" | \"success\" | \"danger\" | \"warning\" | \"purple\";\nexport type SliderAppearance = \"normal\" | \"alternative\";\n\nexport interface SliderLabel {\n    position: number;\n    label: React.ReactNode;\n}\n\nexport type SliderProps = Omit<JSX.IntrinsicElements[\"input\"], \"value\"> & {\n    /** set to always show tooltip */\n    alwaysShowTooltip?: boolean;\n    /** field label */\n    label?: string;\n    /** range slider labels */\n    labels?: Array<SliderLabel>;\n    /** set to show ticks */\n    showTicks?: boolean;\n    /** slider theme: `primary` | `inverted` | `success` | `danger` | `warning` | `purple` */\n    theme?: SliderTheme;\n    /** set to show alternative theme */\n    alternative?: boolean;\n    /** tooltip theme: `primary` | `inverted` | `success` | `danger` | `warning` | `purple` */\n    tooltipTheme?: SliderTheme;\n    /** tooltip value */\n    tooltipValue?: string;\n    /** field value */\n    value: number;\n    /** Indicator type and message */\n    indicator?: Indicator;\n};\n\n/** The component allows for easy adjustments of a value and check the updated result immediately. */\nexport const Slider: React.FC<SliderProps> = React.forwardRef(\n    (\n        { alwaysShowTooltip, label, labels, max, min, showTicks, step, theme = \"primary\", alternative, tooltipTheme = \"inverted\", tooltipValue, indicator, value, disabled, id, ...props }: SliderProps,\n        ref: React.ForwardedRef<HTMLInputElement>\n    ) => {\n        const inputWrapperRef: React.MutableRefObject<HTMLDivElement> = React.useRef<HTMLDivElement>();\n        const [minValue, setMinValue] = React.useState<number>((min as number) || 0);\n        const [maxValue, setMaxValue] = React.useState<number>((max as number) || 100);\n        const [sliderTrackBackground, setSliderTrackBackground] = React.useState<string>(null);\n        const [labelsPositions, setLabelsPositions] = React.useState<Array<string>>([]);\n        const [uniqueId, setUniqueId] = React.useState<string>(id);\n\n        /**\n         * Calculating the position of the label based on it's value\n         * @param {number} value The Slider value\n         * @returns {number} The position of the label in percentage\n         */\n        function getLabelPosition(value: number): number {\n            if (value >= maxValue) {\n                return 100;\n            } else if (value <= minValue) {\n                return 0;\n            }\n            return Math.abs(((value - minValue) / (maxValue - minValue)) * 100);\n        }\n\n        React.useEffect(() => {\n            // Checking if the min or max are not numbers, null value or undefined\n            const minValue: number = typeof min !== \"number\" ? 0 : min;\n            const maxValue: number = typeof max !== \"number\" ? 100 : max;\n            setMinValue(minValue);\n            setMaxValue(maxValue);\n        }, [min, max]);\n\n        React.useEffect(() => {\n            if (labels && labels.length) {\n                const positions: Array<string> = [];\n                labels.map((label: SliderLabel) => {\n                    positions.push(getLabelPosition(label.position) + \"%\");\n                });\n                setLabelsPositions(positions);\n            }\n        }, [labels, minValue, maxValue]);\n\n        React.useEffect(() => {\n            setUniqueId(id ? id : randomId(\"slider-\"));\n        }, [id]);\n\n        React.useLayoutEffect(() => {\n            let newTrackBackground: string = null;\n            if (inputWrapperRef?.current) {\n                const style: CSSStyleDeclaration = safeWindow?.getComputedStyle(inputWrapperRef?.current);\n                const inputStyle: CSSStyleDeclaration = safeWindow?.getComputedStyle(inputWrapperRef?.current.querySelector(\"input\"));\n                const backgroundColor: string = style?.getPropertyValue(\"--slider-background-color\");\n                const primaryColor: string = style?.getPropertyValue(\"--slider-primary-color\");\n                const percent: number = Math.abs(((value - minValue) / (maxValue - minValue)) * 100);\n                newTrackBackground = `linear-gradient(to right, ${primaryColor} calc(${inputStyle.marginLeft} / 0.25), ${primaryColor} calc(${inputStyle.marginLeft} * 2 + ${percent}%), ${backgroundColor} ${percent}%, ${backgroundColor} 100%)`;\n            }\n            setSliderTrackBackground(newTrackBackground);\n        }, [inputWrapperRef, value, theme, disabled]);\n\n        return (\n            <FeedbackIndicator {...indicator} noBorder>\n                <div className={classnames(\"rc custom-slider\", props.className, `custom-slider--${theme}`, { \"custom-slider--disabled\": disabled })}>\n                    {label && (\n                        <label className=\"custom-slider__label\" htmlFor={uniqueId}>\n                            {label}\n                        </label>\n                    )}\n                    <div ref={inputWrapperRef} className={classnames(\"custom-slider__input-field\", { \"custom-slider__input-field--alt\": alternative })}>\n                        <input\n                            {...props}\n                            id={uniqueId}\n                            value={value}\n                            disabled={disabled}\n                            style={{ background: sliderTrackBackground }}\n                            ref={ref}\n                            type=\"range\"\n                            min={minValue}\n                            max={maxValue}\n                            step={step}\n                        />\n                        <div\n                            aria-hidden\n                            className={classnames(\"custom-slider__tooltip-wrapper\", `custom-slider__tooltip-wrapper--${tooltipTheme}`, {\n                                \"custom-slider__tooltip-wrapper--force-show\": alwaysShowTooltip,\n                            })}\n                        >\n                            <div className=\"custom-slider__tooltip\" style={{ left: `${getLabelPosition(value)}%` }}>\n                                {tooltipValue || value}\n                            </div>\n                        </div>\n                        {labels && labels.length ? (\n                            <div className=\"custom-slider__tickmarks\" aria-hidden>\n                                {labels.map((item: SliderLabel, i: number) => {\n                                    return (\n                                        <div\n                                            key={i}\n                                            className={classnames(\"custom-slider__tickmarks-label\", { \"custom-slider__tickmarks-label--ticks\": showTicks })}\n                                            style={{ left: labelsPositions[i] }}\n                                        >\n                                            <span>{item.label}</span>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        ) : null}\n                    </div>\n                </div>\n            </FeedbackIndicator>\n        );\n    }\n);\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport { FeedbackIndicator, Indicator } from \\\"../FeedbackIndicator\\\";\\nimport \\\"./slider.scss\\\";\\nimport { randomId } from \\\"@sebgroup/frontend-tools/randomId\\\";\\n\\n// This solution is meant to fix Gatsby build which complains that window doesn't exist in server-side rendering\\nconst safeWindow: Window | null = typeof window !== \\\"undefined\\\" ? window : null;\\n\\nexport type SliderTheme = \\\"primary\\\" | \\\"inverted\\\" | \\\"success\\\" | \\\"danger\\\" | \\\"warning\\\" | \\\"purple\\\";\\nexport type SliderAppearance = \\\"normal\\\" | \\\"alternative\\\";\\n\\nexport interface SliderLabel {\\n    position: number;\\n    label: React.ReactNode;\\n}\\n\\nexport type SliderProps = Omit<JSX.IntrinsicElements[\\\"input\\\"], \\\"value\\\"> & {\\n    /** set to always show tooltip */\\n    alwaysShowTooltip?: boolean;\\n    /** field label */\\n    label?: string;\\n    /** range slider labels */\\n    labels?: Array<SliderLabel>;\\n    /** set to show ticks */\\n    showTicks?: boolean;\\n    /** slider theme: `primary` | `inverted` | `success` | `danger` | `warning` | `purple` */\\n    theme?: SliderTheme;\\n    /** set to show alternative theme */\\n    alternative?: boolean;\\n    /** tooltip theme: `primary` | `inverted` | `success` | `danger` | `warning` | `purple` */\\n    tooltipTheme?: SliderTheme;\\n    /** tooltip value */\\n    tooltipValue?: string;\\n    /** field value */\\n    value: number;\\n    /** Indicator type and message */\\n    indicator?: Indicator;\\n};\\n\\n/** The component allows for easy adjustments of a value and check the updated result immediately. */\\nexport const Slider: React.FC<SliderProps> = React.forwardRef(\\n    (\\n        { alwaysShowTooltip, label, labels, max, min, showTicks, step, theme = \\\"primary\\\", alternative, tooltipTheme = \\\"inverted\\\", tooltipValue, indicator, value, disabled, id, ...props }: SliderProps,\\n        ref: React.ForwardedRef<HTMLInputElement>\\n    ) => {\\n        const inputWrapperRef: React.MutableRefObject<HTMLDivElement> = React.useRef<HTMLDivElement>();\\n        const [minValue, setMinValue] = React.useState<number>((min as number) || 0);\\n        const [maxValue, setMaxValue] = React.useState<number>((max as number) || 100);\\n        const [sliderTrackBackground, setSliderTrackBackground] = React.useState<string>(null);\\n        const [labelsPositions, setLabelsPositions] = React.useState<Array<string>>([]);\\n        const [uniqueId, setUniqueId] = React.useState<string>(id);\\n\\n        /**\\n         * Calculating the position of the label based on it's value\\n         * @param {number} value The Slider value\\n         * @returns {number} The position of the label in percentage\\n         */\\n        function getLabelPosition(value: number): number {\\n            if (value >= maxValue) {\\n                return 100;\\n            } else if (value <= minValue) {\\n                return 0;\\n            }\\n            return Math.abs(((value - minValue) / (maxValue - minValue)) * 100);\\n        }\\n\\n        React.useEffect(() => {\\n            // Checking if the min or max are not numbers, null value or undefined\\n            const minValue: number = typeof min !== \\\"number\\\" ? 0 : min;\\n            const maxValue: number = typeof max !== \\\"number\\\" ? 100 : max;\\n            setMinValue(minValue);\\n            setMaxValue(maxValue);\\n        }, [min, max]);\\n\\n        React.useEffect(() => {\\n            if (labels && labels.length) {\\n                const positions: Array<string> = [];\\n                labels.map((label: SliderLabel) => {\\n                    positions.push(getLabelPosition(label.position) + \\\"%\\\");\\n                });\\n                setLabelsPositions(positions);\\n            }\\n        }, [labels, minValue, maxValue]);\\n\\n        React.useEffect(() => {\\n            setUniqueId(id ? id : randomId(\\\"slider-\\\"));\\n        }, [id]);\\n\\n        React.useLayoutEffect(() => {\\n            let newTrackBackground: string = null;\\n            if (inputWrapperRef?.current) {\\n                const style: CSSStyleDeclaration = safeWindow?.getComputedStyle(inputWrapperRef?.current);\\n                const inputStyle: CSSStyleDeclaration = safeWindow?.getComputedStyle(inputWrapperRef?.current.querySelector(\\\"input\\\"));\\n                const backgroundColor: string = style?.getPropertyValue(\\\"--slider-background-color\\\");\\n                const primaryColor: string = style?.getPropertyValue(\\\"--slider-primary-color\\\");\\n                const percent: number = Math.abs(((value - minValue) / (maxValue - minValue)) * 100);\\n                newTrackBackground = `linear-gradient(to right, ${primaryColor} calc(${inputStyle.marginLeft} / 0.25), ${primaryColor} calc(${inputStyle.marginLeft} * 2 + ${percent}%), ${backgroundColor} ${percent}%, ${backgroundColor} 100%)`;\\n            }\\n            setSliderTrackBackground(newTrackBackground);\\n        }, [inputWrapperRef, value, theme, disabled]);\\n\\n        return (\\n            <FeedbackIndicator {...indicator} noBorder>\\n                <div className={classnames(\\\"rc custom-slider\\\", props.className, `custom-slider--${theme}`, { \\\"custom-slider--disabled\\\": disabled })}>\\n                    {label && (\\n                        <label className=\\\"custom-slider__label\\\" htmlFor={uniqueId}>\\n                            {label}\\n                        </label>\\n                    )}\\n                    <div ref={inputWrapperRef} className={classnames(\\\"custom-slider__input-field\\\", { \\\"custom-slider__input-field--alt\\\": alternative })}>\\n                        <input\\n                            {...props}\\n                            id={uniqueId}\\n                            value={value}\\n                            disabled={disabled}\\n                            style={{ background: sliderTrackBackground }}\\n                            ref={ref}\\n                            type=\\\"range\\\"\\n                            min={minValue}\\n                            max={maxValue}\\n                            step={step}\\n                        />\\n                        <div\\n                            aria-hidden\\n                            className={classnames(\\\"custom-slider__tooltip-wrapper\\\", `custom-slider__tooltip-wrapper--${tooltipTheme}`, {\\n                                \\\"custom-slider__tooltip-wrapper--force-show\\\": alwaysShowTooltip,\\n                            })}\\n                        >\\n                            <div className=\\\"custom-slider__tooltip\\\" style={{ left: `${getLabelPosition(value)}%` }}>\\n                                {tooltipValue || value}\\n                            </div>\\n                        </div>\\n                        {labels && labels.length ? (\\n                            <div className=\\\"custom-slider__tickmarks\\\" aria-hidden>\\n                                {labels.map((item: SliderLabel, i: number) => {\\n                                    return (\\n                                        <div\\n                                            key={i}\\n                                            className={classnames(\\\"custom-slider__tickmarks-label\\\", { \\\"custom-slider__tickmarks-label--ticks\\\": showTicks })}\\n                                            style={{ left: labelsPositions[i] }}\\n                                        >\\n                                            <span>{item.label}</span>\\n                                        </div>\\n                                    );\\n                                })}\\n                            </div>\\n                        ) : null}\\n                    </div>\\n                </div>\\n            </FeedbackIndicator>\\n        );\\n    }\\n);\\n\";"],"names":["importString","require","tooltipThemes","key","label","value","indicators","additionalProps","wrapperProps","className","React","setValue","useDynamicForm","items","options","initialValue","controlType","formElementAdditionalProps","type","description","renderControls","renderForm","controls","state","setHidden","center","Math","floor","max","min","labels","position","useEffect","indicator","indicatorType","message","Docs","mainFile","example","Slider","onChange","e","Number","target","code","safeWindow","window","ref","alwaysShowTooltip","showTicks","step","theme","alternative","tooltipTheme","tooltipValue","disabled","id","props","inputWrapperRef","minValue","setMinValue","maxValue","setMaxValue","sliderTrackBackground","setSliderTrackBackground","labelsPositions","setLabelsPositions","uniqueId","setUniqueId","getLabelPosition","abs","length","positions","map","push","randomId","newTrackBackground","current","style","getComputedStyle","inputStyle","querySelector","backgroundColor","getPropertyValue","primaryColor","percent","marginLeft","FeedbackIndicator","noBorder","classnames","htmlFor","background","left","item","i"],"sourceRoot":""}