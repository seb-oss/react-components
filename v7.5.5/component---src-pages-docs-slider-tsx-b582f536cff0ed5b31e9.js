"use strict";(self.webpackChunkreact_components_docs=self.webpackChunkreact_components_docs||[]).push([[2579],{49692:function(e,n,a){a.r(n);var t=a(27378),l=a(2634),i=a(24782),r=a(91448),o=a(27751),s=[{key:"inverted",label:"Inverted",value:"inverted"},{key:"danger",label:"Danger",value:"danger"},{key:"primary",label:"Primary",value:"primary"},{key:"purple",label:"Purple",value:"purple"},{key:"success",label:"Success",value:"success"},{key:"warning",label:"Warning",value:"warning"}],c=[{key:"error",label:"danger",value:"danger",additionalProps:{wrapperProps:{className:"d-inline-block"}}},{key:"success",label:"success",value:"success",additionalProps:{wrapperProps:{className:"d-inline-block"}}},{key:"warning",label:"warning",value:"warning",additionalProps:{wrapperProps:{className:"d-inline-block"}}}];n.default=function(){var e=t.useState(1),n=e[0],a=e[1],u=(0,r.b)([{key:"controls",items:[{key:"theme",label:"Theme",options:s,initialValue:"primary",controlType:"Dropdown",additionalProps:{className:"indent pl-3 pt-2"}},{key:"tooltipTheme",label:"Tooltip theme",options:s,initialValue:"inverted",controlType:"Dropdown",additionalProps:{className:"indent pl-3 pt-2"}},{key:"min",label:"Min",controlType:"Text",initialValue:1,formElementAdditionalProps:{type:"number"}},{key:"max",label:"Max",controlType:"Text",initialValue:100,formElementAdditionalProps:{type:"number"}},{key:"step",label:"Step",controlType:"Text",initialValue:1,formElementAdditionalProps:{type:"number"}},{key:"alternative",label:"alternative",controlType:"Checkbox",initialValue:!1,description:"Render with an alternative style"},{key:"alwaysShowTooltip",label:"alwaysShowTooltip",controlType:"Checkbox",initialValue:!1},{key:"disabled",label:"disabled",controlType:"Checkbox",initialValue:!1},{key:"indicator",label:"indicator",controlType:"Checkbox",initialValue:!1},{key:"indicatorType",label:"Indicator type",controlType:"Radio",options:c,initialValue:c[0].value,formElementAdditionalProps:{className:"indent pl-3 pt-2"}},{key:"labels",label:"labels",controlType:"Checkbox",initialValue:!1,description:"Pass a list of positions and labels to be mapped"},{key:"showTicks",label:"showTicks",controlType:"Checkbox",initialValue:!1,description:"Show ticks for the lables",formElementAdditionalProps:{className:"indent pl-3 pt-2"}}]}]),d=u.renderForm,m=u.state.controls,p=u.setHidden,b=Math.floor((m.max-m.min)/2)+m.min,f=[{position:m.min,label:m.min},{position:2,label:2},{position:b,label:b},{position:m.max,label:m.max}];(0,t.useEffect)((function(){p("controls","indicatorType",!m.indicator)}),[m.indicator]),(0,t.useEffect)((function(){p("controls","showTicks",!m.labels)}),[m.labels]);var y=t.useMemo((function(){return m.indicator?{type:m.indicatorType,message:"Indicator message"}:null}),[m.indicator,m.indicatorType]);return t.createElement(l.Z,{mainFile:o,example:t.createElement("div",{className:"w-100"},t.createElement(i.i,Object.assign({},m,{value:n,indicator:y,onChange:function(e){return a(Number(e.target.value))},labels:m.labels?f:null}))),code:"<Slider value={value} onChange={e => setValue(parseInt(e.target.value))} />",controls:d()})}},24782:function(e,n,a){a.d(n,{i:function(){return d}});var t=a(30808),l=a(27378),i=a(508),r=a.n(i),o=a(59196),s=a(75418),c=["alwaysShowTooltip","label","labels","max","min","showTicks","step","theme","alternative","tooltipTheme","tooltipValue","indicator","value","disabled","id"],u="undefined"!=typeof window?window:null,d=l.forwardRef((function(e,n){var a=e.alwaysShowTooltip,i=e.label,d=e.labels,m=e.max,p=e.min,b=e.showTicks,f=e.step,y=e.theme,v=void 0===y?"primary":y,k=e.alternative,h=e.tooltipTheme,g=void 0===h?"inverted":h,w=e.tooltipValue,T=e.indicator,S=e.value,V=e.disabled,_=e.id,x=(0,t.Z)(e,c),E=l.useRef(),R=l.useState(p||0),P=R[0],N=R[1],C=l.useState(m||100),I=C[0],L=C[1],M=l.useState(null),W=M[0],$=M[1],F=l.useState([]),A=F[0],B=F[1],q=l.useState(_),D=q[0],j=q[1];function O(e){return e>=I?100:e<=P?0:Math.abs((e-P)/(I-P)*100)}return l.useEffect((function(){var e="number"!=typeof m?100:m;N("number"!=typeof p?0:p),L(e)}),[p,m]),l.useEffect((function(){if(d&&d.length){var e=[];d.map((function(n){e.push(O(n.position)+"%")})),B(e)}}),[d,P,I]),l.useEffect((function(){j(_||(0,s.k)("slider-"))}),[_]),l.useLayoutEffect((function(){var e=null;if(null!=E&&E.current){var n=null==u?void 0:u.getComputedStyle(null==E?void 0:E.current),a=null==u?void 0:u.getComputedStyle(null==E?void 0:E.current.querySelector("input")),t=null==n?void 0:n.getPropertyValue("--slider-background-color"),l=null==n?void 0:n.getPropertyValue("--slider-primary-color"),i=Math.abs((S-P)/(I-P)*100);e="linear-gradient(to right, "+l+" calc("+a.marginLeft+" / 0.25), "+l+" calc("+a.marginLeft+" * 2 + "+i+"%), "+t+" "+i+"%, "+t+" 100%)"}$(e)}),[E,S,v,V]),l.createElement(o.a,Object.assign({},T,{noBorder:!0}),l.createElement("div",{className:r()("rc custom-slider",x.className,"custom-slider--"+v,{"custom-slider--disabled":V})},i&&l.createElement("label",{className:"custom-slider__label",htmlFor:D},i),l.createElement("div",{ref:E,className:r()("custom-slider__input-field",{"custom-slider__input-field--alt":k})},l.createElement("input",Object.assign({},x,{id:D,value:S,disabled:V,style:{background:W},ref:n,type:"range",min:P,max:I,step:f})),l.createElement("div",{"aria-hidden":!0,className:r()("custom-slider__tooltip-wrapper","custom-slider__tooltip-wrapper--"+g,{"custom-slider__tooltip-wrapper--force-show":a})},l.createElement("div",{className:"custom-slider__tooltip",style:{left:O(S)+"%"}},w||S)),d&&d.length?l.createElement("div",{className:"custom-slider__tickmarks","aria-hidden":!0},d.map((function(e,n){return l.createElement("div",{key:n,className:r()("custom-slider__tickmarks-label",{"custom-slider__tickmarks-label--ticks":b}),style:{left:A[n]}},l.createElement("span",null,e.label))}))):null)))}))},27751:function(e,n,a){a.r(n),n.default='import React from "react";\nimport classnames from "classnames";\nimport { FeedbackIndicator, Indicator } from "../FeedbackIndicator";\nimport "./slider.scss";\nimport { randomId } from "@sebgroup/frontend-tools/randomId";\n\n// This solution is meant to fix Gatsby build which complains that window doesn\'t exist in server-side rendering\nconst safeWindow: Window | null = typeof window !== "undefined" ? window : null;\n\nexport type SliderTheme = "primary" | "inverted" | "success" | "danger" | "warning" | "purple";\nexport type SliderAppearance = "normal" | "alternative";\n\nexport interface SliderLabel {\n    position: number;\n    label: React.ReactNode;\n}\n\nexport type SliderProps = Omit<JSX.IntrinsicElements["input"], "value"> & {\n    /** set to always show tooltip */\n    alwaysShowTooltip?: boolean;\n    /** field label */\n    label?: string;\n    /** range slider labels */\n    labels?: Array<SliderLabel>;\n    /** set to show ticks */\n    showTicks?: boolean;\n    /** slider theme: `primary` | `inverted` | `success` | `danger` | `warning` | `purple` */\n    theme?: SliderTheme;\n    /** set to show alternative theme */\n    alternative?: boolean;\n    /** tooltip theme: `primary` | `inverted` | `success` | `danger` | `warning` | `purple` */\n    tooltipTheme?: SliderTheme;\n    /** tooltip value */\n    tooltipValue?: string;\n    /** field value */\n    value: number;\n    /** Indicator type and message */\n    indicator?: Indicator;\n};\n\n/** The component allows for easy adjustments of a value and check the updated result immediately. */\nexport const Slider: React.FC<SliderProps> = React.forwardRef(\n    (\n        { alwaysShowTooltip, label, labels, max, min, showTicks, step, theme = "primary", alternative, tooltipTheme = "inverted", tooltipValue, indicator, value, disabled, id, ...props }: SliderProps,\n        ref: React.ForwardedRef<HTMLInputElement>\n    ) => {\n        const inputWrapperRef: React.MutableRefObject<HTMLDivElement> = React.useRef<HTMLDivElement>();\n        const [minValue, setMinValue] = React.useState<number>((min as number) || 0);\n        const [maxValue, setMaxValue] = React.useState<number>((max as number) || 100);\n        const [sliderTrackBackground, setSliderTrackBackground] = React.useState<string>(null);\n        const [labelsPositions, setLabelsPositions] = React.useState<Array<string>>([]);\n        const [uniqueId, setUniqueId] = React.useState<string>(id);\n\n        /**\n         * Calculating the position of the label based on it\'s value\n         * @param {number} value The Slider value\n         * @returns {number} The position of the label in percentage\n         */\n        function getLabelPosition(value: number): number {\n            if (value >= maxValue) {\n                return 100;\n            } else if (value <= minValue) {\n                return 0;\n            }\n            return Math.abs(((value - minValue) / (maxValue - minValue)) * 100);\n        }\n\n        React.useEffect(() => {\n            // Checking if the min or max are not numbers, null value or undefined\n            const minValue: number = typeof min !== "number" ? 0 : min;\n            const maxValue: number = typeof max !== "number" ? 100 : max;\n            setMinValue(minValue);\n            setMaxValue(maxValue);\n        }, [min, max]);\n\n        React.useEffect(() => {\n            if (labels && labels.length) {\n                const positions: Array<string> = [];\n                labels.map((label: SliderLabel) => {\n                    positions.push(getLabelPosition(label.position) + "%");\n                });\n                setLabelsPositions(positions);\n            }\n        }, [labels, minValue, maxValue]);\n\n        React.useEffect(() => {\n            setUniqueId(id ? id : randomId("slider-"));\n        }, [id]);\n\n        React.useLayoutEffect(() => {\n            let newTrackBackground: string = null;\n            if (inputWrapperRef?.current) {\n                const style: CSSStyleDeclaration = safeWindow?.getComputedStyle(inputWrapperRef?.current);\n                const inputStyle: CSSStyleDeclaration = safeWindow?.getComputedStyle(inputWrapperRef?.current.querySelector("input"));\n                const backgroundColor: string = style?.getPropertyValue("--slider-background-color");\n                const primaryColor: string = style?.getPropertyValue("--slider-primary-color");\n                const percent: number = Math.abs(((value - minValue) / (maxValue - minValue)) * 100);\n                newTrackBackground = `linear-gradient(to right, ${primaryColor} calc(${inputStyle.marginLeft} / 0.25), ${primaryColor} calc(${inputStyle.marginLeft} * 2 + ${percent}%), ${backgroundColor} ${percent}%, ${backgroundColor} 100%)`;\n            }\n            setSliderTrackBackground(newTrackBackground);\n        }, [inputWrapperRef, value, theme, disabled]);\n\n        return (\n            <FeedbackIndicator {...indicator} noBorder>\n                <div className={classnames("rc custom-slider", props.className, `custom-slider--${theme}`, { "custom-slider--disabled": disabled })}>\n                    {label && (\n                        <label className="custom-slider__label" htmlFor={uniqueId}>\n                            {label}\n                        </label>\n                    )}\n                    <div ref={inputWrapperRef} className={classnames("custom-slider__input-field", { "custom-slider__input-field--alt": alternative })}>\n                        <input\n                            {...props}\n                            id={uniqueId}\n                            value={value}\n                            disabled={disabled}\n                            style={{ background: sliderTrackBackground }}\n                            ref={ref}\n                            type="range"\n                            min={minValue}\n                            max={maxValue}\n                            step={step}\n                        />\n                        <div\n                            aria-hidden\n                            className={classnames("custom-slider__tooltip-wrapper", `custom-slider__tooltip-wrapper--${tooltipTheme}`, {\n                                "custom-slider__tooltip-wrapper--force-show": alwaysShowTooltip,\n                            })}\n                        >\n                            <div className="custom-slider__tooltip" style={{ left: `${getLabelPosition(value)}%` }}>\n                                {tooltipValue || value}\n                            </div>\n                        </div>\n                        {labels && labels.length ? (\n                            <div className="custom-slider__tickmarks" aria-hidden>\n                                {labels.map((item: SliderLabel, i: number) => {\n                                    return (\n                                        <div\n                                            key={i}\n                                            className={classnames("custom-slider__tickmarks-label", { "custom-slider__tickmarks-label--ticks": showTicks })}\n                                            style={{ left: labelsPositions[i] }}\n                                        >\n                                            <span>{item.label}</span>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        ) : null}\n                    </div>\n                </div>\n            </FeedbackIndicator>\n        );\n    }\n);\n'}}]);
//# sourceMappingURL=component---src-pages-docs-slider-tsx-b582f536cff0ed5b31e9.js.map