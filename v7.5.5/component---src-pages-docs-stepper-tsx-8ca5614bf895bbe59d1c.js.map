{"version":3,"file":"component---src-pages-docs-stepper-tsx-8ca5614bf895bbe59d1c.js","mappings":"2LAMMA,EAAuBC,EAAQ,OAU/BC,EAAsD,CACxD,CAAEC,IAAK,QAASC,MAAO,SAAUC,MAAO,SAAUC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,oBAChG,CAAEL,IAAK,UAAWC,MAAO,UAAWC,MAAO,UAAWC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,oBACpG,CAAEL,IAAK,UAAWC,MAAO,UAAWC,MAAO,UAAWC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,qBAGlGC,EAA4BC,EAAAA,MAAW,WACzC,MAA0BA,EAAAA,SAAuB,GAA1CL,EAAP,KAAcM,EAAd,KAEA,GAIIC,EAAAA,EAAAA,GAAe,CACf,CACIT,IAAK,WACLU,MAAO,CACH,CAAEV,IAAK,MAAOW,aAAc,EAAGC,IAAK,EAAGC,IAAK,IAAKZ,MAAO,MAAOa,YAAa,WAC5E,CAAEd,IAAK,MAAOW,aAAc,GAAIC,IAAK,EAAGC,IAAK,IAAKZ,MAAO,MAAOa,YAAa,WAC7E,CAAEd,IAAK,WAAYC,MAAO,WAAYa,YAAa,YACnD,CAAEd,IAAK,YAAaC,MAAO,YAAaa,YAAa,YACrD,CACId,IAAK,gBACLC,MAAO,iBACPc,QAAShB,EACTe,YAAa,QACbH,aAAcZ,EAAW,GAAGG,MAC5Bc,2BAA4B,CAAEX,UAAW,yBAjBrDY,EADJ,EACIA,WACSC,EAFb,EAEIC,MAASD,SACTE,EAHJ,EAGIA,WAqBJC,EAAAA,EAAAA,YAAU,WACND,EAAU,WAAY,iBAAkBF,EAASI,UAD5C,GAEN,CAACJ,EAASI,YAEb,IAAMA,EAAuBf,EAAAA,SAAc,WACvC,OAAOW,EAASI,UAAa,CAAEC,KAAML,EAASM,cAAeC,QAAS,qBAAsC,IADnF,GAE1B,CAACP,EAASI,UAAWJ,EAASM,gBAEjC,OACIjB,EAAAA,cAACmB,EAAAA,EAAD,CACIC,SAAU9B,EACV+B,QACIrB,EAAAA,cAAAA,MAAAA,CAAKF,UAAU,SACXE,EAAAA,cAACsB,EAAAA,EAAD,CACI5B,MAAM,gBACNW,IAAKkB,OAAOZ,EAASN,KACrBC,IAAKiB,OAAOZ,EAASL,KACrBkB,WAAY,SAACC,EAAGC,GAAJ,OAAuBzB,EAASyB,EAAQH,OAAOZ,EAASL,KAAOX,EAAQ,EAJvF,EAKIgC,WAAY,SAACF,EAAGG,GAAJ,OAAuB3B,EAAS2B,EAAQL,OAAOZ,EAASN,KAAOV,EAAQ,EALvF,EAMIkC,WAAYlB,EAASkB,SACrBlC,MAAOA,EACPoB,UAAWA,KAIvBe,KAnES,qIAoETnB,SAAUD,KArDY,IA0DlC,W,+BChFA,kmK","sources":["webpack://react-components-docs/./src/pages/docs/stepper.tsx","webpack://react-components-docs/../lib/src/Stepper/Stepper.tsx?a112"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport Docs from \"@common/Docs\";\nimport { DynamicFormOption, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { Stepper } from \"@sebgroup/react-components/Stepper\";\nimport { Indicator, IndicatorType } from \"@sebgroup/react-components/FeedbackIndicator\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Stepper/Stepper\");\nconst code: string = `<Stepper\n    label={\"stepper label\"}\n    min={0}\n    max={100}\n    onIncrease={null}\n    onDecrease={null}\n    value={0}\n/>`;\n\nconst indicators: Array<DynamicFormOption<IndicatorType>> = [\n    { key: \"error\", label: \"danger\", value: \"danger\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"success\", label: \"success\", value: \"success\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"warning\", label: \"warning\", value: \"warning\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\n\nconst StepTrackerPage: React.FC = React.memo(() => {\n    const [value, setValue] = React.useState<number>(0);\n\n    const {\n        renderForm,\n        state: { controls },\n        setHidden,\n    } = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"min\", initialValue: 0, min: 0, max: 100, label: \"Min\", controlType: \"Stepper\" },\n                { key: \"max\", initialValue: 10, min: 0, max: 100, label: \"Max\", controlType: \"Stepper\" },\n                { key: \"disabled\", label: \"disabled\", controlType: \"Checkbox\" },\n                { key: \"indicator\", label: \"indicator\", controlType: \"Checkbox\" },\n                {\n                    key: \"indicatorType\",\n                    label: \"Indicator type\",\n                    options: indicators,\n                    controlType: \"Radio\",\n                    initialValue: indicators[0].value,\n                    formElementAdditionalProps: { className: \"indent pl-3 pt-2\" },\n                },\n            ],\n        },\n    ]);\n\n    useEffect(() => {\n        setHidden(\"controls\", \"indicatorType\", !controls.indicator);\n    }, [controls.indicator]);\n\n    const indicator: Indicator = React.useMemo(() => {\n        return controls.indicator ? ({ type: controls.indicatorType, message: \"Indicator message\" } as Indicator) : null;\n    }, [controls.indicator, controls.indicatorType]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100\">\n                    <Stepper\n                        label=\"Element label\"\n                        min={Number(controls.min)}\n                        max={Number(controls.max)}\n                        onIncrease={(_, isMax: boolean) => setValue(isMax ? Number(controls.max) : value + 1)}\n                        onDecrease={(_, isMin: boolean) => setValue(isMin ? Number(controls.min) : value - 1)}\n                        disabled={!!controls.disabled}\n                        value={value}\n                        indicator={indicator}\n                    />\n                </div>\n            }\n            code={code}\n            controls={renderForm()}\n        />\n    );\n});\n\nexport default StepTrackerPage;\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport { randomId } from \\\"@sebgroup/frontend-tools/randomId\\\";\\nimport { FeedbackIndicator, Indicator } from \\\"../FeedbackIndicator\\\";\\nimport \\\"./stepper.scss\\\";\\n\\nexport type StepperProps = JSX.IntrinsicElements[\\\"input\\\"] & {\\n    /** Element label */\\n    label?: string;\\n    /** maximum value for the element */\\n    max: number;\\n    /** minimum value for the element */\\n    min: number;\\n    /** callback when element value is decreased */\\n    onDecrease: (event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLDivElement>, isMin?: boolean) => void;\\n    /** callback when element value is increased */\\n    onIncrease: (event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLDivElement>, isMax?: boolean) => void;\\n    /** Feedback indicator */\\n    indicator?: Indicator;\\n    /** Props for the wrapper element (div) */\\n    wrapperProps?: JSX.IntrinsicElements[\\\"div\\\"];\\n    /** configuration for accessiblity texts */\\n    accessibilityConfigs?: {\\n        decrementText: string;\\n        incrementText: string;\\n        currentValueText: string;\\n    };\\n};\\n\\n/** A stepper makes it easier to input values that are in a narrow range */\\nexport const Stepper: React.FC<StepperProps> = React.forwardRef(\\n    (\\n        {\\n            label,\\n            onDecrease,\\n            onIncrease,\\n            indicator,\\n            wrapperProps = {},\\n            accessibilityConfigs = { decrementText: \\\"Decrease by 1\\\", incrementText: \\\"Increase by 1\\\", currentValueText: \\\"Current value is \\\" },\\n            ...props\\n        }: StepperProps,\\n        ref: React.ForwardedRef<HTMLInputElement>\\n    ) => {\\n        const [id, setId] = React.useState<string>(\\\"\\\");\\n        const labelId: string = randomId(\\\"stepper-label-\\\");\\n\\n        const isDecrementDisabled: boolean = props.disabled || props.value === props.min;\\n\\n        const onDecrement = (event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLDivElement>, isMin: boolean = false) => {\\n            return isDecrementDisabled ? null : onDecrease(event, isMin);\\n        };\\n\\n        const isIncrementDisabled: boolean = props.disabled || props.value === props.max;\\n\\n        const onIncrement = (event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLDivElement>, isMax: boolean = false) => {\\n            return isIncrementDisabled ? null : onIncrease(event, isMax);\\n        };\\n\\n        const onKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\\n            event.preventDefault();\\n            switch (event.key) {\\n                case \\\"ArrowDown\\\":\\n                case \\\"ArrowLeft\\\":\\n                    onDecrement(event);\\n                    break;\\n                case \\\"End\\\":\\n                    onDecrement(event, true);\\n                    break;\\n                case \\\"ArrowUp\\\":\\n                case \\\"ArrowRight\\\":\\n                    onIncrement(event);\\n                    break;\\n                case \\\"Home\\\":\\n                    onIncrement(event, true);\\n                    break;\\n            }\\n        };\\n\\n        React.useEffect(() => {\\n            setId(props.id ? props.id : randomId(\\\"stepper-\\\"));\\n        }, [props.id]);\\n\\n        return (\\n            <div {...wrapperProps} className={classnames(\\\"rc custom-stepper\\\", wrapperProps.className)}>\\n                {label && (\\n                    <label className=\\\"custom-label\\\" htmlFor={id} id={labelId}>\\n                        {label}\\n                    </label>\\n                )}\\n                <FeedbackIndicator {...indicator}>\\n                    <div className={classnames(\\\"stepper-container\\\", { disabled: props.disabled })}>\\n                        <button className={classnames(\\\"stepper-decrement\\\", { disabled: isDecrementDisabled })} onClick={onDecrement} tabIndex={-1} aria-label={accessibilityConfigs?.decrementText}>\\n                            <span>&#8722;</span>\\n                        </button>\\n                        <div\\n                            className=\\\"stepper-preview\\\"\\n                            role=\\\"spinbutton\\\"\\n                            tabIndex={0}\\n                            onKeyDown={onKeyDown}\\n                            aria-labelledby={labelId}\\n                            aria-valuenow={props.value as number}\\n                            aria-valuetext={`${accessibilityConfigs.currentValueText}${props.value}`}\\n                            aria-valuemin={props.min}\\n                            aria-valuemax={props.max}\\n                        >\\n                            {props.value}\\n                        </div>\\n                        <button className={classnames(\\\"stepper-increment\\\", { disabled: isIncrementDisabled })} onClick={onIncrement} tabIndex={-1} aria-label={accessibilityConfigs?.incrementText}>\\n                            <span>&#43;</span>\\n                        </button>\\n                    </div>\\n                </FeedbackIndicator>\\n                <input {...props} ref={ref} id={id} type=\\\"number\\\" readOnly={true} className={classnames(\\\"stepper-input\\\", props.className)} />\\n            </div>\\n        );\\n    }\\n);\\n\";"],"names":["importString","require","indicators","key","label","value","additionalProps","wrapperProps","className","StepTrackerPage","React","setValue","useDynamicForm","items","initialValue","min","max","controlType","options","formElementAdditionalProps","renderForm","controls","state","setHidden","useEffect","indicator","type","indicatorType","message","Docs","mainFile","example","Stepper","Number","onIncrease","_","isMax","onDecrease","isMin","disabled","code"],"sourceRoot":""}