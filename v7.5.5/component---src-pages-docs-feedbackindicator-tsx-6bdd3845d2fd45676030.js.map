{"version":3,"file":"component---src-pages-docs-feedbackindicator-tsx-6bdd3845d2fd45676030.js","mappings":"gNAOMA,EAAuBC,EAAQ,OAG/BC,EAAoD,CACtD,CAAEC,MAAO,SAAUC,MAAO,SAAUC,IAAK,UACzC,CAAEF,MAAO,UAAWC,MAAO,UAAWC,IAAK,WAC3C,CAAEF,MAAO,UAAWC,MAAO,UAAWC,IAAK,YAwC/C,UArCwC,WACpC,OAGIC,EAAAA,EAAAA,GAAe,CACf,CACID,IAAK,WACLE,MAAO,CACH,CAAEF,IAAK,UAAWG,aAAc,oBAAqBL,MAAO,UAAWM,YAAa,UAAWC,YAAa,QAC5G,CAAEL,IAAK,WAAYG,cAAc,EAAOL,MAAO,WAAYO,YAAa,YACxE,CAAEL,IAAK,OAAQG,aAAcN,EAAS,GAAGE,MAAOD,MAAO,OAAQQ,QAAST,EAAUQ,YAAa,aARvGE,EADJ,EACIA,WACSC,EAFb,EAEIC,MAASD,SAYb,OACIE,EAAAA,cAACC,EAAAA,EAAD,CACIC,SAAUjB,EACVkB,QACIH,EAAAA,cAAAA,MAAAA,CAAKI,UAAU,SACXJ,EAAAA,cAACK,EAAAA,EAAD,CAAmBC,GAAG,YAAYC,KAAMT,EAASS,KAAuBC,QAASV,aAAF,EAAEA,EAAUU,QAASC,SAAUX,EAASW,UACnHT,EAAAA,cAACU,EAAAA,EAAD,CAAU,mBAAiB,YAAY,eAAmD,WAApCZ,EAASS,MAA/D,cAGAP,EAAAA,cAACW,EAAAA,EAAD,CAAa,mBAAiB,YAAY,eAAmD,WAApCb,EAASS,MAAlE,kBAGAP,EAAAA,cAAAA,MAAAA,CAAKI,UAAU,aAAf,qBAIZQ,KAvCS,8DAwCTd,SAAUD,KAhCtB,C,+BChBA,ktE","sources":["webpack://react-components-docs/./src/pages/docs/feedbackindicator.tsx","webpack://react-components-docs/../lib/src/FeedbackIndicator/FeedbackIndicator.tsx?50f2"],"sourcesContent":["import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { FeedbackIndicator, IndicatorType } from \"@sebgroup/react-components/FeedbackIndicator\";\nimport { DynamicFormOption, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { Checkbox } from \"@sebgroup/react-components/Checkbox\";\nimport { RadioButton } from \"@sebgroup/react-components/RadioButton\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/FeedbackIndicator/FeedbackIndicator\");\nconst code: string = `<FeedbackIndicator toggle={toggle}>text</FeedbackIndicator>`;\n\nconst typeList: Array<DynamicFormOption<IndicatorType>> = [\n    { label: \"danger\", value: \"danger\", key: \"danger\" },\n    { label: \"success\", value: \"success\", key: \"success\" },\n    { label: \"warning\", value: \"warning\", key: \"warning\" },\n];\n\nconst FeedbackIndicatorPage: React.FC = () => {\n    const {\n        renderForm,\n        state: { controls },\n    } = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"message\", initialValue: \"Indicator message\", label: \"Message\", placeholder: \"Message\", controlType: \"Text\" },\n                { key: \"noBorder\", initialValue: false, label: \"noBorder\", controlType: \"Checkbox\" },\n                { key: \"type\", initialValue: typeList[0].value, label: \"Type\", options: typeList, controlType: \"Radio\" },\n            ],\n        },\n    ]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100\">\n                    <FeedbackIndicator id=\"indicator\" type={controls.type as IndicatorType} message={controls?.message} noBorder={controls.noBorder as boolean}>\n                        <Checkbox aria-describedby=\"indicator\" aria-invalid={(controls.type as IndicatorType) === \"danger\"}>\n                            A Checkbox\n                        </Checkbox>\n                        <RadioButton aria-describedby=\"indicator\" aria-invalid={(controls.type as IndicatorType) === \"danger\"}>\n                            A Radio button\n                        </RadioButton>\n                        <div className=\"px-3 pb-2\">Some content ðŸ¦¾</div>\n                    </FeedbackIndicator>\n                </div>\n            }\n            code={code}\n            controls={renderForm()}\n        />\n    );\n};\n\nexport default FeedbackIndicatorPage;\n","export default \"import classnames from \\\"classnames\\\";\\nimport React from \\\"react\\\";\\nimport \\\"./feedback-indicator.scss\\\";\\n\\nexport type IndicatorType = \\\"danger\\\" | \\\"warning\\\" | \\\"success\\\" | \\\"none\\\";\\nexport type Indicator = FeedbackIndicatorProps;\\n\\ntype FeedbackIndicatorProps = React.PropsWithChildren<{\\n    /** The type of the indicator. Available values: \\\"danger\\\" | \\\"warning\\\" | \\\"success\\\" */\\n    type: IndicatorType;\\n    /** The indicator message. `children` can also be used instead. */\\n    message?: React.ReactNode;\\n    /** Disable feedback indicator border */\\n    noBorder?: boolean;\\n    /** The feedback indicator identifier. */\\n    id?: string;\\n}>;\\n/** A helper component to display feedback for children content */\\nexport const FeedbackIndicator: React.FC<FeedbackIndicatorProps> = (props: FeedbackIndicatorProps) => {\\n    const [indicatorValue, setIndicatorValue] = React.useState<number>(0);\\n\\n    React.useEffect(() => {\\n        switch (props.type) {\\n            case \\\"danger\\\":\\n                setIndicatorValue(10);\\n                break;\\n            case \\\"warning\\\":\\n                setIndicatorValue(50);\\n                break;\\n            case \\\"success\\\":\\n                setIndicatorValue(100);\\n                break;\\n            default:\\n                setIndicatorValue(0);\\n        }\\n    }, [props.type]);\\n\\n    function wrap(children: any) {\\n        const Child: any = React.Children.toArray(children)[0];\\n\\n        return React.isValidElement(Child) ? (\\n            <>\\n                {React.cloneElement<any>(Child as any, {\\n                    className: classnames((Child.props as any).className, `rc-d feedback feedback-${indicatorValue}`, { \\\"no-border\\\": props.noBorder }, { \\\"mb-0\\\": props.message }),\\n                })}\\n                {props.type && (\\n                    <p className={classnames(\\\"rc-d feedback-message\\\")} role=\\\"alert\\\" id={props.id}>\\n                        {props.message}\\n                    </p>\\n                )}\\n            </>\\n        ) : (\\n            Child\\n        );\\n    }\\n\\n    const count: number = React.Children.count(props.children);\\n\\n    return count ? (props.type ? wrap(count > 1 ? <div>{props.children}</div> : props.children) : props.children) : null;\\n};\\n\";"],"names":["importString","require","typeList","label","value","key","useDynamicForm","items","initialValue","placeholder","controlType","options","renderForm","controls","state","React","Docs","mainFile","example","className","FeedbackIndicator","id","type","message","noBorder","Checkbox","RadioButton","code"],"sourceRoot":""}