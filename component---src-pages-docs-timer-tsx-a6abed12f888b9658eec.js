"use strict";(self.webpackChunkreact_components_docs=self.webpackChunkreact_components_docs||[]).push([[3186],{7653:function(n,e,t){t.r(e),t.d(e,{default:function(){return f}});var r=t(27378),a=t(2634),i=t(30808),o=t(508),s=t.n(o),l=["duration","callback","timerPrefix","timerSuffix"],c=function(n){var e=n.duration,t=n.callback,a=n.timerPrefix,o=n.timerSuffix,c=(0,i.Z)(n,l),m=r.useState(),u=m[0],f=m[1],d=r.useState("00:00"),p=d[0],v=d[1],I=function(n){return(""+n).padStart(2,"0")},b=function(n){var e=n/1e3,t=e/60,r=Math.floor(e%60),a=Math.floor(t%60),i=Math.floor(t/60);return(i>0?i+":":"")+I(a)+":"+I(r)};return r.useEffect((function(){var n;return v(b(n=e)),f((function(){var e=setInterval((function(){(n-=1e3)>0?v(b(n)):(v(b(0)),clearInterval(e),null==t||t())}),1e3);return e})),function(){u&&(clearInterval(u),f(null))}}),[e]),r.createElement("div",Object.assign({},c,{className:s()("custom-timer",c.className),role:"timer","aria-live":"polite","aria-atomic":"true"}),a,p,o)},m=t(91448),u=t(12240),f=function(){var n=[{key:"controls",items:[{key:"duration",initialValue:9e4,label:"Duration (ms)",placeholder:"Duration",controlType:"Text"}]}],e=(0,m.b)(n),t=e.renderForm,i=e.state.controls;return r.createElement(a.Z,{mainFile:u,example:r.createElement(c,{duration:Number(i.duration)||9e4,callback:function(){}}),code:'<Timer duration={90000} callback={() => { console.log("TIMER ENDED callback"); }} />',controls:t()})}},12240:function(n,e,t){t.r(e),e.default='import React from "react";\nimport classnames from "classnames";\n\nexport type TimerProps = JSX.IntrinsicElements["div"] & {\n    /** Callback when timer ends */\n    callback?: VoidFunction;\n    /** Timer\'s duration in milliseconds */\n    duration?: number;\n    /** Additional timer prefix */\n    timerPrefix?: React.ReactNode;\n    /** Additional timer suffix */\n    timerSuffix?: React.ReactNode;\n};\n\nexport const Timer: React.FC<TimerProps> = ({ duration, callback, timerPrefix, timerSuffix, ...props }: TimerProps) => {\n    const [innerInterval, setInnerInterval] = React.useState<NodeJS.Timeout>();\n    const [timer, setTimer] = React.useState<string>("00:00");\n\n    const startInterval = (timeout: number): void => {\n        setTimer(formatMilitaryTime(timeout));\n        setInnerInterval(() => {\n            const newInterval = setInterval(() => {\n                timeout -= 1000;\n                if (timeout > 0) {\n                    setTimer(formatMilitaryTime(timeout));\n                } else {\n                    setTimer(formatMilitaryTime(0));\n                    clearInterval(newInterval);\n                    callback?.();\n                }\n            }, 1000);\n            return newInterval;\n        });\n    };\n\n    const clearInnerInterval = (): void => {\n        if (innerInterval) {\n            clearInterval(innerInterval);\n            setInnerInterval(null);\n        }\n    };\n\n    const formatTwoDigits = (time: number): string => `${time}`.padStart(2, "0");\n\n    const formatMilitaryTime = (milliseconds: number): string => {\n        const rawSeconds: number = milliseconds / 1000;\n        const rawMinutes: number = rawSeconds / 60;\n        const displaySeconds: number = Math.floor(rawSeconds % 60);\n        const displayMinutes: number = Math.floor(rawMinutes % 60); // get remainder minutes\n        const displayHours: number = Math.floor(rawMinutes / 60); // get converted hours\n        return (displayHours > 0 ? displayHours + ":" : "") + formatTwoDigits(displayMinutes) + ":" + formatTwoDigits(displaySeconds);\n    };\n\n    React.useEffect(() => {\n        startInterval(duration);\n        return () => {\n            clearInnerInterval();\n        };\n    }, [duration]);\n\n    return (\n        <div {...props} className={classnames("custom-timer", props.className)} role="timer" aria-live="polite" aria-atomic="true">\n            {timerPrefix}\n            {timer}\n            {timerSuffix}\n        </div>\n    );\n};\n'}}]);
//# sourceMappingURL=component---src-pages-docs-timer-tsx-a6abed12f888b9658eec.js.map