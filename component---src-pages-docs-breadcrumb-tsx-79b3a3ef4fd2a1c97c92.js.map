{"version":3,"file":"component---src-pages-docs-breadcrumb-tsx-79b3a3ef4fd2a1c97c92.js","mappings":"iQAYaA,EAAwCC,EAAAA,KACjDA,EAAAA,YAAiB,WAAmDC,GAA0C,IAA1FC,EAAyF,EAAzFA,WAAYC,EAA6E,EAA7EA,MAAUC,GAAmE,YACzG,OACIJ,EAAAA,cAAAA,MAAAA,OAAAA,OAAAA,CAAAA,EAASI,EAAT,CAAgBH,IAAKA,EAAK,aAAW,eACjCD,EAAAA,cAAAA,KAAAA,CAAIK,UAAWC,IAAW,aAAc,CAAE,mBAAoBH,KACzDH,EAAAA,SAAAA,IAAmBI,EAAMG,UAAU,SAACC,EAAgDC,GACjF,OAAO,iBAA0CD,GAC3CR,EAAAA,aAAwBQ,EAAO,CAC3BN,WAAYA,EACZQ,eAAgBD,IAAMT,EAAAA,SAAAA,QAAuBI,EAAMG,UAAUI,OAAS,EACtE,oBAAqBF,IAEzBD,CAPT,KAJjB,K,gCCASI,EAAgDZ,EAAAA,KACzDA,EAAAA,YAAiB,WAAmEC,GAA4C,IAAD,IAA3GY,KAAAA,OAA2G,MAApG,IAAoG,EAA/FC,EAA+F,EAA/FA,MAAOZ,EAAwF,EAAxFA,WAAeE,GAAyE,YAC3H,EAAkCJ,EAAAA,SAAuB,mBAAlDK,EAAP,KAAkBU,EAAlB,KAIA,OAFAf,EAAAA,WAAgB,kBAAMe,EAAaT,IAAW,CAAC,kBAAmB,CAAEU,OAAQZ,EAAMM,gBAAkBN,EAAMC,YAA1G,GAAwH,CAACD,EAAMM,eAAgBN,EAAMC,YAGjJL,EAAAA,cAAAA,KAAAA,OAAAA,OAAAA,CAAAA,EAAQI,EAAR,CAAeH,IAAKA,EAAKI,UAAWA,EAAW,eAAcD,EAAMM,eAAiBN,EAAM,iBAAmB,OAAS,OAClHJ,EAAAA,cAAAA,IAAAA,CAAGc,MAAOA,EAAOD,KAAMT,EAAMM,eAAiB,KAAOG,EAAM,oBAAmBT,EAAM,qBAAsBa,QAAUb,EAAMM,eAA8B,KAAbR,GACtIE,EAAMG,UARvB,K,WCTEW,EACFlB,EAAAA,cAAAA,MAAAA,CAAKmB,MAAM,6BAA6BC,MAAM,QAAQC,KAAK,eAAeC,QAAQ,YAAYC,MAAO,CAAEC,cAAe,YAAc,kBAAgB,YAAYC,KAAK,OACjKzB,EAAAA,cAAAA,QAAAA,CAAO0B,GAAG,aAAV,QACA1B,EAAAA,cAAAA,OAAAA,CAAM2B,EAAE,gRAIVC,EAAuBC,EAAQ,OAC/BC,EAA+B,CAACD,EAAQ,QA0C9C,EAnCiC,WAC7B,OAGIE,EAAAA,EAAAA,GAAe,CACf,CACIC,IAAK,WACLC,MAAO,CAAC,CAAED,IAAK,QAASE,MAAO,QAASC,YAAa,oBAAqBC,YAAa,gBAL/EC,EADhB,EACIC,WACSC,EAFb,EAEIC,MAASD,SAQb,OACIvC,EAAAA,cAACyC,EAAAA,EAAD,CACIC,aAAcH,EAASpC,MAAQ,OAAS,KACxCwC,SAAUf,EACVE,cAAeA,EACfc,QACI5C,EAAAA,cAACD,EAAD,CACIG,WAAY,SAAC2C,GACTA,EAAEC,iBACFC,MAAM,IAAIF,EAAEG,cAAclC,MAArB,YAHb,EAKIX,QAASoC,EAASpC,OAElBH,EAAAA,cAACY,EAAD,CAAgBE,MAAM,QAAQI,GAC9BlB,EAAAA,cAACY,EAAD,CAAgBE,MAAM,SAAtB,SACAd,EAAAA,cAACY,EAAD,CAAgBE,MAAM,QAAtB,SAGRmC,KAnCS,oOAoCTV,SAAUF,KA9BtB,C,+BCpBA,4+C,+BCAA,23C","sources":["webpack://react-components-docs/../lib/src/Breadcrumb/Breadcrumb.tsx","webpack://react-components-docs/../lib/src/Breadcrumb/BreadcrumbItem.tsx","webpack://react-components-docs/./src/pages/docs/breadcrumb.tsx","webpack://react-components-docs/../lib/src/Breadcrumb/Breadcrumb.tsx?0d5b","webpack://react-components-docs/../lib/src/Breadcrumb/BreadcrumbItem.tsx?f6ce"],"sourcesContent":["import React from \"react\";\nimport classnames from \"classnames\";\nimport { BreadcrumbItemProps } from \"./BreadcrumbItem\";\n\nexport type BreadcrumbProps = JSX.IntrinsicElements[\"nav\"] & {\n    /** Event handler triggered when one of the breadcrumb links is clicked */\n    onNavigate?: React.MouseEventHandler<HTMLAnchorElement>;\n    /** Enables the light version of the Breadcrumb */\n    light?: boolean;\n};\n\n/** A breadcrumb is a secondary navigation showing the website hierarchy. */\nexport const Breadcrumb: React.FC<BreadcrumbProps> = React.memo(\n    React.forwardRef(({ onNavigate, light, ...props }: BreadcrumbProps, ref: React.ForwardedRef<HTMLElement>) => {\n        return (\n            <nav {...props} ref={ref} aria-label=\"breadcrumb\">\n                <ol className={classnames(\"breadcrumb\", { \"breadcrumb-light\": light })}>\n                    {React.Children.map(props.children, (Child: React.ReactElement<BreadcrumbItemProps>, i: number) => {\n                        return React.isValidElement<BreadcrumbItemProps>(Child)\n                            ? React.cloneElement<any>(Child, {\n                                  onNavigate: onNavigate,\n                                  defaultChecked: i === React.Children.toArray(props.children).length - 1,\n                                  \"data-index-number\": i,\n                              })\n                            : Child;\n                    })}\n                </ol>\n            </nav>\n        );\n    })\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\n\nexport type BreadcrumbItemProps = JSX.IntrinsicElements[\"li\"] & {\n    /**\n     * The link to where it navigates to. This is used to enable openning the link in new tab.\n     * Additionally, you can access it in the event passed with the onNavigate callback\n     */\n    href?: string;\n    /** Event handler triggered when the link is clicked */\n    onNavigate?: React.MouseEventHandler<HTMLAnchorElement>;\n};\n\nexport const BreadcrumbItem: React.FC<BreadcrumbItemProps> = React.memo(\n    React.forwardRef(({ href = \"#\", title, onNavigate, ...props }: BreadcrumbItemProps, ref: React.ForwardedRef<HTMLLIElement>) => {\n        const [className, setClassName] = React.useState<string>(\"breadcrumb-item\");\n\n        React.useEffect(() => setClassName(classnames([\"breadcrumb-item\", { active: props.defaultChecked }, props.className])), [props.defaultChecked, props.className]);\n\n        return (\n            <li {...props} ref={ref} className={className} aria-current={props.defaultChecked ? props[\"aria-current\"] || \"page\" : null}>\n                <a title={title} href={props.defaultChecked ? null : href} data-index-number={props[\"data-index-number\"]} onClick={!props.defaultChecked ? onNavigate : null}>\n                    {props.children}\n                </a>\n            </li>\n        );\n    })\n);\n","import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { Breadcrumb, BreadcrumbItem } from \"@sebgroup/react-components/Breadcrumb\";\nimport { useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\n\nconst homeIcon: JSX.Element = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1.3em\" fill=\"currentColor\" viewBox=\"0 0 16 16\" style={{ verticalAlign: \"baseline\" }} aria-labelledby=\"homeTitle\" role=\"img\">\n        <title id=\"homeTitle\">Home</title>\n        <path d=\"M6.5 14.5v-3.505c0-.245.25-.495.5-.495h2c.25 0 .5.25.5.5v3.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.146-.354L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.354 1.146a.5.5 0 0 0-.708 0l-6 6A.5.5 0 0 0 1.5 7.5v7a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5z\" />\n    </svg>\n);\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Breadcrumb/Breadcrumb\");\nconst importedFiles: Array<string> = [require(\"!raw-loader!@sebgroup/react-components/Breadcrumb/BreadcrumbItem\")];\nconst code: string = `<Breadcrumb onNavigate={(e) => e.preventDefault(); /** Or do something else */}>\n    <BreadcrumbItem>Home</BreadcrumbItem>\n    <BreadcrumbItem>Users</BreadcrumbItem>\n    <BreadcrumbItem>Edit</BreadcrumbItem>\n</Breadcrumb>`;\n\nconst BreadcrumbPage: React.FC = () => {\n    const {\n        renderForm: renderControls,\n        state: { controls },\n    } = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [{ key: \"light\", label: \"light\", description: \"Enable light mode\", controlType: \"Checkbox\" }],\n        },\n    ]);\n\n    return (\n        <Docs\n            exampleTheme={controls.light ? \"dark\" : null}\n            mainFile={importString}\n            importedFiles={importedFiles}\n            example={\n                <Breadcrumb\n                    onNavigate={(e) => {\n                        e.preventDefault();\n                        alert(`'${e.currentTarget.title}' clicked`);\n                    }}\n                    light={!!controls.light}\n                >\n                    <BreadcrumbItem title=\"Home\">{homeIcon}</BreadcrumbItem>\n                    <BreadcrumbItem title=\"Users\">Users</BreadcrumbItem>\n                    <BreadcrumbItem title=\"Edit\">Edit</BreadcrumbItem>\n                </Breadcrumb>\n            }\n            code={code}\n            controls={renderControls()}\n        />\n    );\n};\n\nexport default BreadcrumbPage;\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport { BreadcrumbItemProps } from \\\"./BreadcrumbItem\\\";\\n\\nexport type BreadcrumbProps = JSX.IntrinsicElements[\\\"nav\\\"] & {\\n    /** Event handler triggered when one of the breadcrumb links is clicked */\\n    onNavigate?: React.MouseEventHandler<HTMLAnchorElement>;\\n    /** Enables the light version of the Breadcrumb */\\n    light?: boolean;\\n};\\n\\n/** A breadcrumb is a secondary navigation showing the website hierarchy. */\\nexport const Breadcrumb: React.FC<BreadcrumbProps> = React.memo(\\n    React.forwardRef(({ onNavigate, light, ...props }: BreadcrumbProps, ref: React.ForwardedRef<HTMLElement>) => {\\n        return (\\n            <nav {...props} ref={ref} aria-label=\\\"breadcrumb\\\">\\n                <ol className={classnames(\\\"breadcrumb\\\", { \\\"breadcrumb-light\\\": light })}>\\n                    {React.Children.map(props.children, (Child: React.ReactElement<BreadcrumbItemProps>, i: number) => {\\n                        return React.isValidElement<BreadcrumbItemProps>(Child)\\n                            ? React.cloneElement<any>(Child, {\\n                                  onNavigate: onNavigate,\\n                                  defaultChecked: i === React.Children.toArray(props.children).length - 1,\\n                                  \\\"data-index-number\\\": i,\\n                              })\\n                            : Child;\\n                    })}\\n                </ol>\\n            </nav>\\n        );\\n    })\\n);\\n\";","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\n\\nexport type BreadcrumbItemProps = JSX.IntrinsicElements[\\\"li\\\"] & {\\n    /**\\n     * The link to where it navigates to. This is used to enable openning the link in new tab.\\n     * Additionally, you can access it in the event passed with the onNavigate callback\\n     */\\n    href?: string;\\n    /** Event handler triggered when the link is clicked */\\n    onNavigate?: React.MouseEventHandler<HTMLAnchorElement>;\\n};\\n\\nexport const BreadcrumbItem: React.FC<BreadcrumbItemProps> = React.memo(\\n    React.forwardRef(({ href = \\\"#\\\", title, onNavigate, ...props }: BreadcrumbItemProps, ref: React.ForwardedRef<HTMLLIElement>) => {\\n        const [className, setClassName] = React.useState<string>(\\\"breadcrumb-item\\\");\\n\\n        React.useEffect(() => setClassName(classnames([\\\"breadcrumb-item\\\", { active: props.defaultChecked }, props.className])), [props.defaultChecked, props.className]);\\n\\n        return (\\n            <li {...props} ref={ref} className={className} aria-current={props.defaultChecked ? props[\\\"aria-current\\\"] || \\\"page\\\" : null}>\\n                <a title={title} href={props.defaultChecked ? null : href} data-index-number={props[\\\"data-index-number\\\"]} onClick={!props.defaultChecked ? onNavigate : null}>\\n                    {props.children}\\n                </a>\\n            </li>\\n        );\\n    })\\n);\\n\";"],"names":["Breadcrumb","React","ref","onNavigate","light","props","className","classnames","children","Child","i","defaultChecked","length","BreadcrumbItem","href","title","setClassName","active","onClick","homeIcon","xmlns","width","fill","viewBox","style","verticalAlign","role","id","d","importString","require","importedFiles","useDynamicForm","key","items","label","description","controlType","renderControls","renderForm","controls","state","Docs","exampleTheme","mainFile","example","e","preventDefault","alert","currentTarget","code"],"sourceRoot":""}