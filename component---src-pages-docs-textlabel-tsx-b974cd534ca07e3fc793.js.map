{"version":3,"file":"component---src-pages-docs-textlabel-tsx-b974cd534ca07e3fc793.js","mappings":"4PAYaA,EAAsCC,EAAAA,KAC/CA,EAAAA,YAAiB,WAA6CC,GAA6C,IAAvFC,EAAsF,EAAtFA,MAAOC,EAA+E,EAA/EA,MAAUC,GAAqE,YACtG,OACIJ,EAAAA,cAAAA,MAAAA,OAAAA,OAAAA,CAAAA,EAASI,EAAT,CAAgBH,IAAKA,EAAKI,UAAWC,IAAW,aAAcF,EAAMC,aAC/DH,GAASF,EAAAA,cAAAA,QAAAA,CAAOK,UAAU,gBAAgBH,GAC3CF,EAAAA,cAAAA,MAAAA,CAAKK,UAAU,sBAAsBF,GAJjD,K,WCyCJ,EAjDgCH,EAAAA,MAAW,WACvC,IAqB0BO,EAAgB,EArBpCC,EAAuBC,EAAQ,OAcrC,GAGIC,EAAAA,EAAAA,GAhBsC,CACtC,CACIH,IAAK,WACLI,MAAO,CACH,CACIT,MAAO,0BACPK,IAAK,aACLK,YAAa,SACbC,QAAS,CAAC,CAAEX,MAAO,8BAA+BC,MAAO,sBAAuBI,IAAK,6BAMjGO,EADJ,EACIA,WACSC,EAFb,EAEIC,MAASD,SASb,OACIf,EAAAA,cAACiB,EAAAA,EAAD,CACIC,SAAUV,EACVW,QACInB,EAAAA,cAACD,EAAD,CACII,OATUI,EAUW,uBATjC,QAAQ,EAAAQ,EAASK,kBAAjB,aAAOC,EAAmCC,MAAK,SAACC,GAAD,OAAkBA,IAAShB,CAAnE,KAUaP,EAAAA,cAAAA,EAAAA,SAAAA,KAAAA,cACeA,EAAAA,cAAAA,OAAAA,CAAMK,UAAU,qBAAhB,qBAGf,mBAGRH,MAAM,oBAGdsB,KAxBa,gEAyBbT,SAAUD,KA5CU,G,+BCLhC,47B","sources":["webpack://react-components-docs/../lib/src/TextLabel/TextLabel.tsx","webpack://react-components-docs/./src/pages/docs/textlabel.tsx","webpack://react-components-docs/../lib/src/TextLabel/TextLabel.tsx?8c48"],"sourcesContent":["import React from \"react\";\nimport \"./textlabel.scss\";\nimport classnames from \"classnames\";\n\nexport type TextLabelProps = JSX.IntrinsicElements[\"div\"] & {\n    /** Optional label for the textLabel can be a string or a template. */\n    label?: string | React.ReactNode;\n    /** Optional label for the text label can be a string or a template. */\n    value: string | number | React.ReactNode;\n};\n\n/** A text label is a component to display value with label */\nexport const TextLabel: React.FC<TextLabelProps> = React.memo(\n    React.forwardRef(({ label, value, ...props }: TextLabelProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n        return (\n            <div {...props} ref={ref} className={classnames(\"text-label\", props.className)}>\n                {label && <label className=\"custom-label\">{label}</label>}\n                <div className=\"custom-label-value\">{value}</div>\n            </div>\n        );\n    })\n);\n","import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { TextLabel } from \"@sebgroup/react-components/TextLabel\";\nimport { DynamicFormSection, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\n\nconst TextLabelPage: React.FC = React.memo(() => {\n    const importString: string = require(\"!raw-loader!@sebgroup/react-components/TextLabel/TextLabel\");\n    const fields: Array<DynamicFormSection> = [\n        {\n            key: \"controls\",\n            items: [\n                {\n                    label: \"Optional configurations\",\n                    key: \"checkboxes\",\n                    controlType: \"Option\",\n                    options: [{ label: \"Custom html label and value\", value: \"customLabelAndValue\", key: \"customLabelAndValue\" }],\n                },\n            ],\n        },\n    ];\n    const {\n        renderForm,\n        state: { controls },\n    } = useDynamicForm(fields);\n    const code: string = `<TextLabel value=\"Some text value\" label=\"Some text label\" />`;\n\n    /** check if key selected */\n    const checkSelectedKey = (key: string) => {\n        return (controls.checkboxes as string[])?.find((item: string) => item === key);\n    };\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <TextLabel\n                    value={\n                        checkSelectedKey(\"customLabelAndValue\") ? (\n                            <>\n                                400,000 kr <span className=\"pl-1 text-primary\">More description</span>\n                            </>\n                        ) : (\n                            \"Some text value\"\n                        )\n                    }\n                    label=\"Current savings\"\n                />\n            }\n            code={code}\n            controls={renderForm()}\n        />\n    );\n});\n\nexport default TextLabelPage;\n","export default \"import React from \\\"react\\\";\\nimport \\\"./textlabel.scss\\\";\\nimport classnames from \\\"classnames\\\";\\n\\nexport type TextLabelProps = JSX.IntrinsicElements[\\\"div\\\"] & {\\n    /** Optional label for the textLabel can be a string or a template. */\\n    label?: string | React.ReactNode;\\n    /** Optional label for the text label can be a string or a template. */\\n    value: string | number | React.ReactNode;\\n};\\n\\n/** A text label is a component to display value with label */\\nexport const TextLabel: React.FC<TextLabelProps> = React.memo(\\n    React.forwardRef(({ label, value, ...props }: TextLabelProps, ref: React.ForwardedRef<HTMLDivElement>) => {\\n        return (\\n            <div {...props} ref={ref} className={classnames(\\\"text-label\\\", props.className)}>\\n                {label && <label className=\\\"custom-label\\\">{label}</label>}\\n                <div className=\\\"custom-label-value\\\">{value}</div>\\n            </div>\\n        );\\n    })\\n);\\n\";"],"names":["TextLabel","React","ref","label","value","props","className","classnames","key","importString","require","useDynamicForm","items","controlType","options","renderForm","controls","state","Docs","mainFile","example","checkboxes","_controls$checkboxes","find","item","code"],"sourceRoot":""}