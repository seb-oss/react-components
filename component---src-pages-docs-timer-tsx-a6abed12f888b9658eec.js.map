{"version":3,"file":"component---src-pages-docs-timer-tsx-a6abed12f888b9658eec.js","mappings":"6RAcaA,EAA8B,SAAC,GAA4E,IAA1EC,EAAyE,EAAzEA,SAAUC,EAA+D,EAA/DA,SAAUC,EAAqD,EAArDA,YAAaC,EAAwC,EAAxCA,YAAgBC,GAAwB,YACnH,EAA0CC,EAAAA,WAAnCC,EAAP,KAAsBC,EAAtB,KACA,EAA0BF,EAAAA,SAAuB,SAA1CG,EAAP,KAAcC,EAAd,KA0BMC,EAAkB,SAACC,GAAD,OAA0B,GAAGA,GAAOC,SAAS,EAAG,IAAxE,EAEMC,EAAqB,SAACC,GACxB,IAAMC,EAAqBD,EAAe,IACpCE,EAAqBD,EAAa,GAClCE,EAAyBC,KAAKC,MAAMJ,EAAa,IACjDK,EAAyBF,KAAKC,MAAMH,EAAa,IACjDK,EAAuBH,KAAKC,MAAMH,EAAa,IACrD,OAAQK,EAAe,EAAIA,EAAe,IAAM,IAAMX,EAAgBU,GAAkB,IAAMV,EAAgBO,EANlH,EAgBA,OAPAZ,EAAAA,WAAgB,WAnCM,IAACiB,EAqCnB,OApCAb,EAASI,EADUS,EAoCLtB,IAlCdO,GAAiB,WACb,IAAMgB,EAAcC,aAAY,YAC5BF,GAAW,KACG,EACVb,EAASI,EAAmBS,KAE5Bb,EAASI,EAAmB,IAC5BY,cAAcF,GACdtB,SAAAA,IAPuB,GAS5B,KACH,OAAOsB,CAXK,IAmCT,WAnBHjB,IACAmB,cAAcnB,GACdC,EAAiB,MAiBrB,CAFJ,GAKG,CAACP,IAGAK,EAAAA,cAAAA,MAAAA,OAAAA,OAAAA,CAAAA,EAASD,EAAT,CAAgBsB,UAAWC,IAAW,eAAgBvB,EAAMsB,WAAYE,KAAK,QAAQ,YAAU,SAAS,cAAY,SAC/G1B,EACAM,EACAL,EAlDN,E,WCTD0B,EAAuBC,EAAQ,OA2BrC,EAxB4B,WACxB,IACMC,EAAoC,CACtC,CACIC,IAAK,WACLC,MAAO,CACH,CACID,IAAK,WACLE,aAPa,IAQbC,MAAO,gBACPC,YAAa,WACbC,YAAa,WAK7B,GAGIC,EAAAA,EAAAA,GAAeP,GAFfQ,EADJ,EACIA,WACSC,EAFb,EAEIC,MAASD,SAGb,OAAOnC,EAAAA,cAACqC,EAAAA,EAAD,CAAMC,SAAUd,EAAce,QAASvC,EAAAA,cAACN,EAAD,CAAOC,SAAU6C,OAAOL,EAASxC,WApBlD,IAoB6EC,SAAU,WAAQ,IAAM6C,KAvBjH,uFAuB6HN,SAAUD,KArB5J,C,+BCRA,49E","sources":["webpack://react-components-docs/../lib/src/Timer/Timer.tsx","webpack://react-components-docs/./src/pages/docs/timer.tsx","webpack://react-components-docs/../lib/src/Timer/Timer.tsx?1ba2"],"sourcesContent":["import React from \"react\";\nimport classnames from \"classnames\";\n\nexport type TimerProps = JSX.IntrinsicElements[\"div\"] & {\n    /** Callback when timer ends */\n    callback?: VoidFunction;\n    /** Timer's duration in milliseconds */\n    duration?: number;\n    /** Additional timer prefix */\n    timerPrefix?: React.ReactNode;\n    /** Additional timer suffix */\n    timerSuffix?: React.ReactNode;\n};\n\nexport const Timer: React.FC<TimerProps> = ({ duration, callback, timerPrefix, timerSuffix, ...props }: TimerProps) => {\n    const [innerInterval, setInnerInterval] = React.useState<NodeJS.Timeout>();\n    const [timer, setTimer] = React.useState<string>(\"00:00\");\n\n    const startInterval = (timeout: number): void => {\n        setTimer(formatMilitaryTime(timeout));\n        setInnerInterval(() => {\n            const newInterval = setInterval(() => {\n                timeout -= 1000;\n                if (timeout > 0) {\n                    setTimer(formatMilitaryTime(timeout));\n                } else {\n                    setTimer(formatMilitaryTime(0));\n                    clearInterval(newInterval);\n                    callback?.();\n                }\n            }, 1000);\n            return newInterval;\n        });\n    };\n\n    const clearInnerInterval = (): void => {\n        if (innerInterval) {\n            clearInterval(innerInterval);\n            setInnerInterval(null);\n        }\n    };\n\n    const formatTwoDigits = (time: number): string => `${time}`.padStart(2, \"0\");\n\n    const formatMilitaryTime = (milliseconds: number): string => {\n        const rawSeconds: number = milliseconds / 1000;\n        const rawMinutes: number = rawSeconds / 60;\n        const displaySeconds: number = Math.floor(rawSeconds % 60);\n        const displayMinutes: number = Math.floor(rawMinutes % 60); // get remainder minutes\n        const displayHours: number = Math.floor(rawMinutes / 60); // get converted hours\n        return (displayHours > 0 ? displayHours + \":\" : \"\") + formatTwoDigits(displayMinutes) + \":\" + formatTwoDigits(displaySeconds);\n    };\n\n    React.useEffect(() => {\n        startInterval(duration);\n        return () => {\n            clearInnerInterval();\n        };\n    }, [duration]);\n\n    return (\n        <div {...props} className={classnames(\"custom-timer\", props.className)} role=\"timer\" aria-live=\"polite\" aria-atomic=\"true\">\n            {timerPrefix}\n            {timer}\n            {timerSuffix}\n        </div>\n    );\n};\n","import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { Timer } from \"@sebgroup/react-components/Timer\";\nimport { DynamicFormSection, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Timer/Timer\");\nconst code: string = `<Timer duration={90000} callback={() => { console.log(\"TIMER ENDED callback\"); }} />`;\n\nconst TimerPage: React.FC = () => {\n    const defaultTimer: number = 90000;\n    const fields: Array<DynamicFormSection> = [\n        {\n            key: \"controls\",\n            items: [\n                {\n                    key: \"duration\",\n                    initialValue: defaultTimer,\n                    label: \"Duration (ms)\",\n                    placeholder: \"Duration\",\n                    controlType: \"Text\",\n                },\n            ],\n        },\n    ];\n    const {\n        renderForm,\n        state: { controls },\n    } = useDynamicForm(fields);\n\n    return <Docs mainFile={importString} example={<Timer duration={Number(controls.duration) || defaultTimer} callback={() => {}} />} code={code} controls={renderForm()} />;\n};\n\nexport default TimerPage;\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\n\\nexport type TimerProps = JSX.IntrinsicElements[\\\"div\\\"] & {\\n    /** Callback when timer ends */\\n    callback?: VoidFunction;\\n    /** Timer's duration in milliseconds */\\n    duration?: number;\\n    /** Additional timer prefix */\\n    timerPrefix?: React.ReactNode;\\n    /** Additional timer suffix */\\n    timerSuffix?: React.ReactNode;\\n};\\n\\nexport const Timer: React.FC<TimerProps> = ({ duration, callback, timerPrefix, timerSuffix, ...props }: TimerProps) => {\\n    const [innerInterval, setInnerInterval] = React.useState<NodeJS.Timeout>();\\n    const [timer, setTimer] = React.useState<string>(\\\"00:00\\\");\\n\\n    const startInterval = (timeout: number): void => {\\n        setTimer(formatMilitaryTime(timeout));\\n        setInnerInterval(() => {\\n            const newInterval = setInterval(() => {\\n                timeout -= 1000;\\n                if (timeout > 0) {\\n                    setTimer(formatMilitaryTime(timeout));\\n                } else {\\n                    setTimer(formatMilitaryTime(0));\\n                    clearInterval(newInterval);\\n                    callback?.();\\n                }\\n            }, 1000);\\n            return newInterval;\\n        });\\n    };\\n\\n    const clearInnerInterval = (): void => {\\n        if (innerInterval) {\\n            clearInterval(innerInterval);\\n            setInnerInterval(null);\\n        }\\n    };\\n\\n    const formatTwoDigits = (time: number): string => `${time}`.padStart(2, \\\"0\\\");\\n\\n    const formatMilitaryTime = (milliseconds: number): string => {\\n        const rawSeconds: number = milliseconds / 1000;\\n        const rawMinutes: number = rawSeconds / 60;\\n        const displaySeconds: number = Math.floor(rawSeconds % 60);\\n        const displayMinutes: number = Math.floor(rawMinutes % 60); // get remainder minutes\\n        const displayHours: number = Math.floor(rawMinutes / 60); // get converted hours\\n        return (displayHours > 0 ? displayHours + \\\":\\\" : \\\"\\\") + formatTwoDigits(displayMinutes) + \\\":\\\" + formatTwoDigits(displaySeconds);\\n    };\\n\\n    React.useEffect(() => {\\n        startInterval(duration);\\n        return () => {\\n            clearInnerInterval();\\n        };\\n    }, [duration]);\\n\\n    return (\\n        <div {...props} className={classnames(\\\"custom-timer\\\", props.className)} role=\\\"timer\\\" aria-live=\\\"polite\\\" aria-atomic=\\\"true\\\">\\n            {timerPrefix}\\n            {timer}\\n            {timerSuffix}\\n        </div>\\n    );\\n};\\n\";"],"names":["Timer","duration","callback","timerPrefix","timerSuffix","props","React","innerInterval","setInnerInterval","timer","setTimer","formatTwoDigits","time","padStart","formatMilitaryTime","milliseconds","rawSeconds","rawMinutes","displaySeconds","Math","floor","displayMinutes","displayHours","timeout","newInterval","setInterval","clearInterval","className","classnames","role","importString","require","fields","key","items","initialValue","label","placeholder","controlType","useDynamicForm","renderForm","controls","state","Docs","mainFile","example","Number","code"],"sourceRoot":""}