{"version":3,"file":"component---src-pages-docs-dynamic-forms-tsx-2a6b6447af7a8529cda8.js","mappings":"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","sources":["webpack://react-components-docs/./src/pages/docs/dynamic-forms.tsx","webpack://react-components-docs/../lib/src/Table/TableContextProvider.tsx","webpack://react-components-docs/../lib/src/Table/Table.tsx","webpack://react-components-docs/../lib/src/Table/parts/TableHeaderCell.tsx","webpack://react-components-docs/../lib/src/Table/parts/TableHeader.tsx","webpack://react-components-docs/../lib/src/Table/parts/TableBody.tsx","webpack://react-components-docs/../lib/src/Table/parts/TableCell.tsx","webpack://react-components-docs/../lib/src/Table/parts/TableRow.tsx","webpack://react-components-docs/../lib/src/Table/parts/helperFunctions.ts","webpack://react-components-docs/../lib/src/Table/table-typings.ts"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport Layout from \"@common/Layout\";\nimport { CodeSnippet } from \"@common/CodeSnippet\";\nimport { useDynamicForm, DynamicFormSection } from \"@sebgroup/react-components/hooks\";\nimport { Table, TableBody, TableCell, TableHeader, TableHeaderCell, TableRow } from \"@sebgroup/react-components/Table\";\nimport { Indicator } from \"@sebgroup/react-components/FeedbackIndicator\";\n\nconst DynamicForms: React.FC = React.memo(() => {\n    return (\n        <Layout>\n            <Helmet>\n                <title>Dynamic Forms - SEB React Components</title>\n            </Helmet>\n            <div className=\"container\">\n                <h1 className=\"pt-5 pb-3\">Dynamic Forms</h1>\n                <h4 className=\"font-weight-normal\">How to use Dynamic Forms Custom Hook to speed up building simple forms.</h4>\n\n                <div role=\"alert\" className=\"alert alert-warning rounded mt-3 py-3\">\n                    <strong>⚠ Dynamic Forms custom hook is still in beta stage so expect things to change (please provide feedback if you can)</strong>\n                </div>\n\n                <h2 className=\"pt-3 pb-3\">Basic Usage</h2>\n                <p>\n                    Import the hook, define the <code>DynamicFormSection</code>s and render the form.\n                </p>\n                <CodeSnippet language=\"javascript\">\n                    {`\nconst Component: React.FC = () => {\n    const sections: DynamicFormSection[] = [\n        {\n            title: \"Login\",\n            key: \"section-1-login\",\n            items: [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    controlType: \"Text\",\n                },\n                {\n                    key: \"email\",\n                    label: \"Email\",\n                    placeholder: \"name@domain.com\",\n                    controlType: \"Text\",\n                },\n                {\n                    key: \"user-accepted\",\n                    label: \"I understand\",\n                    initialValue: true,\n                    controlType: \"Checkbox\",\n                },\n            ],\n        },\n    ];\n\n    const { renderForm } = useDynamicForm(sections);\n\n    return <div>{renderForm()}</div>;\n};\n                    `}\n                </CodeSnippet>\n\n                <div className=\"p-3 rounded bg-white\">\n                    <Component />\n                </div>\n\n                <hr />\n\n                <h2 className=\"pt-3 pb-3\">Conditional rendering example</h2>\n                <p>Every form element can be hidden based on any condition you define yourself. Simply set the visibility for that key as shown in the code snippet below.</p>\n                <CodeSnippet language=\"javascript\">\n                    {`\nconst ComponentConditionalRender: React.FC = () => {\n    const sections: DynamicFormSection[] = [\n        {\n            title: \"Extra Info\",\n            key: \"section-2-extra-info\",\n            items: [\n                {\n                    key: \"have-additional-info\",\n                    label: \"I have additional information\",\n                    controlType: \"Checkbox\",\n                },\n                {\n                    key: \"info\",\n                    placeholder: \"Additional information\",\n                    controlType: \"Text\",\n                },\n            ],\n        },\n    ];\n\n    const { \n        renderForm, \n        meta: {\n            \"section-2-extra-info\": {\n                \"have-additional-info\": { hasTruthyValue }\n            }\n        }, \n        setHidden,\n    } = useDynamicForm(sections);\n\n    useEffect(() => {\n        setHidden(\"section-2-extra-info\", \"info\", !hasTruthyValue)\n    }, [hasTruthyValue])\n\n    return <div>{renderForm()}</div>;\n};\n                    `}\n                </CodeSnippet>\n                <div className=\"p-3 rounded bg-white\">\n                    <ComponentConditionalRender />\n                </div>\n\n                <hr />\n\n                <h2 className=\"pt-3 pb-3\">Form errors example</h2>\n                <p>\n                    Every form element defined can display an error message based on any validation rules you define yourself. Simply set the indicator for that key as shown in the code snippet below.\n                </p>\n                <CodeSnippet language=\"javascript\">\n                    {`\nconst FormWithErrors: React.FC = () => {\n    const sections: DynamicFormSection[] = [\n        {\n            key: \"section\",\n            items: [\n                {\n                    key: \"field\",\n                    description: \"This is a mandatory field, but it shouldn't be too long\",\n                    controlType: \"Text\",\n                },\n            ],\n        },\n    ];\n\n    const {\n        renderForm,\n        state: {\n            \"section\": {\n                \"field\": value\n            }\n        },\n        setIndicator\n    } = useDynamicForm(sections);\n\n    useEffect(() => {\n        let indicator: Indicator = {\n            type: \"success\",\n            message: \"Perfect :)\"\n        };\n        if (!value) {\n            indicator = {\n                type: \"danger\",\n                message: \"Please fill in this field!\"  \n            }\n        } else if ((value as string)?.length > 15) {\n            indicator = {\n                type: \"warning\",\n                message: \"Too long :(\"  \n            }\n        }\n\n        setIndicator(\"section\", \"field\", indicator);\n    }, [value]);\n\n    return (\n            <div>{renderForm()}</div>\n    );\n};\n                    `}\n                </CodeSnippet>\n                <div className=\"p-3 rounded bg-white\">\n                    <FormWithErrors />\n                </div>\n\n                <hr />\n\n                <h2 className=\"pt-3 pb-3\">Dynamic forms API</h2>\n\n                <h3 className=\"pt-3 pb-3\">\n                    <code>useDynamicForm</code>\n                </h3>\n                <p>\n                    <code>type DynamicFormInternalStateValue = string | string[] | Date | boolean | number | null;</code>\n                </p>\n                <p>\n                    <code>{`type DynamicFormMetaDataItem = { isVisible: boolean; hasIndicator: boolean; hasTruthyValue: boolean; }`}</code>\n                </p>\n                <Table>\n                    <TableHeader>\n                        <TableRow>\n                            <TableHeaderCell>Property name</TableHeaderCell>\n                            <TableHeaderCell>Value type</TableHeaderCell>\n                            <TableHeaderCell>Info</TableHeaderCell>\n                        </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <b>renderForm</b>\n                            </TableCell>\n                            <TableCell>\n                                <code>\n                                    <pre style={{ color: \"currentcolor\" }}>{`\n() => JSX.Element\n                                `}</pre>\n                                </code>\n                            </TableCell>\n                            <TableCell>The callback function which will render the entire form.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>state</b>\n                            </TableCell>\n                            <TableCell>\n                                <code>\n                                    <pre style={{ color: \"currentcolor\" }}>{`\n[k: string]: {\n    [k: string]: DynamicFormInternalStateValue;\n};\n                                `}</pre>\n                                </code>\n                            </TableCell>\n                            <TableCell>The current state of the form.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>patchState</b>\n                            </TableCell>\n                            <TableCell>\n                                <code>\n                                    <pre style={{ color: \"currentcolor\" }}>{`\n(section: string, key: string, value: DynamicFormInternalStateValue) => void;\n`}</pre>\n                                </code>\n                            </TableCell>\n                            <TableCell>A helper utility to change the value of a particular item.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>setIndicator</b>\n                            </TableCell>\n                            <TableCell>\n                                <code>\n                                    <pre style={{ color: \"currentcolor\" }}>{`\n(section: string, key: string, indicator: FeedbackIndicatorProps) => void;\n`}</pre>\n                                </code>\n                            </TableCell>\n                            <TableCell>A helper utility to set a feedback indicator of a particular item.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>setHidden</b>\n                            </TableCell>\n                            <TableCell>\n                                <code>\n                                    <pre style={{ color: \"currentcolor\" }}>{`\n(section: string, key: string, hidden: boolean) => void;\n`}</pre>\n                                </code>\n                            </TableCell>\n                            <TableCell>A helper utility to set visibility of a particular item.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>meta</b>\n                            </TableCell>\n                            <TableCell>\n                                <code>\n                                    <pre style={{ color: \"currentcolor\" }}>{`\n[k: string]: {\n    [k: string]: DynamicFormMetaDataItem;\n};\n                                `}</pre>\n                                </code>\n                            </TableCell>\n                            <TableCell>The metadata of each current field value in the form. Shows if each field is visible, has an indicator active or has a truthy value.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>info</b>\n                            </TableCell>\n                            <TableCell>\n                                <code>\n                                    <pre style={{ color: \"currentcolor\" }}>{`\n{ dirty: boolean; hasIndicators: boolean; isAllTruthy: boolean; }\n                                `}</pre>\n                                </code>\n                            </TableCell>\n                            <TableCell>Additional information about current state of the form.</TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n\n                <h3 className=\"pt-3 pb-3\">\n                    <code>DynamicFormSection</code>\n                </h3>\n                <Table>\n                    <TableHeader>\n                        <TableRow>\n                            <TableHeaderCell>Property name</TableHeaderCell>\n                            <TableHeaderCell>Optional</TableHeaderCell>\n                            <TableHeaderCell>Value type</TableHeaderCell>\n                            <TableHeaderCell>Info</TableHeaderCell>\n                        </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <b>key</b>\n                            </TableCell>\n                            <TableCell></TableCell>\n                            <TableCell>\n                                <code>string</code>\n                            </TableCell>\n                            <TableCell>Required unique id of this element</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>title</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>string</code>\n                            </TableCell>\n                            <TableCell>The title of the header of the section</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>items</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>{`Array<DynamicFormItem>`}</code>\n                            </TableCell>\n                            <TableCell>The form items that belong to that section.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>wrappingElement</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>{`\"div\" | \"section\" | \"none\"`}</code>\n                            </TableCell>\n                            <TableCell>The wrapping element (if any) for the form items of that section. Defaut: \"none\"'.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>additionalProps</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>{`{ [k: string]: any; }`}</code>\n                            </TableCell>\n                            <TableCell>Any additional element props to be mapped to the wrappingElement (if one is enabled).</TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n\n                <h3 className=\"pt-3 pb-3\">\n                    <code>DynamicFormItem</code>\n                </h3>\n                <Table>\n                    <TableHeader>\n                        <TableRow>\n                            <TableHeaderCell>Property name</TableHeaderCell>\n                            <TableHeaderCell>Optional</TableHeaderCell>\n                            <TableHeaderCell>Value type</TableHeaderCell>\n                            <TableHeaderCell>Info</TableHeaderCell>\n                        </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <b>key</b>\n                            </TableCell>\n                            <TableCell></TableCell>\n                            <TableCell>\n                                <code>string</code>\n                            </TableCell>\n                            <TableCell>Required unique id of this element</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>controlType</b>\n                            </TableCell>\n                            <TableCell></TableCell>\n                            <TableCell>\n                                <code>\"Hidden\" | \"Text\" | \"Textarea\" | \"Checkbox\" | \"Dropdown\" | \"Datepicker\" | \"Radio\" | \"Option\" | \"ErrorLabel\" | \"Stepper\"</code>\n                            </TableCell>\n                            <TableCell>Required type of element (or control). Default: \"Text\".</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>initialValue</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>{`string | string[] | Date | boolean | number | null`}</code>\n                            </TableCell>\n                            <TableCell>Optional initial value of the element when it gets created.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>label</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>string</code>\n                            </TableCell>\n                            <TableCell>An optional label displayead above the form field.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>description</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>string</code>\n                            </TableCell>\n                            <TableCell>An optional description displayed below the label and above the form field.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>multi</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>boolean</code>\n                            </TableCell>\n                            <TableCell>\n                                This will enable 'multiple' property for the <code>Dropdown</code> component\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>min</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>{`number | Date`}</code>\n                            </TableCell>\n                            <TableCell>\n                                <p>\n                                    The 'min' property which will applied to the following components: <code>Stepper</code>, <code>Datepicker</code>\n                                </p>\n                                <p>\n                                    This will also apply the 'minLength' property of <code>Text</code> and <code>TextArea</code>\n                                </p>\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>max</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>{`number | Date`}</code>\n                            </TableCell>\n                            <TableCell>\n                                <p>\n                                    The 'max' property which will applied to the following components: <code>Stepper</code>, <code>Datepicker</code>\n                                </p>\n                                <p>\n                                    This will also apply the 'maxLength' property of <code>Text</code> and <code>TextArea</code>\n                                </p>\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>placeholder</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>string</code>\n                            </TableCell>\n                            <TableCell>\n                                The 'placeholder' property which will applied to the following components: <code>Text</code>, <code>Textarea</code>\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>options</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>{`Array<DynamicFormOption>`}</code>\n                            </TableCell>\n                            <TableCell>\n                                Defines all the available options for the following components: <code>Dropdown</code>, <code>Radio</code>, <code>Option</code>\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>formElementAdditionalProps</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>{`{ [k: string]: any; }`}</code>\n                            </TableCell>\n                            <TableCell>\n                                Any additional element props to be mapped to the element. Depends on the <b>controlType</b>. Must be a valid prop for that element.\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>wrappingElement</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>{`\"div\" | \"section\" | \"none\"`}</code>\n                            </TableCell>\n                            <TableCell>The wrapping element (if any) for the form item. It wraps the label, element, error message and description in the chosen element. Defaut: \"none\"'.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>additionalProps</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>{`{ [k: string]: any; }`}</code>\n                            </TableCell>\n                            <TableCell>Any additional element props to be mapped to the wrappingElement (if one is enabled).</TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n\n                <h3 className=\"pt-3 pb-3\">\n                    <code>{`DynamicFormOption<T = any>`}</code>\n                </h3>\n                <Table>\n                    <TableHeader>\n                        <TableRow>\n                            <TableHeaderCell>Property name</TableHeaderCell>\n                            <TableHeaderCell>Optional</TableHeaderCell>\n                            <TableHeaderCell>Value type</TableHeaderCell>\n                            <TableHeaderCell>Info</TableHeaderCell>\n                        </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <b>key</b>\n                            </TableCell>\n                            <TableCell></TableCell>\n                            <TableCell>\n                                <code>string</code>\n                            </TableCell>\n                            <TableCell>Required unique id of this option</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>value</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>T</code>\n                            </TableCell>\n                            <TableCell>The value of the option.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>label</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>string</code>\n                            </TableCell>\n                            <TableCell>The label of the option.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>description</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>string</code>\n                            </TableCell>\n                            <TableCell>\n                                An optional description displayed below the label for the <code>Radio</code> component.\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>additionalProps</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>{`{ [k: string]: any; }`}</code>\n                            </TableCell>\n                            <TableCell>\n                                Any additional element props to be mapped to the underlying option element. Depends on the <b>controlType</b>. Must be a valid prop for that element.\n                            </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n            </div>\n        </Layout>\n    );\n});\n\nexport default DynamicForms;\n\nconst Component: React.FC = () => {\n    const sections: DynamicFormSection[] = [\n        {\n            title: \"Login\",\n            key: \"section-1-login\",\n            items: [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    controlType: \"Text\",\n                },\n                {\n                    key: \"email\",\n                    label: \"Email\",\n                    placeholder: \"name@domain.com\",\n                    controlType: \"Text\",\n                },\n                {\n                    key: \"user-accepted\",\n                    label: \"I understand\",\n                    initialValue: true,\n                    controlType: \"Checkbox\",\n                },\n            ],\n        },\n    ];\n\n    const { renderForm } = useDynamicForm(sections);\n\n    return <div>{renderForm()}</div>;\n};\n\nconst ComponentConditionalRender: React.FC = () => {\n    const sections: DynamicFormSection[] = [\n        {\n            title: \"Extra Info\",\n            key: \"section-2-extra-info\",\n            items: [\n                {\n                    key: \"have-additional-info\",\n                    label: \"I have additional information\",\n                    controlType: \"Checkbox\",\n                },\n                {\n                    key: \"info\",\n                    placeholder: \"Additional information\",\n                    controlType: \"Text\",\n                },\n            ],\n        },\n    ];\n\n    const {\n        renderForm,\n        meta: {\n            \"section-2-extra-info\": {\n                \"have-additional-info\": { hasTruthyValue },\n            },\n        },\n        setHidden,\n    } = useDynamicForm(sections);\n\n    useEffect(() => {\n        setHidden(\"section-2-extra-info\", \"info\", !hasTruthyValue);\n    }, [hasTruthyValue]);\n\n    return <div>{renderForm()}</div>;\n};\n\nconst FormWithErrors: React.FC = () => {\n    const sections: DynamicFormSection[] = [\n        {\n            key: \"section\",\n            items: [\n                {\n                    key: \"field\",\n                    description: \"This is a mandatory field, but it shouldn't be too long\",\n                    controlType: \"Text\",\n                },\n            ],\n        },\n    ];\n\n    const {\n        renderForm,\n        state: {\n            section: { field: value },\n        },\n        setIndicator,\n    } = useDynamicForm(sections);\n\n    useEffect(() => {\n        let indicator: Indicator = {\n            type: \"success\",\n            message: \"Perfect :)\",\n        };\n        if (!value) {\n            indicator = {\n                type: \"danger\",\n                message: \"Please fill in this field!\",\n            };\n        } else if ((value as string)?.length > 15) {\n            indicator = {\n                type: \"warning\",\n                message: \"Too long :(\",\n            };\n        }\n\n        setIndicator(\"section\", \"field\", indicator);\n    }, [value]);\n\n    return <div>{renderForm()}</div>;\n};\n","import React from \"react\";\nimport { SortDirection } from \"./table-typings\";\n\nexport interface SortedColumn<T = any> {\n    accessor: keyof T;\n    sortDirection: SortDirection;\n}\n\ninterface TableState {\n    sortedColumn: SortedColumn;\n    expandedRows: Array<string>;\n}\n\nexport type TableContextType = {\n    tableState: TableState;\n    setTableState: (newState: TableState) => void;\n    onRowSelect: (event: React.ChangeEvent<HTMLInputElement>, rowKey: string) => void;\n    onRowExpand: (isExpanded: boolean, rowKey: string) => void;\n    onSort: any;\n};\n\nconst defaultContext: TableContextType = {\n    tableState: {\n        sortedColumn: null,\n        expandedRows: [],\n    },\n    setTableState: null,\n    onRowSelect: null,\n    onRowExpand: null,\n    onSort: null,\n};\nexport const TableContext = React.createContext(defaultContext);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { SortedColumn, TableContext } from \"./TableContextProvider\";\nimport \"./table.scss\";\n\nexport type TableTheme = \"light\" | \"dark\";\n\nexport type TableProps = JSX.IntrinsicElements[\"table\"] & {\n    /** callback when row is selected */\n    onRowSelect?: (event: React.ChangeEvent<HTMLInputElement>, rowKey: string) => void;\n    /** callback when row is expanded */\n    onRowExpand?: (isExpanded: boolean, rowKey: string) => void;\n    /** table theme */\n    theme?: TableTheme;\n    /** callback when column is sorted */\n    onSort?: (sortedColumn: SortedColumn) => void;\n    /** preset sorted column */\n    sortedColumn?: SortedColumn;\n};\n\nexport const Table: React.FunctionComponent<TableProps> = React.memo(\n    React.forwardRef(({ onRowSelect, onRowExpand, onSort, sortedColumn, theme = \"light\", className, ...props }: TableProps, ref: React.ForwardedRef<HTMLTableElement>): React.ReactElement<void> => {\n        const [tableState, setTableState] = React.useState({ expandedRows: [], sortedColumn });\n        return (\n            <TableContext.Provider value={{ tableState, onSort, onRowSelect, onRowExpand, setTableState }}>\n                <table {...props} className={classnames(\"table\", className, theme)} ref={ref} />\n            </TableContext.Provider>\n        );\n    })\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { SortDirection } from \"../table-typings\";\nimport { SortedColumn, TableContext } from \"../TableContextProvider\";\n\nexport type TableHeaderCellProps<T = any> = JSX.IntrinsicElements[\"th\"] & {\n    accessor?: keyof T;\n    disableSort?: boolean;\n    sortDirection?: SortDirection;\n};\n\nconst TableHeaderCell: React.FC<TableHeaderCellProps> = React.forwardRef(\n    ({ accessor, disableSort, className, sortDirection, onClick, ...props }: TableHeaderCellProps, ref: React.ForwardedRef<HTMLTableCellElement>) => {\n        const context = React.useContext(TableContext);\n        const [sortedColumn, setSortedColumn] = React.useState<SortedColumn>(null);\n        const [sortOrder, setSortOrder] = React.useState<SortDirection>(SortDirection.ASC);\n        const [sortable, setSortable] = React.useState<boolean>(false);\n\n        /**\n         * get latest sort direction\n         * @param oldSortDirection current sort direction\n         */\n        const getSortDirection = (oldSortDirection: SortDirection): SortDirection => {\n            return oldSortDirection === SortDirection.ASC ? SortDirection.DESC : SortDirection.ASC;\n        };\n\n        /** on column sort */\n        const onSort = React.useCallback(() => {\n            const newSortedColumn: SortedColumn =\n                sortedColumn && sortedColumn.accessor === accessor ? { ...sortedColumn, sortDirection: getSortDirection(sortedColumn.sortDirection) } : { accessor, sortDirection: SortDirection.DESC };\n            context.setTableState({ ...context.tableState, sortedColumn: newSortedColumn });\n            !!newSortedColumn && context.onSort(newSortedColumn);\n        }, [sortedColumn, context]);\n\n        React.useEffect(() => {\n            setSortable(!disableSort && !!context.onSort);\n        }, [disableSort, context.onSort]);\n\n        React.useEffect(() => {\n            setSortedColumn(context.tableState.sortedColumn);\n        }, [context.tableState.sortedColumn]);\n\n        React.useEffect(() => {\n            if (sortDirection && context.onSort) {\n                context.setTableState({ ...context.tableState, sortedColumn: { accessor, sortDirection } });\n            }\n        }, [sortDirection, context.onSort]);\n\n        React.useEffect(() => {\n            setSortOrder(sortable && sortedColumn?.accessor === accessor ? sortedColumn?.sortDirection : null);\n        }, [sortable, sortedColumn]);\n\n        return (\n            <th\n                {...props}\n                className={classnames(className, { sort: sortable, \"sort-asc\": sortable && sortOrder === SortDirection.ASC, \"sort-desc\": sortable && sortOrder === SortDirection.DESC })}\n                onClick={sortable ? onSort : onClick}\n                ref={ref}\n            />\n        );\n    }\n);\n\nTableHeaderCell.displayName = \"TableHeaderCell\";\n\nexport { TableHeaderCell };\n","import React from \"react\";\nimport { TableRowProps } from \"./TableRow\";\n\nexport type TableHeaderProps = JSX.IntrinsicElements[\"thead\"];\n\nconst TableHeader: React.FC<TableHeaderProps> = React.forwardRef(({ ...props }: TableHeaderProps, ref: React.ForwardedRef<HTMLTableSectionElement>) => {\n    return (\n        <thead {...props} ref={ref}>\n            {React.Children.count(props.children) === 1 && React.isValidElement<TableRowProps>(props.children)\n                ? React.cloneElement<any>(props.children, { isHeaderRow: true, index: -1 })\n                : React.Children.map(props.children, (Child: React.ReactElement<any>, i: number) => {\n                      return React.isValidElement<TableRowProps>(Child) && (Child?.type as any)?.displayName === \"TableRow\"\n                          ? React.cloneElement<any>(Child, {\n                                index: i,\n                                hideSelect: !Child.props.isHeaderRow,\n                            })\n                          : Child;\n                  })}\n        </thead>\n    );\n});\n\nTableHeader.displayName = \"TableHeader\";\n\nexport { TableHeader };\n","import React from \"react\";\nimport { TableRowProps } from \"./TableRow\";\n\nexport type TableBodyProps = JSX.IntrinsicElements[\"tbody\"];\n\nconst TableBody: React.FC<TableBodyProps> = React.forwardRef(({ ...props }: TableBodyProps, ref: React.ForwardedRef<HTMLTableSectionElement>) => {\n    let parentKey: string;\n\n    /**\n     * clone table row by appending parent key to sub row if necessary\n     * @param Child react element\n     * @param index index number\n     */\n    const cloneTableRow = React.useCallback((Child: React.ReactElement<any>, index: number) => {\n        const isTableRow: boolean = React.isValidElement<React.FC<TableRowProps>>(Child) && (Child?.type as any)?.displayName === \"TableRow\";\n        if (isTableRow && !Child.props.isSubRow) {\n            parentKey = Child.props.uniqueKey;\n        }\n        return isTableRow ? React.cloneElement<any>(Child, { index, parentKey }) : Child;\n    }, []);\n\n    return (\n        <tbody {...props} ref={ref}>\n            {React.Children.map(props.children, (Child: React.ReactElement<any>, i: number) => {\n                if (Child?.type === React.Fragment) {\n                    return React.cloneElement<any>(Child, {\n                        children: React.Children.map(Child.props.children, (FragmentChild: React.ReactElement<any>, fragmentIndex: number) => cloneTableRow(FragmentChild, fragmentIndex)),\n                    });\n                } else {\n                    return cloneTableRow(Child, i);\n                }\n            })}\n        </tbody>\n    );\n});\n\nTableBody.displayName = \"TableBody\";\n\nexport { TableBody };\n","import React from \"react\";\n\nexport type TableCellProps<T = any> = JSX.IntrinsicElements[\"td\"];\n\nconst TableCell: React.FC<TableCellProps> = React.forwardRef(({ ...props }: TableCellProps, ref: React.ForwardedRef<HTMLTableCellElement>) => {\n    return <td {...props} ref={ref} />;\n});\n\nTableCell.displayName = \"TableCell\";\n\nexport { TableCell };\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Checkbox } from \"../../Checkbox\";\nimport { TableContext } from \"../TableContextProvider\";\nimport { TableHeaderCell, TableHeaderCellProps } from \"./TableHeaderCell\";\nimport { TableCell, TableCellProps } from \"./TableCell\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\n\nexport type TableRowProps<T = any> = JSX.IntrinsicElements[\"tr\"] & {\n    checked?: boolean;\n    indeterminate?: boolean;\n    isHeaderRow?: boolean;\n    hideSelect?: boolean;\n    uniqueKey?: string;\n    parentKey?: string;\n    isExpanded?: boolean;\n    isSubRow?: boolean;\n    collapseButtonProps?: JSX.IntrinsicElements[\"button\"];\n    checkboxProps?: JSX.IntrinsicElements[\"input\"];\n};\n\nconst angleDown: JSX.Element = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 256 512\">\n        <path d=\"M119.5 326.9L3.5 209.1c-4.7-4.7-4.7-12.3 0-17l7.1-7.1c4.7-4.7 12.3-4.7 17 0L128 287.3l100.4-102.2c4.7-4.7 12.3-4.7 17 0l7.1 7.1c4.7 4.7 4.7 12.3 0 17L136.5 327c-4.7 4.6-12.3 4.6-17-.1z\" />\n    </svg>\n);\nconst angleRightIcon: JSX.Element = (\n    <svg name=\"angle-right\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 192 512\">\n        <path d=\"M166.9 264.5l-117.8 116c-4.7 4.7-12.3 4.7-17 0l-7.1-7.1c-4.7-4.7-4.7-12.3 0-17L127.3 256 25.1 155.6c-4.7-4.7-4.7-12.3 0-17l7.1-7.1c4.7-4.7 12.3-4.7 17 0l117.8 116c4.6 4.7 4.6 12.3-.1 17z\" />\n    </svg>\n);\n\nconst TableRow: React.FC<TableRowProps> = React.forwardRef(\n    (\n        {\n            className,\n            isHeaderRow,\n            hideSelect,\n            uniqueKey,\n            parentKey,\n            checked = false,\n            indeterminate = false,\n            isSubRow = false,\n            isExpanded = false,\n            checkboxProps = {},\n            collapseButtonProps = {},\n            ...props\n        }: TableRowProps,\n        ref: React.ForwardedRef<HTMLTableRowElement>\n    ) => {\n        const context = React.useContext(TableContext);\n        const [uniqueId, setUniqueId] = React.useState<string>(uniqueKey);\n        const [isShown, setIsShown] = React.useState<boolean>(false);\n        const [expanded, setExpanded] = React.useState<boolean>(isExpanded);\n        const [isParentRow, setIsParentRow] = React.useState<boolean>(isExpanded);\n        const [columnProps, setColumnProps] = React.useState<TableHeaderCellProps | TableCellProps>(null);\n        const [expandedRows, setExpandedRows] = React.useState<Array<string>>(context.tableState?.expandedRows || []);\n\n        /** initiate default expanded row */\n        const initiateExpandedRows = React.useCallback(() => {\n            const newExpandedRows: Array<string> = [...expandedRows];\n            const expandedIndex: number = newExpandedRows.indexOf(uniqueId);\n            if (isExpanded && expandedIndex === -1) {\n                newExpandedRows.push(uniqueId);\n            } else if (expandedIndex > -1) {\n                const expandedIndex: number = newExpandedRows.indexOf(uniqueId);\n                newExpandedRows.splice(expandedIndex, 1);\n            }\n            context.setTableState({ ...context.tableState, expandedRows: newExpandedRows });\n            setExpandedRows(newExpandedRows);\n        }, [isExpanded, uniqueId]);\n\n        React.useEffect(() => {\n            setUniqueId(isHeaderRow ? \"all\" : uniqueKey || randomId(\"table-row\"));\n        }, [uniqueKey, isHeaderRow]);\n\n        React.useEffect(() => {\n            setExpandedRows(context.tableState.expandedRows || []);\n        }, [context.tableState.expandedRows]);\n\n        React.useEffect(() => {\n            setExpanded(isExpanded);\n            if (!isSubRow && !isHeaderRow && context.onRowExpand) {\n                initiateExpandedRows();\n            }\n        }, [isExpanded, initiateExpandedRows]);\n\n        React.useEffect(() => {\n            setColumnProps(isHeaderRow ? { disableSort: true } : null);\n        }, [isHeaderRow]);\n\n        React.useEffect(() => {\n            setIsParentRow(!(isHeaderRow || isSubRow));\n        }, [isHeaderRow, isSubRow]);\n\n        React.useEffect(() => {\n            if (context.onRowExpand) {\n                setIsShown(isSubRow && expandedRows.indexOf(parentKey) > -1);\n            }\n        }, [expandedRows]);\n\n        const Cell: React.FC<TableHeaderCellProps | TableCellProps> = isHeaderRow ? TableHeaderCell : TableCell;\n\n        return (\n            <tr {...props} ref={ref} className={classnames(className, { \"sub-row\": isSubRow, expanded: isExpanded, collapsible: isParentRow && !!context.onRowExpand, show: isShown })}>\n                {!!context.onRowExpand && (\n                    <Cell {...columnProps} className={classnames({ \"collapse-control\": isParentRow })}>\n                        {isParentRow && (\n                            <button {...collapseButtonProps} className={classnames(\"btn btn-sm\", collapseButtonProps.className)} onClick={() => context.onRowExpand(!isExpanded, uniqueId)}>\n                                <div className=\"icon-holder\">{expanded ? angleDown : angleRightIcon}</div>\n                            </button>\n                        )}\n                    </Cell>\n                )}\n                {!!context.onRowSelect && (\n                    <Cell {...columnProps} className={classnames({ \"select-control\": !(hideSelect || isSubRow) })}>\n                        {!(hideSelect || isSubRow) && (\n                            <Checkbox\n                                {...checkboxProps}\n                                checked={checked}\n                                ref={(input: HTMLInputElement) => {\n                                    if (input) {\n                                        input.indeterminate = indeterminate && !checked;\n                                    }\n                                }}\n                                name={`tb_checkbox_${uniqueId}`}\n                                id={`tb_checkbox_${uniqueId}`}\n                                onChange={(event: React.ChangeEvent<HTMLInputElement>) => context.onRowSelect(event, uniqueId)}\n                            />\n                        )}\n                    </Cell>\n                )}\n                {props.children}\n            </tr>\n        );\n    }\n);\n\nTableRow.displayName = \"TableRow\";\n\nexport { TableRow };\n","import { FilterColumn, GenericTableRow, SortDirection } from \"../table-typings\";\n\n/**\n * sum the total of columns or cols in a row\n * @param colsLength the length of the columns\n * @param useSelection add a column for selection checkboxes\n * @param useShowActionColumn add another column for action columns\n * @param useGroupBy add another columns for groupby\n */\nexport function sumCols(colsLength: number, useSelection?: boolean, useShowActionColumn?: boolean, useGroupBy?: boolean): number {\n    let sum = colsLength;\n\n    if (useSelection) {\n        sum = sum + 1;\n    }\n\n    if (useGroupBy) {\n        sum = sum + 1;\n    }\n    if (useShowActionColumn) {\n        sum = sum + 1;\n    }\n\n    return sum;\n}\n\n/**\n * sort array of tabke rows\n * @param items table rows array\n * @param columnName the target column name\n * @param sortDirection the sort direction\n * @return Array of tableRow\n */\nexport function sortArray<T = any>(items: Array<T> = [], columnName: keyof T, sortDirection: SortDirection): Array<T> {\n    const languages: Readonly<Array<string>> = window.navigator?.languages || [\"sw\", \"en\"];\n\n    const sortedItems: Array<any> = [...items].sort((firstItem: T, secondItem: T) => {\n        let result: number = 0;\n        if (sortDirection === SortDirection.ASC) {\n            if (isNaN(secondItem[columnName as string]) && isNaN(firstItem[columnName as string])) {\n                result = String(firstItem[columnName as string]).localeCompare(String(secondItem[columnName as string]), languages as Array<string>, { sensitivity: \"base\", ignorePunctuation: true });\n            } else {\n                result = firstItem[columnName as string] - secondItem[columnName as string];\n            }\n        } else {\n            if (isNaN(secondItem[columnName as string]) && isNaN(firstItem[columnName as string])) {\n                result = String(secondItem[columnName as string]).localeCompare(String(firstItem[columnName as string]), languages as Array<string>, { sensitivity: \"base\", ignorePunctuation: true });\n            } else {\n                result = secondItem[columnName as string] - firstItem[columnName as string];\n            }\n        }\n        return result;\n    });\n    return sortedItems;\n}\n\n/**\n *\n * @param data table data\n * @param filterColumns filter columns\n */\nexport function filterArrayByColumns<T = any>(data: Array<T>, filterColumns: Array<FilterColumn<T>>): Array<T> {\n    return data.filter((row: T) => {\n        return (\n            filterColumns.length === 0 ||\n            filterColumns.every((column: FilterColumn) => {\n                return Array.isArray(column.value) ? column.value.length === 0 || column.value.indexOf(row[column.accessor]) > -1 : row[column.accessor] === column.value;\n            })\n        );\n    });\n}\n\n/**\n * search text in array of table row\n * @param data the array of table rows\n * @param keyword The keyword to search in the array\n * @param searchFields the target field to search\n */\nexport function searchTextByColumns<T = any>(data: Array<T>, keyword: string, searchFields: Array<keyof T>): Array<T> {\n    return [...data].filter((row: T) => {\n        const searchText: string = String(keyword);\n\n        return searchFields?.some((searchColumn: keyof T) => {\n            let result: boolean = false;\n            const searchField: string = searchColumn as string;\n            const regEx: RegExp = new RegExp(searchText, \"gi\");\n            if (row[searchField] === null || row[searchField] === undefined) {\n                result = false;\n            } else if (typeof row[searchField] === \"string\") {\n                result = row[searchField].search(regEx) > -1;\n            } else if (typeof row[searchField] === \"number\") {\n                result = String(row[searchField]).search(regEx) !== -1;\n            }\n            return result;\n        });\n    });\n}\n\n/**\n * paginate data\n * @param data table data\n * @param offset page size\n * @param currentPage current page index\n */\nexport function paginate<T = any>(data: Array<T>, offset: number, currentPage: number) {\n    if (offset && data?.length > 0) {\n        const start: number = currentPage * offset;\n        const end: number = offset + start;\n\n        const currentPageData: Array<T> = data?.slice(start, end);\n        return currentPageData;\n    }\n    return data;\n}\n\nexport interface RowSelectOutput<T = any> {\n    data: Array<GenericTableRow<T>>;\n    isAllSelected: boolean;\n    isIndeterminate: boolean;\n}\n\n/**\n * on row select\n * @param event input event\n * @param data rows of data\n * @param rowUniqueAccessor row unique accessor\n * @param rowId row id value\n */\nexport function onRowSelect<T = any>(event: React.ChangeEvent<HTMLInputElement>, data: Array<GenericTableRow<T>>, rowUniqueAccessor: keyof GenericTableRow<T>, rowId: string): RowSelectOutput {\n    const target: HTMLInputElement = event.target;\n    let isAllSelected: boolean = true;\n    let isIndeterminate: boolean = false;\n    const newData: Array<GenericTableRow<T>> = data?.map((row: GenericTableRow<T>) => {\n        if (row[rowUniqueAccessor] === rowId || rowId === \"all\") {\n            row.checked = target.checked;\n        }\n        isAllSelected = isAllSelected && row.checked;\n        isIndeterminate = isIndeterminate || row.checked;\n        return row;\n    });\n    return {\n        data: newData,\n        isAllSelected: !!newData && isAllSelected,\n        isIndeterminate: isIndeterminate && !isAllSelected,\n    };\n}\n","export enum SortDirection {\n    ASC = \"ASC\",\n    DESC = \"DESC\",\n}\n\nexport interface FilterColumn<T = any> {\n    accessor: keyof T;\n    value: any;\n}\n\nexport type GenericTableRow<T = any> = T & {\n    id?: string;\n    checked?: boolean;\n    expanded?: boolean;\n    indeterminate?: boolean;\n};\n"],"names":["DynamicForms","React","Layout","Helmet","className","role","CodeSnippet","language","Component","ComponentConditionalRender","FormWithErrors","Table","TableHeader","TableRow","TableHeaderCell","TableBody","TableCell","style","color","renderForm","useDynamicForm","title","key","items","label","controlType","placeholder","initialValue","hasTruthyValue","meta","setHidden","useEffect","description","value","state","section","field","setIndicator","indicator","type","message","length","defaultContext","tableState","sortedColumn","expandedRows","setTableState","onRowSelect","onRowExpand","onSort","TableContext","ref","theme","props","Provider","classnames","accessor","disableSort","sortDirection","onClick","context","setSortedColumn","SortDirection","sortOrder","setSortOrder","sortable","setSortable","oldSortDirection","newSortedColumn","sort","displayName","children","isHeaderRow","index","Child","i","hideSelect","parentKey","cloneTableRow","isTableRow","isSubRow","uniqueKey","FragmentChild","fragmentIndex","angleDown","xmlns","viewBox","d","angleRightIcon","name","checked","indeterminate","isExpanded","checkboxProps","collapseButtonProps","uniqueId","setUniqueId","isShown","setIsShown","expanded","setExpanded","isParentRow","setIsParentRow","columnProps","setColumnProps","setExpandedRows","initiateExpandedRows","newExpandedRows","expandedIndex","indexOf","push","splice","randomId","Cell","collapsible","show","Checkbox","input","id","onChange","event","sortArray","columnName","languages","window","navigator","_toConsumableArray","firstItem","secondItem","isNaN","String","localeCompare","sensitivity","ignorePunctuation","filterArrayByColumns","data","filterColumns","filter","row","every","column","Array","isArray","searchTextByColumns","keyword","searchFields","searchText","some","searchColumn","result","searchField","regEx","RegExp","undefined","search","paginate","offset","currentPage","start","end","slice","rowUniqueAccessor","rowId","target","isAllSelected","isIndeterminate","newData","map"],"sourceRoot":""}