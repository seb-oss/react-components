"use strict";(self.webpackChunkreact_components_docs=self.webpackChunkreact_components_docs||[]).push([[2768],{59234:function(e,a,n){n.r(a);var o=n(27378),t=n(2634),i=n(91448),r=n(86369),l=n(29416),s=n(62818),d=[{key:"error",label:"danger",value:"danger",additionalProps:{wrapperProps:{className:"d-inline-block"}}},{key:"success",label:"success",value:"success",additionalProps:{wrapperProps:{className:"d-inline-block"}}},{key:"warning",label:"warning",value:"warning",additionalProps:{wrapperProps:{className:"d-inline-block"}}}],c=[{key:"individual",label:"Individual",value:"1",description:"Pass an indicator to individual radio buttons"},{key:"grouped",label:"Grouped",value:"2",description:"Pass an indicator to a RadioGroup or wrap a group of radio buttons with a FeedbackIndicator"}];a.default=function(){var e=o.useState("Yes"),a=e[0],n=e[1],u=(0,i.b)([{key:"controls",items:[{key:"inline",label:"inline",controlType:"Checkbox",initialValue:!1,description:"Displays them inline"},{key:"disabled",label:"disabled",controlType:"Checkbox",initialValue:!1},{key:"indicator",label:"indicator",controlType:"Checkbox",initialValue:!1},{key:"indicatorGrouping",label:"Indicator choices",controlType:"Radio",options:c,initialValue:c[0].value},{key:"indicatorType",label:"Indicator type",controlType:"Radio",options:d,initialValue:d[0].value}]}]),p=u.renderForm,m=u.state.controls,b=u.setHidden;(0,o.useEffect)((function(){b("controls","indicatorType",!m.indicator),b("controls","indicatorGrouping",!m.indicator)}),[m.indicator]);var v="1"===m.indicatorGrouping,h="2"===m.indicatorGrouping,y=o.useMemo((function(){return m.indicator?{type:m.indicatorType,message:"Indicator message"}:null}),[m.indicator,m.indicatorType]);return o.createElement(t.Z,{mainFile:s,example:o.createElement("div",{className:"w-100"},o.createElement(r.F,{name:"test-group",label:"Element label",value:a,onChange:function(e){return n(e.target.value)},disabled:!(null==m||!m.disabled),indicator:h?y:null},o.createElement(r.E,{value:"Yes",wrapperProps:m.inline?{className:"d-inline-block"}:{},indicator:v?y:null},"Yes",o.createElement("p",{className:"text-muted m-0"},"Express yourself here")),o.createElement(r.E,{value:"No",wrapperProps:m.inline?{className:"d-inline-block"}:{}},"No"),o.createElement(r.E,{value:"Maybe",wrapperProps:m.inline?{className:"d-inline-block"}:{}},"Maybe"))),code:'{/* Use them in our RadioGroup helper component */}\n<RadioGroup name="test-group" value={value} onChange={(e) => setValue(e.target.value)}>\n    <RadioButton value="Yes">Yes</RadioButton>\n    <RadioButton value="No">No</RadioButton>\n    <RadioButton value="Maybe">Maybe</RadioButton>\n</RadioGroup>\n\n{/* Use them individually */}\n<RadioButton name="group-name" value="Yes" checked={value === "Yes"} onChange={(e) => setValue(e.target.value)}>Yes</RadioButton>\n<RadioButton name="group-name" value="No" checked={value === "No"} onChange={(e) => setValue(e.target.value)}>No</RadioButton>\n<RadioButton name="group-name" value="Maybe" checked={value === "Maybe"} onChange={(e) => setValue(e.target.value)}>Maybe</RadioButton>',controls:p(),note:o.createElement(o.Fragment,null,o.createElement("h4",null,"Radio group"),o.createElement("p",null,"We have exported a helper component that makes it easy for you to compose a radio group. The component is name ",o.createElement("code",null,"RadioGroup"),". You can apply group level properties like ",o.createElement("code",null,"indicator")," or ",o.createElement("code",null,"disabled")),o.createElement("br",null),o.createElement("h4",null,"Radio buttons with description"),o.createElement("p",null,"Radio buttons can sometimes be rendered with a description, in order to do that, you can simply render a ",o.createElement("code",null,"p")," tag as children. It will look something like this:"),o.createElement(l.O,{className:"card",language:"jsx"},'<RadioButton>\n    Label\n    <p className="text-muted m-0">Description here</p>\n</RadioButton>'))})}},62818:function(e,a,n){n.r(a),a.default='import React from "react";\nimport classnames from "classnames";\nimport { randomId } from "@sebgroup/frontend-tools/randomId";\nimport { FeedbackIndicator, Indicator } from "../FeedbackIndicator";\nimport "./radio-button.scss";\n\nexport type RadioButtonProps<T = React.ReactText> = Omit<JSX.IntrinsicElements["input"], "value"> & {\n    /** Radio button value */\n    value?: T;\n    indicator?: Indicator;\n    /** Props for the div wrapper around the radio input element */\n    wrapperProps?: JSX.IntrinsicElements["div"];\n};\n/** A radio button allows a user to select a single item from a predefined list of options. Radio buttons are common to use in forms, i.e when you apply for a loan and need to enter "Yes" or "No". */\nexport const RadioButton: React.FC<RadioButtonProps> = React.forwardRef(({ children, indicator, wrapperProps = {}, ...props }: RadioButtonProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n    const [id, setId] = React.useState<string>("");\n\n    React.useEffect(() => setId(props.id || randomId("radiobtn-")), [props.id]);\n\n    return (\n        <FeedbackIndicator {...indicator}>\n            <div {...wrapperProps} className={classnames("rc radio-button", wrapperProps.className)}>\n                <div className="rc custom-radio custom-control">\n                    <input {...props} ref={ref} className={classnames("custom-control-input", props.className)} type="radio" id={id} />\n                    {children && (\n                        <label htmlFor={id} className="custom-control-label">\n                            {children}\n                        </label>\n                    )}\n                </div>\n            </div>\n        </FeedbackIndicator>\n    );\n});\n'}}]);
//# sourceMappingURL=component---src-pages-docs-radiobutton-tsx-6ed2a03206a63e668a59.js.map