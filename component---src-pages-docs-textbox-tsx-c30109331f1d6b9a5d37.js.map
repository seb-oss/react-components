{"version":3,"file":"component---src-pages-docs-textbox-tsx-c30109331f1d6b9a5d37.js","mappings":"+MAOMA,EAAuBC,EAAQ,OAG/BC,EAAuC,CAAEC,MAAO,OAAQC,MAAO,OAAQC,IAAK,QAC5EC,EAAgC,CAAEH,MAAO,OAAQC,MAAO,OAAQC,IAAK,QACrEE,EAAgC,CAAEJ,MAAO,OAAQC,MAAO,OAAQC,IAAK,QACrEG,EAAsD,CACxD,CAAEH,IAAK,QAASF,MAAO,SAAUC,MAAO,SAAUK,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,oBAChG,CAAEN,IAAK,UAAWF,MAAO,UAAWC,MAAO,UAAWK,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,oBACpG,CAAEN,IAAK,UAAWF,MAAO,UAAWC,MAAO,UAAWK,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,qBAGlGC,EAAwBC,EAAAA,MAAW,WACrC,MAA0BA,EAAAA,SAAuB,IAA1CT,EAAP,KAAcU,EAAd,KAEA,GAIIC,EAAAA,EAAAA,GAAe,CACf,CACIV,IAAK,WACLW,MAAO,CACH,CAAEX,IAAK,WAAYY,aAAcf,EAAkBE,MAAOD,MAAO,qBAAsBe,QAAS,CAAChB,EAAmBK,EAAYD,GAAaa,YAAa,YAC1J,CAAEd,IAAK,YAAaY,aAAcf,EAAkBE,MAAOD,MAAO,sBAAuBe,QAAS,CAAChB,EAAmBK,EAAYD,GAAaa,YAAa,YAC5J,CAAEd,IAAK,WAAYF,MAAO,WAAYgB,YAAa,YACnD,CAAEd,IAAK,YAAaF,MAAO,YAAagB,YAAa,YACrD,CACId,IAAK,gBACLF,MAAO,iBACPe,QAASV,EACTW,YAAa,QACbF,aAAcT,EAAW,GAAGJ,MAC5BgB,2BAA4B,CAAET,UAAW,yBAjBrDU,EADJ,EACIA,WACSC,EAFb,EAEIC,MAASD,SACTE,EAHJ,EAGIA,WAqBJC,EAAAA,EAAAA,YAAU,WACND,EAAU,WAAY,iBAAkBF,EAASI,UAD5C,GAEN,CAACJ,EAASI,YAEb,IAAMA,EAAuBb,EAAAA,SAAc,WACvC,OAAOS,EAASI,UAAY,CAAEC,KAAML,EAASM,cAAgCC,QAAS,qBAAwB,IADrF,GAE1B,CAACP,EAASI,UAAWJ,EAASM,gBAEjC,OACIf,EAAAA,cAACiB,EAAAA,EAAD,CACIC,SAAU/B,EACVgC,QACInB,EAAAA,cAAAA,MAAAA,CAAKF,UAAU,SACXE,EAAAA,cAACoB,EAAAA,EAAD,CACI7B,MAAOA,EACPD,MAAM,gBACN+B,YAAY,sBACZC,YAAY,YACZC,SAAUd,EAASe,WAAa9B,EAAWH,MAAQS,EAAAA,cAACyB,IAAD,MAAiBhB,EAASe,WAAa/B,EAAWF,MAAQ,KAAO,KACpHmC,UAAWjB,EAASkB,YAAcjC,EAAWH,MAAQS,EAAAA,cAACyB,IAAD,MAAiBhB,EAASkB,YAAclC,EAAWF,MAAQ,KAAO,KACvHqC,SAAU,SAACC,GAAD,OAAO5B,EAAS4B,EAAEC,OAAOvC,MAPvC,EAQIwC,WAAYtB,EAASsB,SACrBlB,UAAWA,KAIvBmB,KAhES,8DAiETvB,SAAUD,KAtDQ,IA2D9B,W,+BC9EA,ozI","sources":["webpack://react-components-docs/./src/pages/docs/textbox.tsx","webpack://react-components-docs/../lib/src/Textbox/Textbox.tsx?3ccd"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport Docs from \"@common/Docs\";\nimport SearchIcon from \"../../../static/icons/search.svg\";\nimport { Textbox } from \"@sebgroup/react-components/Textbox\";\nimport { DynamicFormOption, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { Indicator, IndicatorType } from \"@sebgroup/react-components/FeedbackIndicator\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Textbox/Textbox\");\nconst code: string = `<Textbox value=\"Some text value\" label=\"Some text label\" />`;\n\nconst defaultPortOption: DynamicFormOption = { label: \"None\", value: \"none\", key: \"none\" };\nconst textOption: DynamicFormOption = { label: \"Text\", value: \"text\", key: \"text\" };\nconst iconOption: DynamicFormOption = { label: \"Icon\", value: \"icon\", key: \"icon\" };\nconst indicators: Array<DynamicFormOption<IndicatorType>> = [\n    { key: \"error\", label: \"danger\", value: \"danger\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"success\", label: \"success\", value: \"success\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"warning\", label: \"warning\", value: \"warning\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\n\nconst TextboxPage: React.FC = React.memo(() => {\n    const [value, setValue] = React.useState<string>(\"\");\n\n    const {\n        renderForm,\n        state: { controls },\n        setHidden,\n    } = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"leftport\", initialValue: defaultPortOption.value, label: \"Left icon or text?\", options: [defaultPortOption, iconOption, textOption], controlType: \"Dropdown\" },\n                { key: \"rightport\", initialValue: defaultPortOption.value, label: \"Right icon or text?\", options: [defaultPortOption, iconOption, textOption], controlType: \"Dropdown\" },\n                { key: \"disabled\", label: \"disabled\", controlType: \"Checkbox\" },\n                { key: \"indicator\", label: \"indicator\", controlType: \"Checkbox\" },\n                {\n                    key: \"indicatorType\",\n                    label: \"Indicator type\",\n                    options: indicators,\n                    controlType: \"Radio\",\n                    initialValue: indicators[0].value,\n                    formElementAdditionalProps: { className: \"indent pl-3 pt-2\" },\n                },\n            ],\n        },\n    ]);\n\n    useEffect(() => {\n        setHidden(\"controls\", \"indicatorType\", !controls.indicator);\n    }, [controls.indicator]);\n\n    const indicator: Indicator = React.useMemo(() => {\n        return controls.indicator ? { type: controls.indicatorType as IndicatorType, message: \"Indicator message\" } : null;\n    }, [controls.indicator, controls.indicatorType]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100\">\n                    <Textbox\n                        value={value}\n                        label=\"Element label\"\n                        instruction=\"Element instruction\"\n                        placeholder=\"Type here\"\n                        leftSlot={controls.leftport === iconOption.value ? <SearchIcon /> : controls.leftport === textOption.value ? \"Kr\" : null}\n                        rightSlot={controls.rightport === iconOption.value ? <SearchIcon /> : controls.rightport === textOption.value ? \"Kr\" : null}\n                        onChange={(e) => setValue(e.target.value)}\n                        disabled={!!controls.disabled}\n                        indicator={indicator}\n                    />\n                </div>\n            }\n            code={code}\n            controls={renderForm()}\n        />\n    );\n});\n\nexport default TextboxPage;\n","export default \"import { randomId } from \\\"@sebgroup/frontend-tools/randomId\\\";\\nimport classnames from \\\"classnames\\\";\\nimport React from \\\"react\\\";\\nimport { FeedbackIndicator, Indicator } from \\\"../FeedbackIndicator\\\";\\nimport \\\"./textbox.scss\\\";\\n\\nexport type TextboxProps = JSX.IntrinsicElements[\\\"input\\\"] & {\\n    /** Element label */\\n    label?: string;\\n    /** Element instruction */\\n    instruction?: string;\\n    /** Element prefix slot */\\n    leftSlot?: React.ReactNode;\\n    /** Element prefix title */\\n    leftSlotTitle?: string;\\n    /** Callback when prefix button is clicked */\\n    onLeftClick?: (event: React.MouseEvent<HTMLDivElement>) => void;\\n    /** Callback when suffix button is clicked */\\n    onRightClick?: (event: React.MouseEvent<HTMLDivElement>) => void;\\n    /** Component associates with input ref */\\n    reference?: React.RefObject<HTMLInputElement>;\\n    /** Element suffix slot */\\n    rightSlot?: React.ReactNode;\\n    /** Element suffix title */\\n    rightSlotTitle?: string;\\n    /** Feedback indicator object */\\n    indicator?: Indicator;\\n    /** Wrapper props */\\n    wrapperProps?: JSX.IntrinsicElements[\\\"div\\\"];\\n};\\n/** Textbox is a component that allows user to add or edit text with extra text or icon port */\\nexport const Textbox: React.FC<TextboxProps> = React.forwardRef(\\n    ({ leftSlot, leftSlotTitle, onLeftClick, rightSlot, rightSlotTitle, onRightClick, indicator, wrapperProps = {}, ...props }: TextboxProps, ref: React.ForwardedRef<HTMLInputElement>) => {\\n        const [customId, setCustomId] = React.useState<string>(null);\\n        const labelId: string = randomId(\\\"tbgl-\\\");\\n\\n        React.useEffect(() => setCustomId(props.id ? props.id : props.label ? randomId(\\\"tbg-\\\") : null), [props.id]);\\n\\n        return (\\n            <div {...wrapperProps} className={classnames(\\\"rc input-box-group\\\", wrapperProps.className)}>\\n                {props.label && (\\n                    <label id={labelId} className=\\\"custom-label\\\" htmlFor={customId}>\\n                        {props.label}\\n                    </label>\\n                )}\\n                {props.instruction && <p className=\\\"custom-instruction\\\">{props.instruction}</p>}\\n                <div className={classnames(\\\"rc input-group\\\", { disabled: props.disabled })}>\\n                    <FeedbackIndicator {...indicator}>\\n                        <div className=\\\"input-box-group-wrapper\\\">\\n                            {leftSlot && (\\n                                <div\\n                                    className={classnames(\\\"input-group-prepend\\\", { clickable: onLeftClick })}\\n                                    role={onLeftClick ? \\\"button\\\" : null}\\n                                    onClick={onLeftClick}\\n                                    tabIndex={onLeftClick ? 0 : null}\\n                                    aria-hidden={onLeftClick ? null : \\\"true\\\"}\\n                                    aria-describedby={leftSlotTitle ? null : labelId}\\n                                >\\n                                    <span className=\\\"input-group-text\\\" title={leftSlotTitle}>\\n                                        {leftSlot}\\n                                    </span>\\n                                </div>\\n                            )}\\n                            <input {...props} ref={ref} id={customId} className={classnames(\\\"form-control\\\", props.className)} />\\n                            {rightSlot && (\\n                                <div\\n                                    className={classnames(\\\"input-group-append\\\", { clickable: onRightClick })}\\n                                    onClick={onRightClick}\\n                                    role={onRightClick ? \\\"button\\\" : null}\\n                                    tabIndex={onRightClick ? 0 : null}\\n                                    aria-hidden={onRightClick ? null : \\\"true\\\"}\\n                                    aria-describedby={rightSlotTitle ? null : labelId}\\n                                >\\n                                    <span className=\\\"input-group-text\\\" title={rightSlotTitle}>\\n                                        {rightSlot}\\n                                    </span>\\n                                </div>\\n                            )}\\n                        </div>\\n                    </FeedbackIndicator>\\n                </div>\\n            </div>\\n        );\\n    }\\n);\\n\";"],"names":["importString","require","defaultPortOption","label","value","key","textOption","iconOption","indicators","additionalProps","wrapperProps","className","TextboxPage","React","setValue","useDynamicForm","items","initialValue","options","controlType","formElementAdditionalProps","renderForm","controls","state","setHidden","useEffect","indicator","type","indicatorType","message","Docs","mainFile","example","Textbox","instruction","placeholder","leftSlot","leftport","SearchIcon","rightSlot","rightport","onChange","e","target","disabled","code"],"sourceRoot":""}