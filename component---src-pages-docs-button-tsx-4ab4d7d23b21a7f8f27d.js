"use strict";(self.webpackChunkreact_components_docs=self.webpackChunkreact_components_docs||[]).push([[9996],{1823:function(e,t,n){n.r(t);var l=n(27378),a=n(2634),o=n(38535),r=n(91448),i=n(89043),s=[{key:"sm",label:"sm",value:"sm",additionalProps:{wrapperProps:{className:"d-inline-block"}}},{key:"md",label:"md",value:"md",additionalProps:{wrapperProps:{className:"d-inline-block"}}},{key:"lg",label:"lg",value:"lg",additionalProps:{wrapperProps:{className:"d-inline-block"}}}],c=[{key:"primary",label:"primary",value:"primary"},{key:"outline-primary",label:"outline-primary",value:"outline-primary"},{key:"secondary",label:"secondary",value:"secondary"},{key:"danger",label:"danger",value:"danger"},{key:"outline-danger",label:"outline-danger",value:"outline-danger"},{key:"dark",label:"dark",value:"dark"},{key:"light",label:"light",value:"light"},{key:"link",label:"link",value:"link"}];t.default=function(){var e=(0,r.b)([{key:"controls",items:[{key:"size",label:"size",options:s,controlType:"Radio"},{key:"theme",label:"theme",options:c,controlType:"Dropdown",placeholder:"Select theme"},{key:"disabled",label:"disabled",controlType:"Checkbox"},{key:"block",label:"block",description:"Sets the display of the button to block so it can take up the container width",controlType:"Checkbox"}]}]),t=e.renderForm,n=e.state.controls;return l.createElement(a.Z,{exampleTheme:"light"===n.theme?"dark":"dark"===n.theme?"warning":null,mainFile:i,example:l.createElement(o.z,n,"Click me"),code:"<Button>Click me</Button>",controls:t()})}},38535:function(e,t,n){n.d(t,{z:function(){return s}});var l=n(30808),a=n(27378),o=n(508),r=n.n(o),i=["theme","size","block"],s=a.memo(a.forwardRef((function(e,t){var n,o=e.theme,s=void 0===o?"primary":o,c=e.size,m=e.block,p=(0,l.Z)(e,i);return a.createElement("button",Object.assign({},p,{ref:t,className:r()("rc","btn","btn-"+s,(n={},n["btn-"+c]=c,n["btn-block"]=m,n),p.className)}),p.children)})))},89043:function(e,t,n){n.r(t),t.default='import React from "react";\nimport classnames from "classnames";\n\nexport type ButtonTheme = "primary" | "secondary" | "danger" | "outline-primary" | "outline-danger" | "dark" | "light" | "link";\nexport type ButtonSize = "lg" | "md" | "sm";\n\nexport type ButtonProps = JSX.IntrinsicElements["button"] & {\n    /** Button Theme */\n    theme?: ButtonTheme;\n    /** Button size */\n    size?: ButtonSize;\n    /** Fill the parent width */\n    block?: boolean;\n};\n/** Buttons allow users to take action with a single tap. */\nexport const Button: React.FC<ButtonProps> = React.memo(\n    React.forwardRef(({ theme = "primary", size, block, ...props }: ButtonProps, ref: React.ForwardedRef<HTMLButtonElement>) => {\n        return (\n            <button {...props} ref={ref} className={classnames("rc", "btn", `btn-${theme}`, { [`btn-${size}`]: size, "btn-block": block }, props.className)}>\n                {props.children}\n            </button>\n        );\n    })\n);\n'}}]);
//# sourceMappingURL=component---src-pages-docs-button-tsx-4ab4d7d23b21a7f8f27d.js.map