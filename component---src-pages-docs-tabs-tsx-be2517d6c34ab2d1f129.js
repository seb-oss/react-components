"use strict";(self.webpackChunkreact_components_docs=self.webpackChunkreact_components_docs||[]).push([[4502],{38282:function(e,n,t){t.r(n);var a=t(27378),o=t(2634),s=t(46022),c=t(91448),r=t(85929),l=a.memo((function(){var e=a.useState(0),n=e[0],t=e[1],l=(0,c.b)([{key:"controls",items:[{key:"autoSelectOnFocus",label:"Auto select on focus",controlType:"Checkbox"}]}]),u=l.renderForm,i=l.state.controls;return a.createElement(o.Z,{mainFile:r,example:a.createElement(s.m,{value:n,onTabChange:t,autoSelectOnFocus:!!i.autoSelectOnFocus,onTabDelete:function(e){return console.log("on delete",e)}},a.createElement(s.E,null,"First"),a.createElement(s.E,null,"Second"),a.createElement(s.E,null,"Third"),a.createElement(s.E,{disabled:!0},"Fourth")),controls:u(),code:"<Tabs value={value} onTabChange={setValue}>\n    <TabItem>First</TabItem>\n    <TabItem>Second</TabItem>\n    <TabItem>Third</TabItem>\n</Tabs>"})}));n.default=l},85929:function(e,n,t){t.r(n),n.default='import React from "react";\nimport { TabItemProps } from "./TabItem";\nimport classnames from "classnames";\nimport { useCombinedRefs } from "../hooks/useCombinedRef";\nimport { Key } from "../utils";\n\nexport type TabsProps = JSX.IntrinsicElements["ul"] & {\n    /** Index of focsued tab */\n    value?: number;\n    /** set focused index to active index on focus */\n    autoSelectOnFocus?: boolean;\n    /** Callback on tab item changed */\n    onTabChange?: (index: number) => void;\n    /** Callback on tab item when delete key is triggered */\n    onTabDelete?: (index: number) => void;\n};\n/** Tabs organize and allow navigation between groups of content that are related and at the same level of hierarchy. */\nexport const Tabs: React.FC<TabsProps> = React.forwardRef(({ value, onTabChange, autoSelectOnFocus, onTabDelete, ...props }: TabsProps, ref: React.ForwardedRef<HTMLUListElement>) => {\n    const tabsRef: React.MutableRefObject<HTMLUListElement> = useCombinedRefs(ref);\n    const [focusedIndex, setFocusedIndex] = React.useState<number>(value);\n    const [listItems, setListItems] = React.useState<HTMLAnchorElement[]>([]);\n\n    const navigateToTab = (target: HTMLAnchorElement, event: React.MouseEvent | React.KeyboardEvent) => {\n        const nextFocusedIndex: number = parseInt(target.dataset.indexNumber);\n        setFocusedIndex(nextFocusedIndex);\n        target.href?.endsWith("#") && event.preventDefault();\n        if (target.dataset.disabled !== "true") {\n            onTabChange && onTabChange(nextFocusedIndex);\n        }\n    };\n    const onClick = (event: React.MouseEvent<HTMLAnchorElement>) => {\n        navigateToTab(event.currentTarget, event);\n    };\n\n    const focusTab = (index: number, event: React.KeyboardEvent<HTMLUListElement>) => {\n        setFocusedIndex(index);\n        listItems[index]?.focus();\n        if (autoSelectOnFocus) {\n            navigateToTab(listItems[index], event);\n        }\n    };\n\n    const onKeyDown = (event: React.KeyboardEvent<HTMLUListElement>) => {\n        switch (event.key) {\n            case Key.Enter:\n            case Key.Space:\n                navigateToTab(event.target as any, event);\n                break;\n            case Key.ArrowLeft:\n            case Key.ArrowRight:\n                const direction: number = event.key === Key.ArrowLeft ? -1 : 1;\n                const nextFocusedIndex: number = (focusedIndex + listItems.length + direction) % listItems.length;\n                if (nextFocusedIndex >= 0 && nextFocusedIndex < listItems.length) {\n                    focusTab(nextFocusedIndex, event);\n                }\n                break;\n            case Key.Home:\n                focusTab(0, event);\n                break;\n            case Key.End:\n                focusTab(listItems.length - 1, event);\n                break;\n            case Key.Delete:\n                onTabDelete && onTabDelete(focusedIndex);\n                break;\n        }\n    };\n\n    React.useLayoutEffect(() => {\n        setListItems(tabsRef.current ? Array.from(tabsRef.current.querySelectorAll(".nav-tabs > .rc.nav-item > .nav-link")) : []);\n    }, [tabsRef]);\n\n    return (\n        <ul {...props} ref={tabsRef} className={classnames("rc nav nav-tabs", props.className)} role={props.role || "tablist"} onKeyDown={onKeyDown}>\n            {React.Children.map(props.children, (Child: React.ReactElement<TabItemProps>, index: number) => {\n                return React.isValidElement<React.FC<TabItemProps>>(Child)\n                    ? React.cloneElement<any>(Child, {\n                          active: index === value,\n                          onClick,\n                          "data-index-number": index,\n                      })\n                    : Child;\n            })}\n        </ul>\n    );\n});\n'}}]);
//# sourceMappingURL=component---src-pages-docs-tabs-tsx-be2517d6c34ab2d1f129.js.map