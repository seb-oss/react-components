"use strict";(self.webpackChunkreact_components_docs=self.webpackChunkreact_components_docs||[]).push([[2626],{7984:function(e,n,a){a.r(n);var r=a(27378),t=a(2634),c=a(59196),o=a(91448),s=a(32435),i=a(86369),d=a(63280),l=[{label:"danger",value:"danger",key:"danger"},{label:"success",value:"success",key:"success"},{label:"warning",value:"warning",key:"warning"}];n.default=function(){var e=(0,o.b)([{key:"controls",items:[{key:"message",initialValue:"Indicator message",label:"Message",placeholder:"Message",controlType:"Text"},{key:"noBorder",initialValue:!1,label:"noBorder",controlType:"Checkbox"},{key:"type",initialValue:l[0].value,label:"Type",options:l,controlType:"Radio"}]}]),n=e.renderForm,a=e.state.controls;return r.createElement(t.Z,{mainFile:d,example:r.createElement("div",{className:"w-100"},r.createElement(c.a,{id:"indicator",type:a.type,message:null==a?void 0:a.message,noBorder:a.noBorder},r.createElement(s.X,{"aria-describedby":"indicator","aria-invalid":"danger"===a.type},"A Checkbox"),r.createElement(i.E,{"aria-describedby":"indicator","aria-invalid":"danger"===a.type},"A Radio button"),r.createElement("div",{className:"px-3 pb-2"},"Some content ðŸ¦¾"))),code:"<FeedbackIndicator toggle={toggle}>text</FeedbackIndicator>",controls:n()})}},63280:function(e,n,a){a.r(n),n.default='import classnames from "classnames";\nimport React from "react";\nimport "./feedback-indicator.scss";\n\nexport type IndicatorType = "danger" | "warning" | "success" | "none";\nexport type Indicator = FeedbackIndicatorProps;\n\ntype FeedbackIndicatorProps = React.PropsWithChildren<{\n    /** The type of the indicator. Available values: "danger" | "warning" | "success" */\n    type: IndicatorType;\n    /** The indicator message. `children` can also be used instead. */\n    message?: React.ReactNode;\n    /** Disable feedback indicator border */\n    noBorder?: boolean;\n    /** The feedback indicator identifier. */\n    id?: string;\n}>;\n/** A helper component to display feedback for children content */\nexport const FeedbackIndicator: React.FC<FeedbackIndicatorProps> = (props: FeedbackIndicatorProps) => {\n    const [indicatorValue, setIndicatorValue] = React.useState<number>(0);\n\n    React.useEffect(() => {\n        switch (props.type) {\n            case "danger":\n                setIndicatorValue(10);\n                break;\n            case "warning":\n                setIndicatorValue(50);\n                break;\n            case "success":\n                setIndicatorValue(100);\n                break;\n            default:\n                setIndicatorValue(0);\n        }\n    }, [props.type]);\n\n    function wrap(children: any) {\n        const Child: any = React.Children.toArray(children)[0];\n\n        return React.isValidElement(Child) ? (\n            <>\n                {React.cloneElement<any>(Child as any, {\n                    className: classnames((Child.props as any).className, `rc-d feedback feedback-${indicatorValue}`, { "no-border": props.noBorder }, { "mb-0": props.message }),\n                })}\n                {props.type && (\n                    <p className={classnames("rc-d feedback-message")} role="alert" id={props.id}>\n                        {props.message}\n                    </p>\n                )}\n            </>\n        ) : (\n            Child\n        );\n    }\n\n    const count: number = React.Children.count(props.children);\n\n    return count ? (props.type ? wrap(count > 1 ? <div>{props.children}</div> : props.children) : props.children) : null;\n};\n'}}]);
//# sourceMappingURL=component---src-pages-docs-feedbackindicator-tsx-6bdd3845d2fd45676030.js.map