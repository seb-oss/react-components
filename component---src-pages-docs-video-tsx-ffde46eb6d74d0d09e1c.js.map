{"version":3,"file":"component---src-pages-docs-video-tsx-ffde46eb6d74d0d09e1c.js","mappings":"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","sources":["webpack://react-components-docs/../lib/src/Video/api-mapper.ts","webpack://react-components-docs/../lib/src/Video/Video.tsx","webpack://react-components-docs/./src/pages/docs/video.tsx","webpack://react-components-docs/../lib/src/Video/Video.tsx?852a","webpack://react-components-docs/../lib/src/Video/types-definition.ts"],"sourcesContent":["import { Mapper, YoutubeAPI, VimeoAPI } from \"./types-definition\";\n\nexport const youtubeKeysMapper: Partial<Mapper<YoutubeAPI>> = {\n    autoplay: { keys: [\"autoplay\"] },\n    allowFullScreen: { keys: [\"fs\"] },\n    showControls: { keys: [\"controls\"] },\n    playsinline: { keys: [\"playsinline\"] },\n    showCaptions: { keys: [\"cc_load_policy\"] },\n    color: { keys: [\"color\"] },\n    disableKeyboardInteraction: { keys: [\"disablekb\"] },\n    enableAPIControl: { keys: [\"enablejsapi\"] },\n    endTime: { keys: [\"end\"] },\n    loop: { keys: [\"loop\"] },\n    language: { keys: [\"cc_lang_pref\", \"hl\"] },\n    showVideoAnnotations: { keys: [\"iv_load_policy\"], values: { oldValue: false, newValue: 3 } },\n    youtubeListType: { keys: [\"listType\"] },\n    youtubeList: { keys: [\"list\"] },\n    hideBranding: { keys: [\"modestbranding\"] },\n    origin: { keys: [\"origin\"] },\n    playlist: { keys: [\"playlist\"] },\n    showRelatedVideosFromDifferentChannel: { keys: [\"rel\"] },\n    startTime: { keys: [\"start\"] },\n    widgetReferrer: { keys: [\"widget_referrer\"] },\n};\n\nexport const vimeoKeysMapper: Partial<Mapper<VimeoAPI>> = {\n    autoplay: { keys: [\"autoplay\"] },\n    autopause: { keys: [\"autopause\"] },\n    setBackgroundAsTransparent: { keys: [\"background\"] },\n    showOwnerName: { keys: [\"byline\"] },\n    showControls: { keys: [\"controls\"] },\n    allowSessionTracking: { keys: [\"dnt\"] },\n    vimeoFunMode: { keys: [\"fun\"] },\n    color: { keys: [\"color\"] },\n    loop: { keys: [\"loop\"] },\n    muted: { keys: [\"muted\"] },\n    playsinline: { keys: [\"playsinline\"] },\n    showOwnerPortrait: { keys: [\"portrait\"] },\n    quality: { keys: [\"quality\"] },\n    showPlaybackSpeedSetting: { keys: [\"speed\"] },\n    language: { keys: [\"texttrack\"] },\n    showTitle: { keys: [\"title\"] },\n    startTime: { keys: [\"t\"], conjunctionSymbol: \"#\" },\n};\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { VideoProps, Mapper, YoutubeAPI, VimeoAPI, MapperItem } from \"./types-definition\";\nimport { vimeoKeysMapper, youtubeKeysMapper } from \"./api-mapper\";\nimport \"./video.scss\";\n\n/** A video component is an React component for playing videos */\nexport const Video: React.FC<VideoProps> = (props: VideoProps) => {\n    const [src, setSrc] = React.useState<string>(\"\");\n    const vimeoVideoPrefix: string = \"vimeo\";\n\n    const formatParams = React.useCallback(\n        (props) => {\n            let newSrc: string = `${props.src}?html5=1`;\n            const keysMapper: Partial<Mapper<YoutubeAPI> | Mapper<VimeoAPI>> = newSrc.toLowerCase().indexOf(vimeoVideoPrefix) > -1 ? vimeoKeysMapper : youtubeKeysMapper;\n            const listOfPropKeys: Array<string> = Object.keys(props);\n            let newParams: string = \"\";\n            Object.keys(keysMapper)\n                .filter((item: string) => listOfPropKeys.indexOf(item) > -1 && props[item] !== null && props[item] !== undefined)\n                .map((item: string) => {\n                    const mapper: MapperItem<YoutubeAPI | VimeoAPI> = keysMapper[item];\n                    mapper.keys.map((key: string) => {\n                        newParams += `${mapper.conjunctionSymbol || \"&\"}${key}=${\n                            mapper.values && mapper.values.oldValue === props[item] ? mapper.values.newValue : typeof props[item] === \"boolean\" ? (props[item] ? 1 : 0) : props[item]\n                        }`;\n                    });\n                });\n            newSrc += newParams;\n            setSrc(newSrc);\n        },\n        [props]\n    );\n\n    React.useEffect(() => {\n        formatParams(props);\n    }, [props]);\n\n    return (\n        <div className={classnames(\"rc\", \"video-holder-component\", props.className)} id={props.id}>\n            <iframe title={props.title} src={src} height={props.height} width={props.width} allowFullScreen={props.allowFullScreen} name={props.name} frameBorder={0} />\n        </div>\n    );\n};\n","import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { Video } from \"@sebgroup/react-components/Video\";\nimport { DynamicFormOption, DynamicFormSection, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\n\nconst VideoPage: React.FC = () => {\n    const defaultSrc: string = \"https://www.youtube.com/embed/f19fctL72CY\";\n    const importString: string = require(\"!raw-loader!@sebgroup/react-components/Video/Video\");\n    const referenceString: Array<string> = [require(\"!raw-loader!@sebgroup/react-components/Video/types-definition\")];\n    const defaultHeight: string = \"300px\";\n    const defaultWidth: string = \"535px\";\n    const defaultCheckboxControls: Array<DynamicFormOption> = [\n        { label: \"allowFullScreen\", value: \"allowFullScreen\", key: \"allowFullScreen\" },\n        { label: \"loop\", value: \"loop\", key: \"loop\" },\n        { label: \"autoplay\", value: \"autoplay\", key: \"autoplay\" },\n        { label: \"showControls\", value: \"showControls\", key: \"showControls\" },\n    ];\n    const checkboxControls: Array<DynamicFormOption> = [\n        ...defaultCheckboxControls,\n        { label: \"hideBranding\", value: \"hideBranding\", key: \"hideBranding\" },\n        { label: \"showVideoAnnotations\", value: \"showVideoAnnotations\", key: \"showVideoAnnotations\" },\n    ];\n    const fields: Array<DynamicFormSection> = [\n        {\n            key: \"controls\",\n            items: [\n                { key: \"src\", initialValue: defaultSrc, label: \"Source\", placeholder: \"Source of video\", controlType: \"Text\" },\n                { key: \"width\", initialValue: defaultWidth, label: \"Width\", placeholder: \"Width of video\", controlType: \"Text\" },\n                { key: \"height\", initialValue: defaultHeight, label: \"Height\", placeholder: \"Height of video\", controlType: \"Text\" },\n                { key: \"language\", initialValue: null, label: \"Language\", placeholder: \"Language of video player\", controlType: \"Text\" },\n                { key: \"startTime\", initialValue: null, label: \"Start time of playback\", placeholder: \"Playback starts at\", controlType: \"Text\" },\n                { key: \"endTime\", initialValue: null, label: \"End time of playback\", placeholder: \"Playback ends at\", controlType: \"Text\" },\n                { label: \"Optional configurations\", key: \"checkboxes\", initialValue: defaultCheckboxControls.map((e) => e.value), controlType: \"Option\", options: checkboxControls },\n            ],\n        },\n    ];\n    const {\n        renderForm,\n        state: { controls },\n    } = useDynamicForm(fields);\n    const code: string = `<Video [src]=\"src\"\n        [width]=\"width\"\n        [height]=\"height\"\n    />`;\n\n    /** check if key selected */\n    const checkSelectedKey = (key: string) => {\n        return (controls.checkboxes as string[])?.some((item: string) => item === key);\n    };\n\n    return (\n        <Docs\n            mainFile={importString}\n            importedFiles={referenceString}\n            example={\n                <Video\n                    name=\"myVideo\"\n                    title=\"Sample Video\"\n                    src={(controls as any)?.src || defaultSrc}\n                    width={(controls as any)?.width || defaultWidth}\n                    height={(controls as any)?.height || defaultHeight}\n                    language={(controls as any)?.language}\n                    startTime={(controls as any)?.startTime}\n                    autoplay={checkSelectedKey(\"autoplay\")}\n                    allowFullScreen={checkSelectedKey(\"allowFullScreen\")}\n                    loop={checkSelectedKey(\"loop\")}\n                    showControls={checkSelectedKey(\"showControls\")}\n                    hideBranding={checkSelectedKey(\"hideBranding\")}\n                    showVideoAnnotations={checkSelectedKey(\"showVideoAnnotations\")}\n                />\n            }\n            code={code}\n            controls={\n                <>\n                    {renderForm()}\n                    <div>\n                        <label>Source samples</label>\n                        <p>Vimeo: https://player.vimeo.com/video/259422408</p>\n                        <p>Youtube: https://www.youtube.com/embed/f19fctL72CY</p>\n                    </div>\n                </>\n            }\n        />\n    );\n};\n\nexport default VideoPage;\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport { VideoProps, Mapper, YoutubeAPI, VimeoAPI, MapperItem } from \\\"./types-definition\\\";\\nimport { vimeoKeysMapper, youtubeKeysMapper } from \\\"./api-mapper\\\";\\nimport \\\"./video.scss\\\";\\n\\n/** A video component is an React component for playing videos */\\nexport const Video: React.FC<VideoProps> = (props: VideoProps) => {\\n    const [src, setSrc] = React.useState<string>(\\\"\\\");\\n    const vimeoVideoPrefix: string = \\\"vimeo\\\";\\n\\n    const formatParams = React.useCallback(\\n        (props) => {\\n            let newSrc: string = `${props.src}?html5=1`;\\n            const keysMapper: Partial<Mapper<YoutubeAPI> | Mapper<VimeoAPI>> = newSrc.toLowerCase().indexOf(vimeoVideoPrefix) > -1 ? vimeoKeysMapper : youtubeKeysMapper;\\n            const listOfPropKeys: Array<string> = Object.keys(props);\\n            let newParams: string = \\\"\\\";\\n            Object.keys(keysMapper)\\n                .filter((item: string) => listOfPropKeys.indexOf(item) > -1 && props[item] !== null && props[item] !== undefined)\\n                .map((item: string) => {\\n                    const mapper: MapperItem<YoutubeAPI | VimeoAPI> = keysMapper[item];\\n                    mapper.keys.map((key: string) => {\\n                        newParams += `${mapper.conjunctionSymbol || \\\"&\\\"}${key}=${\\n                            mapper.values && mapper.values.oldValue === props[item] ? mapper.values.newValue : typeof props[item] === \\\"boolean\\\" ? (props[item] ? 1 : 0) : props[item]\\n                        }`;\\n                    });\\n                });\\n            newSrc += newParams;\\n            setSrc(newSrc);\\n        },\\n        [props]\\n    );\\n\\n    React.useEffect(() => {\\n        formatParams(props);\\n    }, [props]);\\n\\n    return (\\n        <div className={classnames(\\\"rc\\\", \\\"video-holder-component\\\", props.className)} id={props.id}>\\n            <iframe title={props.title} src={src} height={props.height} width={props.width} allowFullScreen={props.allowFullScreen} name={props.name} frameBorder={0} />\\n        </div>\\n    );\\n};\\n\";","export default \"export interface VideoProps {\\n    /** Allow video to be played in full screen mode */\\n    allowFullScreen?: boolean;\\n    /** `Support Vimeo only` prevent the player from tracking session data, including cookies */\\n    allowSessionTracking?: boolean;\\n    /** `Support Vimeo only` pause the current video when another Vimeo video on the same page starts to play */\\n    autopause?: boolean;\\n    /** Play video automatically */\\n    autoplay?: boolean;\\n    /** Element class name */\\n    className?: string;\\n    /** Color value of the video controls: Youtube player only supports `red` | `white` */\\n    color?: \\\"red\\\" | \\\"white\\\" | string;\\n    /** `Support Youtube only` disable keyboard controls */\\n    disableKeyboardInteraction?: boolean;\\n    /** `Support Youtube only` enables the player to be controlled via IFrame Player API calls */\\n    enableAPIControl?: boolean;\\n    /** Element height */\\n    height: string;\\n    /** `Support Youtube only` hides YouTube logo */\\n    hideBranding?: boolean;\\n    /** Element ID */\\n    id?: string;\\n    /** Video player's interface language */\\n    language?: string;\\n    /** Loop video */\\n    loop?: boolean;\\n    /** `Support Vimeo only` the playback quality of the video */\\n    muted?: boolean;\\n    /** Element name */\\n    name: string;\\n    /** `Support Youtube only` provides an extra security measure for the IFrame API */\\n    origin?: string;\\n    /** `Support Youtube only` specifies a comma-separated list of video IDs to play */\\n    playlist?: string;\\n    /** controls whether videos play inline or fullscreen in an HTML5 player on iOS or mobile devices */\\n    playsinline?: boolean;\\n    /** `Support Vimeo only` the playback quality of the video */\\n    quality?: \\\"240p\\\" | \\\"360p\\\" | \\\"540p\\\" | \\\"720p\\\" | \\\"1080p\\\" | \\\"2k\\\" | \\\"4k\\\";\\n    /** `Support Vimeo only` set the background of the player area to transparent */\\n    setBackgroundAsTransparent?: boolean;\\n    /** `Support Vimeo only` display video as a background video */\\n    showAsBackgroundVideo?: boolean;\\n    /** `Support Youtube only` show captions */\\n    showCaptions?: boolean;\\n    /** Show video controls */\\n    showControls?: boolean;\\n    /** `Support Vimeo only` show owner's name */\\n    showOwnerName?: boolean;\\n    /** `Support Vimeo only` show owner's portrait */\\n    showOwnerPortrait?: boolean;\\n    /** `Support Vimeo only` show speed setting */\\n    showPlaybackSpeedSetting?: boolean;\\n    /** `Support Youtube only` if it's set to false, related videos will come from the same channel as the video that was just played, default: `true` */\\n    showRelatedVideosFromDifferentChannel?: boolean;\\n    /** `Support Vimeo only` display the video's title. */\\n    showTitle?: boolean;\\n    /** `Support Youtube only` shows video annotations, default: `true` */\\n    showVideoAnnotations?: boolean;\\n    /** Element source */\\n    src: string;\\n    /** Begin playing the video at the given number of seconds */\\n    startTime?: number;\\n    /** `Support Youtube only` specifies the time, measured in seconds from the start of the video, when the player should stop playing the video. */\\n    endTime?: number;\\n    /** Video title */\\n    title?: string;\\n    /** `Support Vimeo only` to enable informal error messages in the player */\\n    vimeoFunMode?: boolean;\\n    /** `Support Youtube only` identifies the URL where the player is embedded */\\n    widgetReferrer?: string;\\n    /** Element width */\\n    width: string;\\n    /** `Support Youtube only` identifies the list that will load in the player */\\n    youtubeList?: string;\\n    /** `Support Youtube only` identifies the type of list that will load in the player */\\n    youtubeListType?: \\\"user_uploads\\\" | \\\"playlist\\\";\\n}\\n\\nexport type MapperItem<T> = { keys: Array<keyof T>; values?: { oldValue: T[keyof T]; newValue: any }; conjunctionSymbol?: \\\"&\\\" | \\\"#\\\" };\\n\\nexport type Mapper<T> = Record<keyof VideoProps, MapperItem<T>>;\\n\\ninterface CommonAPI {\\n    /** Play video automatically */\\n    autoplay?: boolean;\\n    /** Show video controls */\\n    controls?: boolean;\\n    /** Loop video */\\n    loop?: boolean;\\n    playsinline?: boolean;\\n}\\n\\nexport interface YoutubeAPI extends CommonAPI {\\n    cc_lang_pref?: string;\\n    cc_load_policy?: boolean;\\n    color?: \\\"red\\\" | \\\"white\\\";\\n    disablekb?: boolean;\\n    enablejsapi?: boolean;\\n    end?: number;\\n    fs?: boolean;\\n    hl?: string;\\n    iv_load_policy?: 1 | 3;\\n    listType?: \\\"search\\\" | \\\"user_uploads\\\" | \\\"playlist\\\";\\n    list?: string;\\n    modestbranding?: boolean;\\n    origin?: string;\\n    playlist?: string;\\n    rel?: boolean;\\n    start?: number;\\n    widget_referrer?: string;\\n}\\n\\nexport interface VimeoAPI extends CommonAPI {\\n    autopause?: boolean;\\n    background?: boolean;\\n    byline?: boolean;\\n    color?: string;\\n    dnt?: boolean;\\n    fun?: boolean;\\n    muted?: boolean;\\n    portrait?: boolean;\\n    quality?: \\\"240p\\\" | \\\"360p\\\" | \\\"540p\\\" | \\\"720p\\\" | \\\"1080p\\\" | \\\"2k\\\" | \\\"4k\\\";\\n    speed?: boolean;\\n    t?: string;\\n    texttrack?: string;\\n    title?: boolean;\\n    transparent?: boolean;\\n}\\n\";"],"names":["youtubeKeysMapper","autoplay","keys","allowFullScreen","showControls","playsinline","showCaptions","color","disableKeyboardInteraction","enableAPIControl","endTime","loop","language","showVideoAnnotations","values","oldValue","newValue","youtubeListType","youtubeList","hideBranding","origin","playlist","showRelatedVideosFromDifferentChannel","startTime","widgetReferrer","vimeoKeysMapper","autopause","setBackgroundAsTransparent","showOwnerName","allowSessionTracking","vimeoFunMode","muted","showOwnerPortrait","quality","showPlaybackSpeedSetting","showTitle","conjunctionSymbol","Video","props","React","src","setSrc","formatParams","newSrc","keysMapper","toLowerCase","indexOf","listOfPropKeys","Object","newParams","filter","item","undefined","map","mapper","key","className","classnames","id","title","height","width","name","frameBorder","defaultSrc","importString","require","referenceString","defaultHeight","defaultWidth","defaultCheckboxControls","label","value","checkboxControls","fields","items","initialValue","placeholder","controlType","e","options","useDynamicForm","renderForm","controls","state","checkSelectedKey","checkboxes","_controls$checkboxes","some","Docs","mainFile","importedFiles","example","code"],"sourceRoot":""}