{"version":3,"file":"component---src-pages-docs-rating-tsx-0904554e88dc8c3ccb9d.js","mappings":"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","sources":["webpack://react-components-docs/../lib/src/Rating/SVGComponent.tsx","webpack://react-components-docs/../lib/src/Rating/Rating.tsx","webpack://react-components-docs/./src/pages/docs/rating.tsx","webpack://react-components-docs/../lib/src/Rating/Rating.tsx?9c8a","webpack://react-components-docs/./static/icons/heart.svg"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport type SVGProps = JSX.IntrinsicElements[\"svg\"] & {\n    colors?: [string, string];\n    index?: number;\n    value?: number;\n    step?: number;\n    customSVG?: any;\n};\n\nconst starSVG: JSX.Element = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.283.95l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z\" />\n    </svg>\n);\n\nexport const SVGComponent: React.FC<SVGProps> = ({ colors, index, value, customSVG, step, ...props }: SVGProps) => {\n    const [activePercentage, setActivePercentage] = useState(value);\n\n    useEffect(() => {\n        if (value >= index) {\n            setActivePercentage((value - index) * 100);\n        }\n    }, [value]);\n\n    const getGradientId = React.useCallback(\n        (defaultValue?: string): string => {\n            const isInt: boolean = step % 1 === 0;\n            if (isInt) {\n                return \"url(#full_grad)\";\n            } else {\n                switch (step) {\n                    case 0.5:\n                        return defaultValue || \"url(#half_grad)\";\n                    default:\n                        return `url(#dynamic_grad${index})`;\n                }\n            }\n        },\n        [step, index]\n    );\n\n    /**\n     * Set backgroud color based on the value selected/hovered and the steps chosen\n     */\n    const setLinearGradientType = (): string => {\n        if (!value || value === 0) {\n            return \"url(#no_grad)\";\n        } else {\n            if (value > index && value <= index + 1 / 2) {\n                return getGradientId();\n            } else if (value >= index + 1) {\n                return \"url(#full_grad)\";\n            } else if (value > index && value < index + 1) {\n                return getGradientId(\"url(#full_grad)\");\n            }\n            return \"url(#no_grad)\";\n        }\n    };\n\n    return (\n        <svg {...props} viewBox=\"0 0 16 16\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n            {props.name && <title>{props.name}</title>}\n            <defs>\n                <linearGradient id={`dynamic_grad${index}`}>\n                    <stop offset={`${activePercentage - 1}%`} style={{ stopColor: colors[1] }} />\n                    <stop offset={`1%`} style={{ stopColor: colors[0] }} />\n                    <stop offset={`${100 - activePercentage}%`} style={{ stopColor: colors[0] }} />\n                </linearGradient>\n                <linearGradient id=\"full_grad\">\n                    <stop offset=\"100%\" stopColor={colors[1]} />\n                </linearGradient>\n                <linearGradient id=\"half_grad\">\n                    <stop offset=\"50%\" stopColor={colors[1]} />\n                    <stop offset=\"50%\" stopColor={colors[0]} />\n                </linearGradient>\n                <linearGradient id=\"no_grad\">\n                    <stop offset=\"100%\" stopColor={colors[0]} />\n                </linearGradient>\n            </defs>\n            {React.cloneElement(customSVG || starSVG, {\n                preserveAspectRatio: \"xMinYMin meet\",\n                fill: setLinearGradientType(),\n                key: index,\n            })}\n        </svg>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport classnames from \"classnames\";\nimport { SVGComponent } from \"./SVGComponent\";\nimport \"./rating.scss\";\n\nexport type RatingProps = JSX.IntrinsicElements[\"input\"] & {\n    /** Array of two colors to fill the states of the svgs */\n    colors?: [string, string];\n    /** Div wrapper props */\n    wrapperProps?: JSX.IntrinsicElements[\"div\"];\n    /** svg to use instead of the default */\n    customSVG?: JSX.IntrinsicElements[\"svg\"];\n    /**  name to be used for accessibility */\n    svgname?: string;\n    /** Dimensions (width/height) of the component  */\n    dimension?: number;\n};\n\n/**\n * @member 0 Grey (Unselected)\n * @member 1 Yellow (Selected)\n */\nconst initialColors: [string, string] = [\"#A9A9A9\", \"#FFC500\"];\nconst disabledColors: [string, string] = [\"#dddddd\", \"#bfbfbf\"];\n\nexport const Rating: React.FC<RatingProps> = React.forwardRef(({ dimension = 30, colors, customSVG, wrapperProps, ...props }: RatingProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n    const [displayValue, setDisplayValue] = useState<number>(Number(props.value));\n    const [min, setMin] = useState<number>(0);\n    const [max, setMax] = useState<number>(Number(props.max) || 5);\n\n    useEffect(() => {\n        setDisplayValue(Number(props.value));\n    }, [props.value]);\n\n    useEffect(() => {\n        if (props.max) {\n            setMax(Number(props.max));\n        }\n    }, [props.max]);\n\n    useEffect(() => {\n        setMin(Number(props.min));\n    }, [props.min]);\n\n    /**\n     * Retrieves colors, either the colors passed in the props or use initialColors object\n     * @returns {Array<string>} The array of colors\n     */\n    const getColors = (): [string, string] => {\n        if (colors && colors.length) {\n            switch (colors.length) {\n                case 2:\n                    return colors;\n                default:\n                    return initialColors;\n            }\n        }\n        return props.disabled ? disabledColors : initialColors;\n    };\n\n    const onHover = (e: React.MouseEvent<HTMLInputElement>): void => {\n        !props.readOnly && setDisplayValue(calculateDisplayValue(e));\n    };\n\n    const onLeave = (): void => {\n        !props.readOnly && setDisplayValue(Number(props.value));\n    };\n\n    const calculateDisplayValue = (e: React.MouseEvent<HTMLInputElement>): number => {\n        const position: number = calculateHoverPercentage(e);\n        return max * Number(parseFloat(String(position)).toFixed(2));\n    };\n\n    const calculateHoverPercentage = (event: React.MouseEvent): number => {\n        const clientX: number = event.clientX;\n        const targetRect: DOMRect = (event.target as HTMLElement).getBoundingClientRect();\n        const delta: number = clientX - targetRect.left;\n        return delta < 0 ? 0 : delta / targetRect.width;\n    };\n\n    return (\n        <div {...wrapperProps} className={classnames(\"rc\", \"rating\", wrapperProps?.className)}>\n            <div className=\"rating-icons\">\n                {Array.apply(null, { length: max }).map((e: number, i: number) => (\n                    <SVGComponent\n                        colors={getColors()}\n                        key={i}\n                        index={i}\n                        value={displayValue}\n                        customSVG={customSVG}\n                        step={Number(props.step)}\n                        width={dimension}\n                        height={dimension}\n                        name={props.svgname}\n                    />\n                ))}\n            </div>\n            <input\n                {...props}\n                ref={ref}\n                type=\"range\"\n                onChange={!props.readOnly ? props.onChange : null}\n                onClick={!props.readOnly ? props.onClick : null}\n                onMouseEnter={onHover}\n                onMouseLeave={onLeave}\n                onMouseMove={onHover}\n            />\n        </div>\n    );\n});\n","import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { Rating } from \"@sebgroup/react-components/Rating\";\nimport { useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport HeartSVG from \"../../../static/icons/heart.svg\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Rating/Rating\");\nconst code: string = `<Rating value={number} onChange={(e) => setValue(e.target.value)} />`;\n\nconst RatingPage: React.FC = (): React.ReactElement<void> => {\n    const [value, setValue] = React.useState<number>(1);\n    const {\n        renderForm: renderControls,\n        state: { controls },\n    } = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"max\", label: \"Max\", controlType: \"Text\", initialValue: 5 },\n                { key: \"min\", label: \"Min\", description: \"Should no be smaller than step\", controlType: \"Text\", initialValue: 1 },\n                { key: \"step\", label: \"Step\", controlType: \"Text\", initialValue: 1 },\n                { key: \"dimension\", label: \"Icon Dimension\", controlType: \"Text\", initialValue: 30 },\n                { key: \"readOnly\", label: \"Read only\", controlType: \"Checkbox\", initialValue: false },\n                { key: \"disabled\", label: \"Disabled\", controlType: \"Checkbox\", initialValue: false },\n                { key: \"customSvg\", label: \"Custom SVG\", controlType: \"Checkbox\", initialValue: false },\n                {\n                    key: \"color\",\n                    label: \"Color\",\n                    options: [\n                        { key: \"default\", label: \"Default color\", value: \"\" },\n                        { key: \"greyandblack\", label: \"Grey & Black\", value: \"greyandblack\" },\n                        { key: \"lightblueandblue\", label: \"Light blue & blue\", value: \"lightblueandblue\" },\n                        { key: \"lightgreenandGreen\", label: \"Light green & green\", value: \"lightgreenandGreen\" },\n                    ],\n                    controlType: \"Radio\",\n                },\n            ],\n        },\n    ]);\n\n    const { color, readOnly, disabled, dimension, max, min, step } = controls as { [k: string]: any };\n\n    console.log(color);\n\n    const getColor = React.useCallback((): [string, string] => {\n        switch (color) {\n            case \"greyandblack\":\n                return [\"grey\", \"black\"];\n            case \"lightblueandblue\":\n                return [\"lightblue\", \"blue\"];\n            case \"lightgreenandGreen\":\n                return [\"lightgreen\", \"green\"];\n            default:\n                return null;\n        }\n    }, [color]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100 d-flex justify-content-center\">\n                    <Rating\n                        id=\"some-id\"\n                        className=\"custom-class\"\n                        {...{ readOnly, disabled, dimension, max, min, step }}\n                        svgname=\"custom name\"\n                        colors={getColor()}\n                        customSVG={controls.customSvg ? <HeartSVG /> : null}\n                        value={value}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                            setValue(Number(e.target.value));\n                        }}\n                    />\n                </div>\n            }\n            code={code}\n            controls={renderControls()}\n        />\n    );\n};\n\nexport default RatingPage;\n","export default \"import React, { useState, useEffect } from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport { SVGComponent } from \\\"./SVGComponent\\\";\\nimport \\\"./rating.scss\\\";\\n\\nexport type RatingProps = JSX.IntrinsicElements[\\\"input\\\"] & {\\n    /** Array of two colors to fill the states of the svgs */\\n    colors?: [string, string];\\n    /** Div wrapper props */\\n    wrapperProps?: JSX.IntrinsicElements[\\\"div\\\"];\\n    /** svg to use instead of the default */\\n    customSVG?: JSX.IntrinsicElements[\\\"svg\\\"];\\n    /**  name to be used for accessibility */\\n    svgname?: string;\\n    /** Dimensions (width/height) of the component  */\\n    dimension?: number;\\n};\\n\\n/**\\n * @member 0 Grey (Unselected)\\n * @member 1 Yellow (Selected)\\n */\\nconst initialColors: [string, string] = [\\\"#A9A9A9\\\", \\\"#FFC500\\\"];\\nconst disabledColors: [string, string] = [\\\"#dddddd\\\", \\\"#bfbfbf\\\"];\\n\\nexport const Rating: React.FC<RatingProps> = React.forwardRef(({ dimension = 30, colors, customSVG, wrapperProps, ...props }: RatingProps, ref: React.ForwardedRef<HTMLInputElement>) => {\\n    const [displayValue, setDisplayValue] = useState<number>(Number(props.value));\\n    const [min, setMin] = useState<number>(0);\\n    const [max, setMax] = useState<number>(Number(props.max) || 5);\\n\\n    useEffect(() => {\\n        setDisplayValue(Number(props.value));\\n    }, [props.value]);\\n\\n    useEffect(() => {\\n        if (props.max) {\\n            setMax(Number(props.max));\\n        }\\n    }, [props.max]);\\n\\n    useEffect(() => {\\n        setMin(Number(props.min));\\n    }, [props.min]);\\n\\n    /**\\n     * Retrieves colors, either the colors passed in the props or use initialColors object\\n     * @returns {Array<string>} The array of colors\\n     */\\n    const getColors = (): [string, string] => {\\n        if (colors && colors.length) {\\n            switch (colors.length) {\\n                case 2:\\n                    return colors;\\n                default:\\n                    return initialColors;\\n            }\\n        }\\n        return props.disabled ? disabledColors : initialColors;\\n    };\\n\\n    const onHover = (e: React.MouseEvent<HTMLInputElement>): void => {\\n        !props.readOnly && setDisplayValue(calculateDisplayValue(e));\\n    };\\n\\n    const onLeave = (): void => {\\n        !props.readOnly && setDisplayValue(Number(props.value));\\n    };\\n\\n    const calculateDisplayValue = (e: React.MouseEvent<HTMLInputElement>): number => {\\n        const position: number = calculateHoverPercentage(e);\\n        return max * Number(parseFloat(String(position)).toFixed(2));\\n    };\\n\\n    const calculateHoverPercentage = (event: React.MouseEvent): number => {\\n        const clientX: number = event.clientX;\\n        const targetRect: DOMRect = (event.target as HTMLElement).getBoundingClientRect();\\n        const delta: number = clientX - targetRect.left;\\n        return delta < 0 ? 0 : delta / targetRect.width;\\n    };\\n\\n    return (\\n        <div {...wrapperProps} className={classnames(\\\"rc\\\", \\\"rating\\\", wrapperProps?.className)}>\\n            <div className=\\\"rating-icons\\\">\\n                {Array.apply(null, { length: max }).map((e: number, i: number) => (\\n                    <SVGComponent\\n                        colors={getColors()}\\n                        key={i}\\n                        index={i}\\n                        value={displayValue}\\n                        customSVG={customSVG}\\n                        step={Number(props.step)}\\n                        width={dimension}\\n                        height={dimension}\\n                        name={props.svgname}\\n                    />\\n                ))}\\n            </div>\\n            <input\\n                {...props}\\n                ref={ref}\\n                type=\\\"range\\\"\\n                onChange={!props.readOnly ? props.onChange : null}\\n                onClick={!props.readOnly ? props.onClick : null}\\n                onMouseEnter={onHover}\\n                onMouseLeave={onLeave}\\n                onMouseMove={onHover}\\n            />\\n        </div>\\n    );\\n});\\n\";","var React = require('react');\n\nfunction Heart (props) {\n    return React.createElement(\"svg\",props,React.createElement(\"path\",{\"fillRule\":\"evenodd\",\"d\":\"M8 1.314C12.438-3.248 23.534 4.735 8 15-7.534 4.736 3.562-3.248 8 1.314z\"}));\n}\n\nHeart.defaultProps = {};\n\nmodule.exports = Heart;\n\nHeart.default = Heart;\n"],"names":["starSVG","React","xmlns","d","SVGComponent","colors","index","value","customSVG","step","props","useState","activePercentage","setActivePercentage","useEffect","getGradientId","defaultValue","viewBox","version","xmlnsXlink","name","id","offset","style","stopColor","preserveAspectRatio","fill","key","initialColors","disabledColors","Rating","ref","dimension","wrapperProps","Number","displayValue","setDisplayValue","setMin","max","setMax","min","onHover","e","readOnly","calculateDisplayValue","position","calculateHoverPercentage","parseFloat","String","toFixed","event","clientX","targetRect","target","getBoundingClientRect","delta","left","width","className","classnames","Array","apply","length","map","i","disabled","height","svgname","type","onChange","onClick","onMouseEnter","onMouseLeave","onMouseMove","importString","require","setValue","useDynamicForm","items","label","controlType","initialValue","description","options","renderControls","renderForm","controls","state","color","console","log","getColor","Docs","mainFile","example","customSvg","HeartSVG","code","Heart","createElement","defaultProps","module","exports","default"],"sourceRoot":""}