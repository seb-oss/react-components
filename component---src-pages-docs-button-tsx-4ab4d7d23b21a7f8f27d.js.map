{"version":3,"file":"component---src-pages-docs-button-tsx-4ab4d7d23b21a7f8f27d.js","mappings":"0LAKMA,EAAuBC,EAAQ,OAG/BC,EAAoD,CACtD,CAAEC,IAAK,KAAMC,MAAO,KAAMC,MAAO,KAAMC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,oBACrF,CAAEL,IAAK,KAAMC,MAAO,KAAMC,MAAO,KAAMC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,oBACrF,CAAEL,IAAK,KAAMC,MAAO,KAAMC,MAAO,KAAMC,gBAAiB,CAAEC,aAAc,CAAEC,UAAW,qBAEnFC,EAAsD,CACxD,CAAEN,IAAK,UAAWC,MAAO,UAAWC,MAAO,WAC3C,CAAEF,IAAK,kBAAmBC,MAAO,kBAAmBC,MAAO,mBAC3D,CAAEF,IAAK,YAAaC,MAAO,YAAaC,MAAO,aAC/C,CAAEF,IAAK,SAAUC,MAAO,SAAUC,MAAO,UACzC,CAAEF,IAAK,iBAAkBC,MAAO,iBAAkBC,MAAO,kBACzD,CAAEF,IAAK,OAAQC,MAAO,OAAQC,MAAO,QACrC,CAAEF,IAAK,QAASC,MAAO,QAASC,MAAO,SACvC,CAAEF,IAAK,OAAQC,MAAO,OAAQC,MAAO,SA8BzC,UA3B6B,WACzB,OAGIK,EAAAA,EAAAA,GAAe,CACf,CACIP,IAAK,WACLQ,MAAO,CACH,CAAER,IAAK,OAAQC,MAAO,OAAQQ,QAASV,EAAaW,YAAa,SACjE,CAAEV,IAAK,QAASC,MAAO,QAASQ,QAASH,EAAcI,YAAa,WAAYC,YAAa,gBAC7F,CAAEX,IAAK,WAAYC,MAAO,WAAYS,YAAa,YACnD,CAAEV,IAAK,QAASC,MAAO,QAASW,YAAa,gFAAiFF,YAAa,gBATvIG,EADhB,EACIC,WACSC,EAFb,EAEIC,MAASD,SAab,OACIE,EAAAA,cAACC,EAAAA,EAAD,CACIC,aAAiC,UAAnBJ,EAASK,MAAoB,OAA4B,SAAnBL,EAASK,MAAmB,UAAY,KAC5FC,SAAUxB,EACVyB,QAASL,EAAAA,cAACM,EAAAA,EAAYR,EAAb,YACTS,KAvCS,4BAwCTT,SAAUF,KAtBtB,C,+HCTaU,EAAgCN,EAAAA,KACzCA,EAAAA,YAAiB,WAA4DQ,GAAgD,IAAD,MAAxGL,MAAAA,OAAwG,MAAhG,UAAgG,EAArFM,EAAqF,EAArFA,KAAMC,EAA+E,EAA/EA,MAAUC,GAAqE,YACxH,OACIX,EAAAA,cAAAA,SAAAA,OAAAA,OAAAA,CAAAA,EAAYW,EAAZ,CAAmBH,IAAKA,EAAKpB,UAAWwB,IAAW,KAAM,MAAP,OAAqBT,GAArB,cAAwCM,GAASA,EAAjD,EAAuD,aAAaC,EAApE,GAA6EC,EAAMvB,aAChIuB,EAAME,SAHnB,I,+BChBJ,69B","sources":["webpack://react-components-docs/./src/pages/docs/button.tsx","webpack://react-components-docs/../lib/src/Button/Button.tsx","webpack://react-components-docs/../lib/src/Button/Button.tsx?7910"],"sourcesContent":["import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { Button, ButtonSize, ButtonTheme } from \"@sebgroup/react-components/Button\";\nimport { DynamicFormOption, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/Button/Button\");\nconst code: string = `<Button>Click me</Button>`;\n\nconst buttonSizes: Array<DynamicFormOption<ButtonSize>> = [\n    { key: \"sm\", label: \"sm\", value: \"sm\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"md\", label: \"md\", value: \"md\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"lg\", label: \"lg\", value: \"lg\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\nconst buttonThemes: Array<DynamicFormOption<ButtonTheme>> = [\n    { key: \"primary\", label: \"primary\", value: \"primary\" },\n    { key: \"outline-primary\", label: \"outline-primary\", value: \"outline-primary\" },\n    { key: \"secondary\", label: \"secondary\", value: \"secondary\" },\n    { key: \"danger\", label: \"danger\", value: \"danger\" },\n    { key: \"outline-danger\", label: \"outline-danger\", value: \"outline-danger\" },\n    { key: \"dark\", label: \"dark\", value: \"dark\" },\n    { key: \"light\", label: \"light\", value: \"light\" },\n    { key: \"link\", label: \"link\", value: \"link\" },\n];\n\nconst ButtonPage: React.FC = () => {\n    const {\n        renderForm: renderControls,\n        state: { controls },\n    } = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"size\", label: \"size\", options: buttonSizes, controlType: \"Radio\" },\n                { key: \"theme\", label: \"theme\", options: buttonThemes, controlType: \"Dropdown\", placeholder: \"Select theme\" },\n                { key: \"disabled\", label: \"disabled\", controlType: \"Checkbox\" },\n                { key: \"block\", label: \"block\", description: \"Sets the display of the button to block so it can take up the container width\", controlType: \"Checkbox\" },\n            ],\n        },\n    ]);\n\n    return (\n        <Docs\n            exampleTheme={controls.theme === \"light\" ? \"dark\" : controls.theme === \"dark\" ? \"warning\" : null}\n            mainFile={importString}\n            example={<Button {...(controls as { [k: string]: any })}>Click me</Button>}\n            code={code}\n            controls={renderControls()}\n        />\n    );\n};\n\nexport default ButtonPage;\n","import React from \"react\";\nimport classnames from \"classnames\";\n\nexport type ButtonTheme = \"primary\" | \"secondary\" | \"danger\" | \"outline-primary\" | \"outline-danger\" | \"dark\" | \"light\" | \"link\";\nexport type ButtonSize = \"lg\" | \"md\" | \"sm\";\n\nexport type ButtonProps = JSX.IntrinsicElements[\"button\"] & {\n    /** Button Theme */\n    theme?: ButtonTheme;\n    /** Button size */\n    size?: ButtonSize;\n    /** Fill the parent width */\n    block?: boolean;\n};\n/** Buttons allow users to take action with a single tap. */\nexport const Button: React.FC<ButtonProps> = React.memo(\n    React.forwardRef(({ theme = \"primary\", size, block, ...props }: ButtonProps, ref: React.ForwardedRef<HTMLButtonElement>) => {\n        return (\n            <button {...props} ref={ref} className={classnames(\"rc\", \"btn\", `btn-${theme}`, { [`btn-${size}`]: size, \"btn-block\": block }, props.className)}>\n                {props.children}\n            </button>\n        );\n    })\n);\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\n\\nexport type ButtonTheme = \\\"primary\\\" | \\\"secondary\\\" | \\\"danger\\\" | \\\"outline-primary\\\" | \\\"outline-danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"link\\\";\\nexport type ButtonSize = \\\"lg\\\" | \\\"md\\\" | \\\"sm\\\";\\n\\nexport type ButtonProps = JSX.IntrinsicElements[\\\"button\\\"] & {\\n    /** Button Theme */\\n    theme?: ButtonTheme;\\n    /** Button size */\\n    size?: ButtonSize;\\n    /** Fill the parent width */\\n    block?: boolean;\\n};\\n/** Buttons allow users to take action with a single tap. */\\nexport const Button: React.FC<ButtonProps> = React.memo(\\n    React.forwardRef(({ theme = \\\"primary\\\", size, block, ...props }: ButtonProps, ref: React.ForwardedRef<HTMLButtonElement>) => {\\n        return (\\n            <button {...props} ref={ref} className={classnames(\\\"rc\\\", \\\"btn\\\", `btn-${theme}`, { [`btn-${size}`]: size, \\\"btn-block\\\": block }, props.className)}>\\n                {props.children}\\n            </button>\\n        );\\n    })\\n);\\n\";"],"names":["importString","require","buttonSizes","key","label","value","additionalProps","wrapperProps","className","buttonThemes","useDynamicForm","items","options","controlType","placeholder","description","renderControls","renderForm","controls","state","React","Docs","exampleTheme","theme","mainFile","example","Button","code","ref","size","block","props","classnames","children"],"sourceRoot":""}