{"version":3,"file":"component---src-pages-docs-radiobutton-tsx-6ed2a03206a63e668a59.js","mappings":"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","sources":["webpack://react-components-docs/./src/pages/docs/radiobutton.tsx","webpack://react-components-docs/../lib/src/RadioButton/RadioButton.tsx?b732"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport Docs from \"@common/Docs\";\nimport { DynamicFormOption, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { RadioButton, RadioGroup } from \"@sebgroup/react-components/RadioButton\";\nimport { CodeSnippet } from \"@common/CodeSnippet\";\nimport { Indicator, IndicatorType } from \"@sebgroup/react-components/FeedbackIndicator\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/RadioButton/RadioButton\");\nconst code: string = `{/* Use them in our RadioGroup helper component */}\n<RadioGroup name=\"test-group\" value={value} onChange={(e) => setValue(e.target.value)}>\n    <RadioButton value=\"Yes\">Yes</RadioButton>\n    <RadioButton value=\"No\">No</RadioButton>\n    <RadioButton value=\"Maybe\">Maybe</RadioButton>\n</RadioGroup>\n\n{/* Use them individually */}\n<RadioButton name=\"group-name\" value=\"Yes\" checked={value === \"Yes\"} onChange={(e) => setValue(e.target.value)}>Yes</RadioButton>\n<RadioButton name=\"group-name\" value=\"No\" checked={value === \"No\"} onChange={(e) => setValue(e.target.value)}>No</RadioButton>\n<RadioButton name=\"group-name\" value=\"Maybe\" checked={value === \"Maybe\"} onChange={(e) => setValue(e.target.value)}>Maybe</RadioButton>`;\n\nconst indicators: Array<DynamicFormOption<IndicatorType>> = [\n    { key: \"error\", label: \"danger\", value: \"danger\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"success\", label: \"success\", value: \"success\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"warning\", label: \"warning\", value: \"warning\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\n\nconst indicatorGrouping: Array<DynamicFormOption> = [\n    { key: \"individual\", label: \"Individual\", value: \"1\", description: \"Pass an indicator to individual radio buttons\" },\n    { key: \"grouped\", label: \"Grouped\", value: \"2\", description: \"Pass an indicator to a RadioGroup or wrap a group of radio buttons with a FeedbackIndicator\" },\n];\n\nconst RadioButtonPage: React.FC = () => {\n    const [value, setValue] = React.useState<React.ReactText>(\"Yes\");\n\n    const {\n        renderForm: renderControls,\n        state: { controls },\n        setHidden,\n    } = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"inline\", label: \"inline\", controlType: \"Checkbox\", initialValue: false, description: \"Displays them inline\" },\n                { key: \"disabled\", label: \"disabled\", controlType: \"Checkbox\", initialValue: false },\n                { key: \"indicator\", label: \"indicator\", controlType: \"Checkbox\", initialValue: false },\n                {\n                    key: \"indicatorGrouping\",\n                    label: \"Indicator choices\",\n                    controlType: \"Radio\",\n                    options: indicatorGrouping,\n                    initialValue: indicatorGrouping[0].value,\n                },\n                {\n                    key: \"indicatorType\",\n                    label: \"Indicator type\",\n                    controlType: \"Radio\",\n                    options: indicators,\n                    initialValue: indicators[0].value,\n                },\n            ],\n        },\n    ]);\n\n    useEffect(() => {\n        setHidden(\"controls\", \"indicatorType\", !controls.indicator);\n        setHidden(\"controls\", \"indicatorGrouping\", !controls.indicator);\n    }, [controls.indicator]);\n\n    const isIndividual: boolean = controls.indicatorGrouping === \"1\";\n    const isGrouped: boolean = controls.indicatorGrouping === \"2\";\n    const indicator: Indicator = React.useMemo(() => {\n        return controls.indicator ? { type: controls.indicatorType as IndicatorType, message: \"Indicator message\" } : null;\n    }, [controls.indicator, controls.indicatorType]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100\">\n                    <RadioGroup\n                        name=\"test-group\"\n                        label=\"Element label\"\n                        value={value}\n                        onChange={(e) => setValue(e.target.value)}\n                        disabled={!!controls?.disabled}\n                        indicator={isGrouped ? indicator : null}\n                    >\n                        <RadioButton value=\"Yes\" wrapperProps={controls.inline ? { className: \"d-inline-block\" } : {}} indicator={isIndividual ? indicator : null}>\n                            Yes\n                            <p className=\"text-muted m-0\">Express yourself here</p>\n                        </RadioButton>\n                        <RadioButton value=\"No\" wrapperProps={controls.inline ? { className: \"d-inline-block\" } : {}}>\n                            No\n                        </RadioButton>\n                        <RadioButton value=\"Maybe\" wrapperProps={controls.inline ? { className: \"d-inline-block\" } : {}}>\n                            Maybe\n                        </RadioButton>\n                    </RadioGroup>\n                </div>\n            }\n            code={code}\n            controls={renderControls()}\n            note={\n                <>\n                    <h4>Radio group</h4>\n                    <p>\n                        We have exported a helper component that makes it easy for you to compose a radio group. The component is name <code>RadioGroup</code>. You can apply group level properties\n                        like <code>indicator</code> or <code>disabled</code>\n                    </p>\n\n                    <br />\n\n                    <h4>Radio buttons with description</h4>\n                    <p>\n                        Radio buttons can sometimes be rendered with a description, in order to do that, you can simply render a <code>p</code> tag as children. It will look something like this:\n                    </p>\n                    <CodeSnippet className=\"card\" language=\"jsx\">\n                        {`<RadioButton>\n    Label\n    <p className=\"text-muted m-0\">Description here</p>\n</RadioButton>`}\n                    </CodeSnippet>\n                </>\n            }\n        />\n    );\n};\n\nexport default RadioButtonPage;\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport { randomId } from \\\"@sebgroup/frontend-tools/randomId\\\";\\nimport { FeedbackIndicator, Indicator } from \\\"../FeedbackIndicator\\\";\\nimport \\\"./radio-button.scss\\\";\\n\\nexport type RadioButtonProps<T = React.ReactText> = Omit<JSX.IntrinsicElements[\\\"input\\\"], \\\"value\\\"> & {\\n    /** Radio button value */\\n    value?: T;\\n    indicator?: Indicator;\\n    /** Props for the div wrapper around the radio input element */\\n    wrapperProps?: JSX.IntrinsicElements[\\\"div\\\"];\\n};\\n/** A radio button allows a user to select a single item from a predefined list of options. Radio buttons are common to use in forms, i.e when you apply for a loan and need to enter \\\"Yes\\\" or \\\"No\\\". */\\nexport const RadioButton: React.FC<RadioButtonProps> = React.forwardRef(({ children, indicator, wrapperProps = {}, ...props }: RadioButtonProps, ref: React.ForwardedRef<HTMLInputElement>) => {\\n    const [id, setId] = React.useState<string>(\\\"\\\");\\n\\n    React.useEffect(() => setId(props.id || randomId(\\\"radiobtn-\\\")), [props.id]);\\n\\n    return (\\n        <FeedbackIndicator {...indicator}>\\n            <div {...wrapperProps} className={classnames(\\\"rc radio-button\\\", wrapperProps.className)}>\\n                <div className=\\\"rc custom-radio custom-control\\\">\\n                    <input {...props} ref={ref} className={classnames(\\\"custom-control-input\\\", props.className)} type=\\\"radio\\\" id={id} />\\n                    {children && (\\n                        <label htmlFor={id} className=\\\"custom-control-label\\\">\\n                            {children}\\n                        </label>\\n                    )}\\n                </div>\\n            </div>\\n        </FeedbackIndicator>\\n    );\\n});\\n\";"],"names":["importString","require","indicators","key","label","value","additionalProps","wrapperProps","className","indicatorGrouping","description","React","setValue","useDynamicForm","items","controlType","initialValue","options","renderControls","renderForm","controls","state","setHidden","useEffect","indicator","isIndividual","isGrouped","type","indicatorType","message","Docs","mainFile","example","RadioGroup","name","onChange","e","target","disabled","RadioButton","inline","code","note","CodeSnippet","language"],"sourceRoot":""}