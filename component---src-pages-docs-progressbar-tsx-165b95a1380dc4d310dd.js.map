{"version":3,"file":"component---src-pages-docs-progressbar-tsx-165b95a1380dc4d310dd.js","mappings":"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","sources":["webpack://react-components-docs/../lib/src/ProgressBar/ProgressBar.tsx","webpack://react-components-docs/./src/pages/docs/progressbar.tsx","webpack://react-components-docs/../lib/src/Slider/Slider.tsx","webpack://react-components-docs/../lib/src/ProgressBar/ProgressBar.tsx?9b4f"],"sourcesContent":["import React from \"react\";\nimport classnames from \"classnames\";\nimport \"./progressbar.scss\";\n\nexport type ProgressBarProps = JSX.IntrinsicElements[\"progress\"] & {\n    /** Progress bar theme */\n    theme?: \"purple\" | \"primary\" | \"danger\" | \"success\" | \"warning\" | \"inverted\";\n};\n/** A visual representation of progress for loading content. */\nexport const ProgressBar: React.FC<ProgressBarProps> = React.forwardRef(({ theme = \"primary\", ...props }: ProgressBarProps, ref: React.ForwardedRef<HTMLProgressElement>) => {\n    return <progress {...props} ref={ref} className={classnames(\"rc progress-bar\", { [`theme-${theme}`]: theme }, props.className)} />;\n});\n","import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { ProgressBar, ProgressBarProps } from \"@sebgroup/react-components/ProgressBar\";\nimport { DynamicFormOption, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { Slider } from \"@sebgroup/react-components/Slider\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/ProgressBar/ProgressBar\");\nconst code: string = `<ProgressBar value={progress} />`;\n\nconst themes: Array<DynamicFormOption<ProgressBarProps[\"theme\"]>> = [\n    { label: \"purple\", value: \"purple\", key: \"purple\" },\n    { label: \"primary\", value: \"primary\", key: \"primary\" },\n    { label: \"danger\", value: \"danger\", key: \"danger\" },\n    { label: \"success\", value: \"success\", key: \"success\" },\n    { label: \"warning\", value: \"warning\", key: \"warning\" },\n    { label: \"inverted\", value: \"inverted\", key: \"inverted\" },\n];\n\nconst ProgressBarPage: React.FC = (): React.ReactElement<void> => {\n    const [value, setValue] = React.useState<number>(50);\n\n    const {\n        renderForm: renderControls,\n        state: { controls },\n    } = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [{ key: \"theme\", label: \"theme\", controlType: \"Dropdown\", options: themes, initialValue: themes[0].value }],\n        },\n    ]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100\">\n                    <ProgressBar id=\"progress-bar\" aria-label=\"Sample progress bar\" value={value} max={100} theme={controls.theme as ProgressBarProps[\"theme\"]} />\n                </div>\n            }\n            code={code}\n            controls={\n                <>\n                    {renderControls()}\n                    <br />\n                    <Slider label=\"Value\" min={0} max={100} value={value} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setValue(parseInt(e.target.value))} />\n                </>\n            }\n        />\n    );\n};\n\nexport default ProgressBarPage;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport \"./slider.scss\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\n\n// This solution is meant to fix Gatsby build which complains that window doesn't exist in server-side rendering\nconst safeWindow: Window | null = typeof window !== \"undefined\" ? window : null;\n\nexport type SliderTheme = \"primary\" | \"inverted\" | \"success\" | \"danger\" | \"warning\" | \"purple\";\nexport type SliderAppearance = \"normal\" | \"alternative\";\n\nexport interface SliderLabel {\n    position: number;\n    label: React.ReactNode;\n}\n\nexport type SliderProps = Omit<JSX.IntrinsicElements[\"input\"], \"value\"> & {\n    /** set to always show tooltip */\n    alwaysShowTooltip?: boolean;\n    /** field label */\n    label?: string;\n    /** range slider labels */\n    labels?: Array<SliderLabel>;\n    /** set to show ticks */\n    showTicks?: boolean;\n    /** slider theme: `primary` | `inverted` | `success` | `danger` | `warning` | `purple` */\n    theme?: SliderTheme;\n    /** set to show alternative theme */\n    alternative?: boolean;\n    /** tooltip theme: `primary` | `inverted` | `success` | `danger` | `warning` | `purple` */\n    tooltipTheme?: SliderTheme;\n    /** tooltip value */\n    tooltipValue?: string;\n    /** field value */\n    value: number;\n    /** Indicator type and message */\n    indicator?: Indicator;\n};\n\n/** The component allows for easy adjustments of a value and check the updated result immediately. */\nexport const Slider: React.FC<SliderProps> = React.forwardRef(\n    (\n        { alwaysShowTooltip, label, labels, max, min, showTicks, step, theme = \"primary\", alternative, tooltipTheme = \"inverted\", tooltipValue, indicator, value, disabled, id, ...props }: SliderProps,\n        ref: React.ForwardedRef<HTMLInputElement>\n    ) => {\n        const inputWrapperRef: React.MutableRefObject<HTMLDivElement> = React.useRef<HTMLDivElement>();\n        const [minValue, setMinValue] = React.useState<number>((min as number) || 0);\n        const [maxValue, setMaxValue] = React.useState<number>((max as number) || 100);\n        const [sliderTrackBackground, setSliderTrackBackground] = React.useState<string>(null);\n        const [labelsPositions, setLabelsPositions] = React.useState<Array<string>>([]);\n        const [uniqueId, setUniqueId] = React.useState<string>(id);\n\n        /**\n         * Calculating the position of the label based on it's value\n         * @param {number} value The Slider value\n         * @returns {number} The position of the label in percentage\n         */\n        function getLabelPosition(value: number): number {\n            if (value >= maxValue) {\n                return 100;\n            } else if (value <= minValue) {\n                return 0;\n            }\n            return Math.abs(((value - minValue) / (maxValue - minValue)) * 100);\n        }\n\n        React.useEffect(() => {\n            // Checking if the min or max are not numbers, null value or undefined\n            const minValue: number = typeof min !== \"number\" ? 0 : min;\n            const maxValue: number = typeof max !== \"number\" ? 100 : max;\n            setMinValue(minValue);\n            setMaxValue(maxValue);\n        }, [min, max]);\n\n        React.useEffect(() => {\n            if (labels && labels.length) {\n                const positions: Array<string> = [];\n                labels.map((label: SliderLabel) => {\n                    positions.push(getLabelPosition(label.position) + \"%\");\n                });\n                setLabelsPositions(positions);\n            }\n        }, [labels, minValue, maxValue]);\n\n        React.useEffect(() => {\n            setUniqueId(id ? id : randomId(\"slider-\"));\n        }, [id]);\n\n        React.useLayoutEffect(() => {\n            let newTrackBackground: string = null;\n            if (inputWrapperRef?.current) {\n                const style: CSSStyleDeclaration = safeWindow?.getComputedStyle(inputWrapperRef?.current);\n                const inputStyle: CSSStyleDeclaration = safeWindow?.getComputedStyle(inputWrapperRef?.current.querySelector(\"input\"));\n                const backgroundColor: string = style?.getPropertyValue(\"--slider-background-color\");\n                const primaryColor: string = style?.getPropertyValue(\"--slider-primary-color\");\n                const percent: number = Math.abs(((value - minValue) / (maxValue - minValue)) * 100);\n                newTrackBackground = `linear-gradient(to right, ${primaryColor} calc(${inputStyle.marginLeft} / 0.25), ${primaryColor} calc(${inputStyle.marginLeft} * 2 + ${percent}%), ${backgroundColor} ${percent}%, ${backgroundColor} 100%)`;\n            }\n            setSliderTrackBackground(newTrackBackground);\n        }, [inputWrapperRef, value, theme, disabled]);\n\n        return (\n            <FeedbackIndicator {...indicator} noBorder>\n                <div className={classnames(\"rc custom-slider\", props.className, `custom-slider--${theme}`, { \"custom-slider--disabled\": disabled })}>\n                    {label && (\n                        <label className=\"custom-slider__label\" htmlFor={uniqueId}>\n                            {label}\n                        </label>\n                    )}\n                    <div ref={inputWrapperRef} className={classnames(\"custom-slider__input-field\", { \"custom-slider__input-field--alt\": alternative })}>\n                        <input\n                            {...props}\n                            id={uniqueId}\n                            value={value}\n                            disabled={disabled}\n                            style={{ background: sliderTrackBackground }}\n                            ref={ref}\n                            type=\"range\"\n                            min={minValue}\n                            max={maxValue}\n                            step={step}\n                        />\n                        <div\n                            aria-hidden\n                            className={classnames(\"custom-slider__tooltip-wrapper\", `custom-slider__tooltip-wrapper--${tooltipTheme}`, {\n                                \"custom-slider__tooltip-wrapper--force-show\": alwaysShowTooltip,\n                            })}\n                        >\n                            <div className=\"custom-slider__tooltip\" style={{ left: `${getLabelPosition(value)}%` }}>\n                                {tooltipValue || value}\n                            </div>\n                        </div>\n                        {labels && labels.length ? (\n                            <div className=\"custom-slider__tickmarks\" aria-hidden>\n                                {labels.map((item: SliderLabel, i: number) => {\n                                    return (\n                                        <div\n                                            key={i}\n                                            className={classnames(\"custom-slider__tickmarks-label\", { \"custom-slider__tickmarks-label--ticks\": showTicks })}\n                                            style={{ left: labelsPositions[i] }}\n                                        >\n                                            <span>{item.label}</span>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        ) : null}\n                    </div>\n                </div>\n            </FeedbackIndicator>\n        );\n    }\n);\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport \\\"./progressbar.scss\\\";\\n\\nexport type ProgressBarProps = JSX.IntrinsicElements[\\\"progress\\\"] & {\\n    /** Progress bar theme */\\n    theme?: \\\"purple\\\" | \\\"primary\\\" | \\\"danger\\\" | \\\"success\\\" | \\\"warning\\\" | \\\"inverted\\\";\\n};\\n/** A visual representation of progress for loading content. */\\nexport const ProgressBar: React.FC<ProgressBarProps> = React.forwardRef(({ theme = \\\"primary\\\", ...props }: ProgressBarProps, ref: React.ForwardedRef<HTMLProgressElement>) => {\\n    return <progress {...props} ref={ref} className={classnames(\\\"rc progress-bar\\\", { [`theme-${theme}`]: theme }, props.className)} />;\\n});\\n\";"],"names":["ProgressBar","React","ref","theme","props","className","classnames","importString","require","themes","label","value","key","setValue","useDynamicForm","items","controlType","options","initialValue","renderControls","renderForm","controls","state","Docs","mainFile","example","id","max","code","Slider","min","onChange","e","parseInt","target","safeWindow","window","alwaysShowTooltip","labels","showTicks","step","alternative","tooltipTheme","tooltipValue","indicator","disabled","inputWrapperRef","minValue","setMinValue","maxValue","setMaxValue","sliderTrackBackground","setSliderTrackBackground","labelsPositions","setLabelsPositions","uniqueId","setUniqueId","getLabelPosition","Math","abs","length","positions","map","push","position","randomId","newTrackBackground","current","style","getComputedStyle","inputStyle","querySelector","backgroundColor","getPropertyValue","primaryColor","percent","marginLeft","FeedbackIndicator","noBorder","htmlFor","background","type","left","item","i"],"sourceRoot":""}